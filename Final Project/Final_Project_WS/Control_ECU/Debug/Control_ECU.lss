
Control_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000021ee  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001a  00800060  000021ee  00002282  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000012  0080007a  0080007a  0000229c  2**0
                  ALLOC
  3 .stab         00002634  00000000  00000000  0000229c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001570  00000000  00000000  000048d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00005e40  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00005f80  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000060f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00007d39  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00008c24  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  000099d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00009b34  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00009dc1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a58f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 da 0d 	jmp	0x1bb4	; 0x1bb4 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 0d 0e 	jmp	0x1c1a	; 0x1c1a <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee ee       	ldi	r30, 0xEE	; 238
      68:	f1 e2       	ldi	r31, 0x21	; 33
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 37       	cpi	r26, 0x7A	; 122
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	aa e7       	ldi	r26, 0x7A	; 122
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 38       	cpi	r26, 0x8C	; 140
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a3 05 	call	0xb46	; 0xb46 <main>
      8a:	0c 94 f5 10 	jmp	0x21ea	; 0x21ea <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 be 10 	jmp	0x217c	; 0x217c <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 da 10 	jmp	0x21b4	; 0x21b4 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 ca 10 	jmp	0x2194	; 0x2194 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 e6 10 	jmp	0x21cc	; 0x21cc <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 ca 10 	jmp	0x2194	; 0x2194 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 e6 10 	jmp	0x21cc	; 0x21cc <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 be 10 	jmp	0x217c	; 0x217c <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 da 10 	jmp	0x21b4	; 0x21b4 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 ca 10 	jmp	0x2194	; 0x2194 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 e6 10 	jmp	0x21cc	; 0x21cc <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 ca 10 	jmp	0x2194	; 0x2194 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 e6 10 	jmp	0x21cc	; 0x21cc <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 ca 10 	jmp	0x2194	; 0x2194 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 e6 10 	jmp	0x21cc	; 0x21cc <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 ce 10 	jmp	0x219c	; 0x219c <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 ea 10 	jmp	0x21d4	; 0x21d4 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <main>:
void Buzzer_function(void);
uint8 compare_password(uint8 *pass_1 , uint8 *pass_2, uint8 size);
/*******************************************************************************
 *                      		Main Function                                  *
 *******************************************************************************/
int main(void){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	a1 97       	sbiw	r28, 0x21	; 33
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
	/*Enable I-bit*/
	SREG|=(1<<7);
     b5a:	af e5       	ldi	r26, 0x5F	; 95
     b5c:	b0 e0       	ldi	r27, 0x00	; 0
     b5e:	ef e5       	ldi	r30, 0x5F	; 95
     b60:	f0 e0       	ldi	r31, 0x00	; 0
     b62:	80 81       	ld	r24, Z
     b64:	80 68       	ori	r24, 0x80	; 128
     b66:	8c 93       	st	X, r24

	/*Initialization UART*/
	UART_ConfigType UART_Config ={BIT_DATA_8_BITS,DISABLED,STOP_BIT_1,BAUD_RATE_9600};
     b68:	ce 01       	movw	r24, r28
     b6a:	01 96       	adiw	r24, 0x01	; 1
     b6c:	9c 8b       	std	Y+20, r25	; 0x14
     b6e:	8b 8b       	std	Y+19, r24	; 0x13
     b70:	e3 e7       	ldi	r30, 0x73	; 115
     b72:	f0 e0       	ldi	r31, 0x00	; 0
     b74:	fe 8b       	std	Y+22, r31	; 0x16
     b76:	ed 8b       	std	Y+21, r30	; 0x15
     b78:	f7 e0       	ldi	r31, 0x07	; 7
     b7a:	ff 8b       	std	Y+23, r31	; 0x17
     b7c:	ed 89       	ldd	r30, Y+21	; 0x15
     b7e:	fe 89       	ldd	r31, Y+22	; 0x16
     b80:	00 80       	ld	r0, Z
     b82:	8d 89       	ldd	r24, Y+21	; 0x15
     b84:	9e 89       	ldd	r25, Y+22	; 0x16
     b86:	01 96       	adiw	r24, 0x01	; 1
     b88:	9e 8b       	std	Y+22, r25	; 0x16
     b8a:	8d 8b       	std	Y+21, r24	; 0x15
     b8c:	eb 89       	ldd	r30, Y+19	; 0x13
     b8e:	fc 89       	ldd	r31, Y+20	; 0x14
     b90:	00 82       	st	Z, r0
     b92:	8b 89       	ldd	r24, Y+19	; 0x13
     b94:	9c 89       	ldd	r25, Y+20	; 0x14
     b96:	01 96       	adiw	r24, 0x01	; 1
     b98:	9c 8b       	std	Y+20, r25	; 0x14
     b9a:	8b 8b       	std	Y+19, r24	; 0x13
     b9c:	9f 89       	ldd	r25, Y+23	; 0x17
     b9e:	91 50       	subi	r25, 0x01	; 1
     ba0:	9f 8b       	std	Y+23, r25	; 0x17
     ba2:	ef 89       	ldd	r30, Y+23	; 0x17
     ba4:	ee 23       	and	r30, r30
     ba6:	51 f7       	brne	.-44     	; 0xb7c <main+0x36>
	UART_init(&UART_Config);
     ba8:	ce 01       	movw	r24, r28
     baa:	01 96       	adiw	r24, 0x01	; 1
     bac:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <UART_init>

	/*Initialization The timer with 1 sec for every interrupt*/
	Timer1_ConfigType Timer1_Config ={0,8000,TIMER1_PRESCALER_1024,TIMER1_COMPARE_MODE_4};
     bb0:	ce 01       	movw	r24, r28
     bb2:	08 96       	adiw	r24, 0x08	; 8
     bb4:	99 8f       	std	Y+25, r25	; 0x19
     bb6:	88 8f       	std	Y+24, r24	; 0x18
     bb8:	ed e6       	ldi	r30, 0x6D	; 109
     bba:	f0 e0       	ldi	r31, 0x00	; 0
     bbc:	fb 8f       	std	Y+27, r31	; 0x1b
     bbe:	ea 8f       	std	Y+26, r30	; 0x1a
     bc0:	f6 e0       	ldi	r31, 0x06	; 6
     bc2:	fc 8f       	std	Y+28, r31	; 0x1c
     bc4:	ea 8d       	ldd	r30, Y+26	; 0x1a
     bc6:	fb 8d       	ldd	r31, Y+27	; 0x1b
     bc8:	00 80       	ld	r0, Z
     bca:	8a 8d       	ldd	r24, Y+26	; 0x1a
     bcc:	9b 8d       	ldd	r25, Y+27	; 0x1b
     bce:	01 96       	adiw	r24, 0x01	; 1
     bd0:	9b 8f       	std	Y+27, r25	; 0x1b
     bd2:	8a 8f       	std	Y+26, r24	; 0x1a
     bd4:	e8 8d       	ldd	r30, Y+24	; 0x18
     bd6:	f9 8d       	ldd	r31, Y+25	; 0x19
     bd8:	00 82       	st	Z, r0
     bda:	88 8d       	ldd	r24, Y+24	; 0x18
     bdc:	99 8d       	ldd	r25, Y+25	; 0x19
     bde:	01 96       	adiw	r24, 0x01	; 1
     be0:	99 8f       	std	Y+25, r25	; 0x19
     be2:	88 8f       	std	Y+24, r24	; 0x18
     be4:	9c 8d       	ldd	r25, Y+28	; 0x1c
     be6:	91 50       	subi	r25, 0x01	; 1
     be8:	9c 8f       	std	Y+28, r25	; 0x1c
     bea:	ec 8d       	ldd	r30, Y+28	; 0x1c
     bec:	ee 23       	and	r30, r30
     bee:	51 f7       	brne	.-44     	; 0xbc4 <main+0x7e>
	Timer1_init(&Timer1_Config);
     bf0:	ce 01       	movw	r24, r28
     bf2:	08 96       	adiw	r24, 0x08	; 8
     bf4:	0e 94 40 0e 	call	0x1c80	; 0x1c80 <Timer1_init>
	Timer1_setCallBack(Timer1_callback);
     bf8:	8b ea       	ldi	r24, 0xAB	; 171
     bfa:	96 e0       	ldi	r25, 0x06	; 6
     bfc:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <Timer1_setCallBack>

	/*Initialization I2C*/
	TWI_ConfigType TWI_Config = {0b00000010,BIT_RATE_FAST_MODE};
     c00:	ce 01       	movw	r24, r28
     c02:	0e 96       	adiw	r24, 0x0e	; 14
     c04:	9e 8f       	std	Y+30, r25	; 0x1e
     c06:	8d 8f       	std	Y+29, r24	; 0x1d
     c08:	e8 e6       	ldi	r30, 0x68	; 104
     c0a:	f0 e0       	ldi	r31, 0x00	; 0
     c0c:	f8 a3       	std	Y+32, r31	; 0x20
     c0e:	ef 8f       	std	Y+31, r30	; 0x1f
     c10:	f5 e0       	ldi	r31, 0x05	; 5
     c12:	f9 a3       	std	Y+33, r31	; 0x21
     c14:	ef 8d       	ldd	r30, Y+31	; 0x1f
     c16:	f8 a1       	ldd	r31, Y+32	; 0x20
     c18:	00 80       	ld	r0, Z
     c1a:	8f 8d       	ldd	r24, Y+31	; 0x1f
     c1c:	98 a1       	ldd	r25, Y+32	; 0x20
     c1e:	01 96       	adiw	r24, 0x01	; 1
     c20:	98 a3       	std	Y+32, r25	; 0x20
     c22:	8f 8f       	std	Y+31, r24	; 0x1f
     c24:	ed 8d       	ldd	r30, Y+29	; 0x1d
     c26:	fe 8d       	ldd	r31, Y+30	; 0x1e
     c28:	00 82       	st	Z, r0
     c2a:	8d 8d       	ldd	r24, Y+29	; 0x1d
     c2c:	9e 8d       	ldd	r25, Y+30	; 0x1e
     c2e:	01 96       	adiw	r24, 0x01	; 1
     c30:	9e 8f       	std	Y+30, r25	; 0x1e
     c32:	8d 8f       	std	Y+29, r24	; 0x1d
     c34:	99 a1       	ldd	r25, Y+33	; 0x21
     c36:	91 50       	subi	r25, 0x01	; 1
     c38:	99 a3       	std	Y+33, r25	; 0x21
     c3a:	e9 a1       	ldd	r30, Y+33	; 0x21
     c3c:	ee 23       	and	r30, r30
     c3e:	51 f7       	brne	.-44     	; 0xc14 <main+0xce>
	TWI_init(&TWI_Config);
     c40:	ce 01       	movw	r24, r28
     c42:	0e 96       	adiw	r24, 0x0e	; 14
     c44:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <TWI_init>

	/*Initialization DC-motor */
	DcMotor_Init();
     c48:	0e 94 78 09 	call	0x12f0	; 0x12f0 <DcMotor_Init>

	/*Initialization Buzzer*/
	Buzzer_init();
     c4c:	0e 94 4f 09 	call	0x129e	; 0x129e <Buzzer_init>

	/*don't start program until first MC is ready and sent you verification*/
	while(UART_recieveByte() != MC1_READY);
     c50:	0e 94 0d 10 	call	0x201a	; 0x201a <UART_recieveByte>
     c54:	80 31       	cpi	r24, 0x10	; 16
     c56:	e1 f7       	brne	.-8      	; 0xc50 <main+0x10a>

	/*set password opertion for first time!*/
	Set_Password();
     c58:	0e 94 bb 06 	call	0xd76	; 0xd76 <Set_Password>

	while(1)
	{

		/*Receive from first MC which key is pressed*/
		UART_RECEIVED = UART_recieveByte();
     c5c:	0e 94 0d 10 	call	0x201a	; 0x201a <UART_recieveByte>
     c60:	80 93 7a 00 	sts	0x007A, r24

		/*if received option from HMI_ECU open door then compare passwords*/
		if(UART_RECEIVED == OPEN_DOOR)
     c64:	80 91 7a 00 	lds	r24, 0x007A
     c68:	8b 32       	cpi	r24, 0x2B	; 43
     c6a:	c1 f5       	brne	.+112    	; 0xcdc <main+0x196>
		{
			/*send verification first*/
			UART_sendByte(MC2_READY);
     c6c:	83 e1       	ldi	r24, 0x13	; 19
     c6e:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <UART_sendByte>

			/*Receive passwords*/
			Recieve_Passowrd(recived_pass,PASSWORD_SIZE);
     c72:	87 e8       	ldi	r24, 0x87	; 135
     c74:	90 e0       	ldi	r25, 0x00	; 0
     c76:	65 e0       	ldi	r22, 0x05	; 5
     c78:	0e 94 70 07 	call	0xee0	; 0xee0 <Recieve_Passowrd>

			/*Compare with Saved one already passwords*/
			state = compare_password(recived_pass,saved_pass_eeprom,PASSWORD_SIZE);
     c7c:	87 e8       	ldi	r24, 0x87	; 135
     c7e:	90 e0       	ldi	r25, 0x00	; 0
     c80:	21 e8       	ldi	r18, 0x81	; 129
     c82:	30 e0       	ldi	r19, 0x00	; 0
     c84:	b9 01       	movw	r22, r18
     c86:	45 e0       	ldi	r20, 0x05	; 5
     c88:	0e 94 12 08 	call	0x1024	; 0x1024 <compare_password>
     c8c:	80 93 86 00 	sts	0x0086, r24
			if(state == PASSWORDS_MATCH)
     c90:	80 91 86 00 	lds	r24, 0x0086
     c94:	81 30       	cpi	r24, 0x01	; 1
     c96:	51 f4       	brne	.+20     	; 0xcac <main+0x166>
			{
				/*return trials to zero again*/
				pass_trials = 0;
     c98:	10 92 7e 00 	sts	0x007E, r1
				/*process the motor rotation function*/
				UART_sendByte(PASSWORDS_MATCH);
     c9c:	81 e0       	ldi	r24, 0x01	; 1
     c9e:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <UART_sendByte>
				/*to make sure motor is operating in right direction "for proteus"*/
				while(Motor_function() != 0){}
     ca2:	0e 94 00 09 	call	0x1200	; 0x1200 <Motor_function>
     ca6:	88 23       	and	r24, r24
     ca8:	e1 f7       	brne	.-8      	; 0xca2 <main+0x15c>
     caa:	18 c0       	rjmp	.+48     	; 0xcdc <main+0x196>

			}
			/*for passwords unmatched try again you have 3 trials*/
			else if(state == PASSWORDS_UNMATCH)
     cac:	80 91 86 00 	lds	r24, 0x0086
     cb0:	88 23       	and	r24, r24
     cb2:	a1 f4       	brne	.+40     	; 0xcdc <main+0x196>
			{
				/*you have only 3 trials*/
				pass_trials++;
     cb4:	80 91 7e 00 	lds	r24, 0x007E
     cb8:	8f 5f       	subi	r24, 0xFF	; 255
     cba:	80 93 7e 00 	sts	0x007E, r24
				if(pass_trials == PASS_TRIAL)
     cbe:	80 91 7e 00 	lds	r24, 0x007E
     cc2:	83 30       	cpi	r24, 0x03	; 3
     cc4:	41 f4       	brne	.+16     	; 0xcd6 <main+0x190>
				{
					UART_sendByte(WARNING);
     cc6:	8c e3       	ldi	r24, 0x3C	; 60
     cc8:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <UART_sendByte>
					/*process the Buzzer rotation function*/
					Buzzer_function();
     ccc:	0e 94 39 09 	call	0x1272	; 0x1272 <Buzzer_function>
					/*reset  your pass_trails to zero*/
					pass_trials = 0;
     cd0:	10 92 7e 00 	sts	0x007E, r1
     cd4:	03 c0       	rjmp	.+6      	; 0xcdc <main+0x196>
				}
				else
				{
					UART_sendByte(PASSWORDS_UNMATCH);
     cd6:	80 e0       	ldi	r24, 0x00	; 0
     cd8:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <UART_sendByte>
				}
			}

		}
		if(UART_RECEIVED == CHANGE_PASS)
     cdc:	80 91 7a 00 	lds	r24, 0x007A
     ce0:	8d 32       	cpi	r24, 0x2D	; 45
     ce2:	09 f0       	breq	.+2      	; 0xce6 <main+0x1a0>
     ce4:	bb cf       	rjmp	.-138    	; 0xc5c <main+0x116>
		{
			/*send verification first*/
			UART_sendByte(MC2_READY);
     ce6:	83 e1       	ldi	r24, 0x13	; 19
     ce8:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <UART_sendByte>

			/*Receive passwords*/
			Recieve_Passowrd(recived_pass,PASSWORD_SIZE);
     cec:	87 e8       	ldi	r24, 0x87	; 135
     cee:	90 e0       	ldi	r25, 0x00	; 0
     cf0:	65 e0       	ldi	r22, 0x05	; 5
     cf2:	0e 94 70 07 	call	0xee0	; 0xee0 <Recieve_Passowrd>

			/*Compare with Saved one already passwords*/
			state = compare_password(recived_pass,saved_pass_eeprom,PASSWORD_SIZE);
     cf6:	87 e8       	ldi	r24, 0x87	; 135
     cf8:	90 e0       	ldi	r25, 0x00	; 0
     cfa:	21 e8       	ldi	r18, 0x81	; 129
     cfc:	30 e0       	ldi	r19, 0x00	; 0
     cfe:	b9 01       	movw	r22, r18
     d00:	45 e0       	ldi	r20, 0x05	; 5
     d02:	0e 94 12 08 	call	0x1024	; 0x1024 <compare_password>
     d06:	80 93 86 00 	sts	0x0086, r24
			if(state == PASSWORDS_MATCH)
     d0a:	80 91 86 00 	lds	r24, 0x0086
     d0e:	81 30       	cpi	r24, 0x01	; 1
     d10:	41 f4       	brne	.+16     	; 0xd22 <main+0x1dc>
			{
				/*return trials to zero again*/
				pass_trials = 0;
     d12:	10 92 7e 00 	sts	0x007E, r1
				/*process the motor rotation function*/
				UART_sendByte(PASSWORDS_MATCH);
     d16:	81 e0       	ldi	r24, 0x01	; 1
     d18:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <UART_sendByte>
				Set_Password();
     d1c:	0e 94 bb 06 	call	0xd76	; 0xd76 <Set_Password>
     d20:	9d cf       	rjmp	.-198    	; 0xc5c <main+0x116>

			}
			/*for passwords unmatched try again you have 3 trials*/
			else if(state == PASSWORDS_UNMATCH)
     d22:	80 91 86 00 	lds	r24, 0x0086
     d26:	88 23       	and	r24, r24
     d28:	09 f0       	breq	.+2      	; 0xd2c <main+0x1e6>
     d2a:	98 cf       	rjmp	.-208    	; 0xc5c <main+0x116>
			{
				/*you have only 3 trials*/
				pass_trials++;
     d2c:	80 91 7e 00 	lds	r24, 0x007E
     d30:	8f 5f       	subi	r24, 0xFF	; 255
     d32:	80 93 7e 00 	sts	0x007E, r24
				if(pass_trials == PASS_TRIAL)
     d36:	80 91 7e 00 	lds	r24, 0x007E
     d3a:	83 30       	cpi	r24, 0x03	; 3
     d3c:	41 f4       	brne	.+16     	; 0xd4e <main+0x208>
				{
					UART_sendByte(WARNING);
     d3e:	8c e3       	ldi	r24, 0x3C	; 60
     d40:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <UART_sendByte>
					/*reset  your pass_trails to zero*/
					Buzzer_function();
     d44:	0e 94 39 09 	call	0x1272	; 0x1272 <Buzzer_function>
					pass_trials = 0;
     d48:	10 92 7e 00 	sts	0x007E, r1
     d4c:	87 cf       	rjmp	.-242    	; 0xc5c <main+0x116>
				}
				else
				{
					UART_sendByte(PASSWORDS_UNMATCH);
     d4e:	80 e0       	ldi	r24, 0x00	; 0
     d50:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <UART_sendByte>
     d54:	83 cf       	rjmp	.-250    	; 0xc5c <main+0x116>

00000d56 <Timer1_callback>:
	}
}
/*******************************************************************************
 *                      	Functions Definitions                               *
 *******************************************************************************/
void Timer1_callback(void){
     d56:	df 93       	push	r29
     d58:	cf 93       	push	r28
     d5a:	cd b7       	in	r28, 0x3d	; 61
     d5c:	de b7       	in	r29, 0x3e	; 62
	g_ticks++;
     d5e:	80 91 7b 00 	lds	r24, 0x007B
     d62:	90 91 7c 00 	lds	r25, 0x007C
     d66:	01 96       	adiw	r24, 0x01	; 1
     d68:	90 93 7c 00 	sts	0x007C, r25
     d6c:	80 93 7b 00 	sts	0x007B, r24
}
     d70:	cf 91       	pop	r28
     d72:	df 91       	pop	r29
     d74:	08 95       	ret

00000d76 <Set_Password>:
/*******************************************************************************/
void Set_Password(void){
     d76:	df 93       	push	r29
     d78:	cf 93       	push	r28
     d7a:	cd b7       	in	r28, 0x3d	; 61
     d7c:	de b7       	in	r29, 0x3e	; 62
     d7e:	69 97       	sbiw	r28, 0x19	; 25
     d80:	0f b6       	in	r0, 0x3f	; 63
     d82:	f8 94       	cli
     d84:	de bf       	out	0x3e, r29	; 62
     d86:	0f be       	out	0x3f, r0	; 63
     d88:	cd bf       	out	0x3d, r28	; 61
	uint8 arr_pass_first[PASSWORD_SIZE] , arr_pass_second[PASSWORD_SIZE];
	/*Initial value two pass doesn't match*/
	uint8 pass_state = PASSWORDS_UNMATCH;
     d8a:	1f 86       	std	Y+15, r1	; 0x0f
     d8c:	9c c0       	rjmp	.+312    	; 0xec6 <Set_Password+0x150>

	while(pass_state == PASSWORDS_UNMATCH)
	{
		while(UART_recieveByte() != MC1_READY);
     d8e:	0e 94 0d 10 	call	0x201a	; 0x201a <UART_recieveByte>
     d92:	80 31       	cpi	r24, 0x10	; 16
     d94:	e1 f7       	brne	.-8      	; 0xd8e <Set_Password+0x18>

		/*receive first password*/
		Recieve_Passowrd(arr_pass_first,PASSWORD_SIZE);
     d96:	ce 01       	movw	r24, r28
     d98:	40 96       	adiw	r24, 0x10	; 16
     d9a:	65 e0       	ldi	r22, 0x05	; 5
     d9c:	0e 94 70 07 	call	0xee0	; 0xee0 <Recieve_Passowrd>

		/*send verification you have received first password*/
		UART_sendByte(FIRST_PASSWORD_RECIVED);
     da0:	8f e3       	ldi	r24, 0x3F	; 63
     da2:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <UART_sendByte>
     da6:	80 e0       	ldi	r24, 0x00	; 0
     da8:	90 e0       	ldi	r25, 0x00	; 0
     daa:	a8 e4       	ldi	r26, 0x48	; 72
     dac:	b2 e4       	ldi	r27, 0x42	; 66
     dae:	8b 87       	std	Y+11, r24	; 0x0b
     db0:	9c 87       	std	Y+12, r25	; 0x0c
     db2:	ad 87       	std	Y+13, r26	; 0x0d
     db4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     db6:	6b 85       	ldd	r22, Y+11	; 0x0b
     db8:	7c 85       	ldd	r23, Y+12	; 0x0c
     dba:	8d 85       	ldd	r24, Y+13	; 0x0d
     dbc:	9e 85       	ldd	r25, Y+14	; 0x0e
     dbe:	20 e0       	ldi	r18, 0x00	; 0
     dc0:	30 e0       	ldi	r19, 0x00	; 0
     dc2:	4a ef       	ldi	r20, 0xFA	; 250
     dc4:	54 e4       	ldi	r21, 0x44	; 68
     dc6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dca:	dc 01       	movw	r26, r24
     dcc:	cb 01       	movw	r24, r22
     dce:	8f 83       	std	Y+7, r24	; 0x07
     dd0:	98 87       	std	Y+8, r25	; 0x08
     dd2:	a9 87       	std	Y+9, r26	; 0x09
     dd4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     dd6:	6f 81       	ldd	r22, Y+7	; 0x07
     dd8:	78 85       	ldd	r23, Y+8	; 0x08
     dda:	89 85       	ldd	r24, Y+9	; 0x09
     ddc:	9a 85       	ldd	r25, Y+10	; 0x0a
     dde:	20 e0       	ldi	r18, 0x00	; 0
     de0:	30 e0       	ldi	r19, 0x00	; 0
     de2:	40 e8       	ldi	r20, 0x80	; 128
     de4:	5f e3       	ldi	r21, 0x3F	; 63
     de6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     dea:	88 23       	and	r24, r24
     dec:	2c f4       	brge	.+10     	; 0xdf8 <Set_Password+0x82>
		__ticks = 1;
     dee:	81 e0       	ldi	r24, 0x01	; 1
     df0:	90 e0       	ldi	r25, 0x00	; 0
     df2:	9e 83       	std	Y+6, r25	; 0x06
     df4:	8d 83       	std	Y+5, r24	; 0x05
     df6:	3f c0       	rjmp	.+126    	; 0xe76 <Set_Password+0x100>
	else if (__tmp > 65535)
     df8:	6f 81       	ldd	r22, Y+7	; 0x07
     dfa:	78 85       	ldd	r23, Y+8	; 0x08
     dfc:	89 85       	ldd	r24, Y+9	; 0x09
     dfe:	9a 85       	ldd	r25, Y+10	; 0x0a
     e00:	20 e0       	ldi	r18, 0x00	; 0
     e02:	3f ef       	ldi	r19, 0xFF	; 255
     e04:	4f e7       	ldi	r20, 0x7F	; 127
     e06:	57 e4       	ldi	r21, 0x47	; 71
     e08:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e0c:	18 16       	cp	r1, r24
     e0e:	4c f5       	brge	.+82     	; 0xe62 <Set_Password+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e10:	6b 85       	ldd	r22, Y+11	; 0x0b
     e12:	7c 85       	ldd	r23, Y+12	; 0x0c
     e14:	8d 85       	ldd	r24, Y+13	; 0x0d
     e16:	9e 85       	ldd	r25, Y+14	; 0x0e
     e18:	20 e0       	ldi	r18, 0x00	; 0
     e1a:	30 e0       	ldi	r19, 0x00	; 0
     e1c:	40 e2       	ldi	r20, 0x20	; 32
     e1e:	51 e4       	ldi	r21, 0x41	; 65
     e20:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e24:	dc 01       	movw	r26, r24
     e26:	cb 01       	movw	r24, r22
     e28:	bc 01       	movw	r22, r24
     e2a:	cd 01       	movw	r24, r26
     e2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e30:	dc 01       	movw	r26, r24
     e32:	cb 01       	movw	r24, r22
     e34:	9e 83       	std	Y+6, r25	; 0x06
     e36:	8d 83       	std	Y+5, r24	; 0x05
     e38:	0f c0       	rjmp	.+30     	; 0xe58 <Set_Password+0xe2>
     e3a:	88 ec       	ldi	r24, 0xC8	; 200
     e3c:	90 e0       	ldi	r25, 0x00	; 0
     e3e:	9c 83       	std	Y+4, r25	; 0x04
     e40:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     e42:	8b 81       	ldd	r24, Y+3	; 0x03
     e44:	9c 81       	ldd	r25, Y+4	; 0x04
     e46:	01 97       	sbiw	r24, 0x01	; 1
     e48:	f1 f7       	brne	.-4      	; 0xe46 <Set_Password+0xd0>
     e4a:	9c 83       	std	Y+4, r25	; 0x04
     e4c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e4e:	8d 81       	ldd	r24, Y+5	; 0x05
     e50:	9e 81       	ldd	r25, Y+6	; 0x06
     e52:	01 97       	sbiw	r24, 0x01	; 1
     e54:	9e 83       	std	Y+6, r25	; 0x06
     e56:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e58:	8d 81       	ldd	r24, Y+5	; 0x05
     e5a:	9e 81       	ldd	r25, Y+6	; 0x06
     e5c:	00 97       	sbiw	r24, 0x00	; 0
     e5e:	69 f7       	brne	.-38     	; 0xe3a <Set_Password+0xc4>
     e60:	14 c0       	rjmp	.+40     	; 0xe8a <Set_Password+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e62:	6f 81       	ldd	r22, Y+7	; 0x07
     e64:	78 85       	ldd	r23, Y+8	; 0x08
     e66:	89 85       	ldd	r24, Y+9	; 0x09
     e68:	9a 85       	ldd	r25, Y+10	; 0x0a
     e6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e6e:	dc 01       	movw	r26, r24
     e70:	cb 01       	movw	r24, r22
     e72:	9e 83       	std	Y+6, r25	; 0x06
     e74:	8d 83       	std	Y+5, r24	; 0x05
     e76:	8d 81       	ldd	r24, Y+5	; 0x05
     e78:	9e 81       	ldd	r25, Y+6	; 0x06
     e7a:	9a 83       	std	Y+2, r25	; 0x02
     e7c:	89 83       	std	Y+1, r24	; 0x01
     e7e:	89 81       	ldd	r24, Y+1	; 0x01
     e80:	9a 81       	ldd	r25, Y+2	; 0x02
     e82:	01 97       	sbiw	r24, 0x01	; 1
     e84:	f1 f7       	brne	.-4      	; 0xe82 <Set_Password+0x10c>
     e86:	9a 83       	std	Y+2, r25	; 0x02
     e88:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(50);

		/*receive second password*/
		Recieve_Passowrd(arr_pass_second,PASSWORD_SIZE);
     e8a:	ce 01       	movw	r24, r28
     e8c:	45 96       	adiw	r24, 0x15	; 21
     e8e:	65 e0       	ldi	r22, 0x05	; 5
     e90:	0e 94 70 07 	call	0xee0	; 0xee0 <Recieve_Passowrd>

		/*send verification you have received second password*/
		UART_sendByte(SECOND_PASSWORD_RECIVED);
     e94:	8f e4       	ldi	r24, 0x4F	; 79
     e96:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <UART_sendByte>

		/*always update your pass state and send it to first MC to display messages on LCD*/
		pass_state = compare_password(arr_pass_first,arr_pass_second,PASSWORD_SIZE);
     e9a:	ce 01       	movw	r24, r28
     e9c:	40 96       	adiw	r24, 0x10	; 16
     e9e:	9e 01       	movw	r18, r28
     ea0:	2b 5e       	subi	r18, 0xEB	; 235
     ea2:	3f 4f       	sbci	r19, 0xFF	; 255
     ea4:	b9 01       	movw	r22, r18
     ea6:	45 e0       	ldi	r20, 0x05	; 5
     ea8:	0e 94 12 08 	call	0x1024	; 0x1024 <compare_password>
     eac:	8f 87       	std	Y+15, r24	; 0x0f
		UART_sendByte(pass_state);
     eae:	8f 85       	ldd	r24, Y+15	; 0x0f
     eb0:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <UART_sendByte>
		/*if two pass matched save in EEPROM*/
		if(pass_state == PASSWORDS_MATCH)
     eb4:	8f 85       	ldd	r24, Y+15	; 0x0f
     eb6:	81 30       	cpi	r24, 0x01	; 1
     eb8:	31 f4       	brne	.+12     	; 0xec6 <Set_Password+0x150>
		{
			EEPROM_savepass(arr_pass_first,PASSWORD_SIZE);
     eba:	ce 01       	movw	r24, r28
     ebc:	40 96       	adiw	r24, 0x10	; 16
     ebe:	65 e0       	ldi	r22, 0x05	; 5
     ec0:	0e 94 4c 08 	call	0x1098	; 0x1098 <EEPROM_savepass>
     ec4:	04 c0       	rjmp	.+8      	; 0xece <Set_Password+0x158>
void Set_Password(void){
	uint8 arr_pass_first[PASSWORD_SIZE] , arr_pass_second[PASSWORD_SIZE];
	/*Initial value two pass doesn't match*/
	uint8 pass_state = PASSWORDS_UNMATCH;

	while(pass_state == PASSWORDS_UNMATCH)
     ec6:	8f 85       	ldd	r24, Y+15	; 0x0f
     ec8:	88 23       	and	r24, r24
     eca:	09 f4       	brne	.+2      	; 0xece <Set_Password+0x158>
     ecc:	60 cf       	rjmp	.-320    	; 0xd8e <Set_Password+0x18>
			EEPROM_savepass(arr_pass_first,PASSWORD_SIZE);
			/*Terminate function and end while loop*/
			return;
		}
	}
}
     ece:	69 96       	adiw	r28, 0x19	; 25
     ed0:	0f b6       	in	r0, 0x3f	; 63
     ed2:	f8 94       	cli
     ed4:	de bf       	out	0x3e, r29	; 62
     ed6:	0f be       	out	0x3f, r0	; 63
     ed8:	cd bf       	out	0x3d, r28	; 61
     eda:	cf 91       	pop	r28
     edc:	df 91       	pop	r29
     ede:	08 95       	ret

00000ee0 <Recieve_Passowrd>:
/*******************************************************************************/
void Recieve_Passowrd(uint8 *pass,uint8 size){
     ee0:	0f 93       	push	r16
     ee2:	1f 93       	push	r17
     ee4:	df 93       	push	r29
     ee6:	cf 93       	push	r28
     ee8:	cd b7       	in	r28, 0x3d	; 61
     eea:	de b7       	in	r29, 0x3e	; 62
     eec:	62 97       	sbiw	r28, 0x12	; 18
     eee:	0f b6       	in	r0, 0x3f	; 63
     ef0:	f8 94       	cli
     ef2:	de bf       	out	0x3e, r29	; 62
     ef4:	0f be       	out	0x3f, r0	; 63
     ef6:	cd bf       	out	0x3d, r28	; 61
     ef8:	99 8b       	std	Y+17, r25	; 0x11
     efa:	88 8b       	std	Y+16, r24	; 0x10
     efc:	6a 8b       	std	Y+18, r22	; 0x12
	for (uint8 i=0;i<size;i++)
     efe:	1f 86       	std	Y+15, r1	; 0x0f
     f00:	81 c0       	rjmp	.+258    	; 0x1004 <Recieve_Passowrd+0x124>
	{
		pass[i]=UART_recieveByte();
     f02:	8f 85       	ldd	r24, Y+15	; 0x0f
     f04:	28 2f       	mov	r18, r24
     f06:	30 e0       	ldi	r19, 0x00	; 0
     f08:	88 89       	ldd	r24, Y+16	; 0x10
     f0a:	99 89       	ldd	r25, Y+17	; 0x11
     f0c:	8c 01       	movw	r16, r24
     f0e:	02 0f       	add	r16, r18
     f10:	13 1f       	adc	r17, r19
     f12:	0e 94 0d 10 	call	0x201a	; 0x201a <UART_recieveByte>
     f16:	f8 01       	movw	r30, r16
     f18:	80 83       	st	Z, r24
     f1a:	80 e0       	ldi	r24, 0x00	; 0
     f1c:	90 e0       	ldi	r25, 0x00	; 0
     f1e:	a8 e4       	ldi	r26, 0x48	; 72
     f20:	b2 e4       	ldi	r27, 0x42	; 66
     f22:	8b 87       	std	Y+11, r24	; 0x0b
     f24:	9c 87       	std	Y+12, r25	; 0x0c
     f26:	ad 87       	std	Y+13, r26	; 0x0d
     f28:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f2a:	6b 85       	ldd	r22, Y+11	; 0x0b
     f2c:	7c 85       	ldd	r23, Y+12	; 0x0c
     f2e:	8d 85       	ldd	r24, Y+13	; 0x0d
     f30:	9e 85       	ldd	r25, Y+14	; 0x0e
     f32:	20 e0       	ldi	r18, 0x00	; 0
     f34:	30 e0       	ldi	r19, 0x00	; 0
     f36:	4a ef       	ldi	r20, 0xFA	; 250
     f38:	54 e4       	ldi	r21, 0x44	; 68
     f3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f3e:	dc 01       	movw	r26, r24
     f40:	cb 01       	movw	r24, r22
     f42:	8f 83       	std	Y+7, r24	; 0x07
     f44:	98 87       	std	Y+8, r25	; 0x08
     f46:	a9 87       	std	Y+9, r26	; 0x09
     f48:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     f4a:	6f 81       	ldd	r22, Y+7	; 0x07
     f4c:	78 85       	ldd	r23, Y+8	; 0x08
     f4e:	89 85       	ldd	r24, Y+9	; 0x09
     f50:	9a 85       	ldd	r25, Y+10	; 0x0a
     f52:	20 e0       	ldi	r18, 0x00	; 0
     f54:	30 e0       	ldi	r19, 0x00	; 0
     f56:	40 e8       	ldi	r20, 0x80	; 128
     f58:	5f e3       	ldi	r21, 0x3F	; 63
     f5a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f5e:	88 23       	and	r24, r24
     f60:	2c f4       	brge	.+10     	; 0xf6c <Recieve_Passowrd+0x8c>
		__ticks = 1;
     f62:	81 e0       	ldi	r24, 0x01	; 1
     f64:	90 e0       	ldi	r25, 0x00	; 0
     f66:	9e 83       	std	Y+6, r25	; 0x06
     f68:	8d 83       	std	Y+5, r24	; 0x05
     f6a:	3f c0       	rjmp	.+126    	; 0xfea <Recieve_Passowrd+0x10a>
	else if (__tmp > 65535)
     f6c:	6f 81       	ldd	r22, Y+7	; 0x07
     f6e:	78 85       	ldd	r23, Y+8	; 0x08
     f70:	89 85       	ldd	r24, Y+9	; 0x09
     f72:	9a 85       	ldd	r25, Y+10	; 0x0a
     f74:	20 e0       	ldi	r18, 0x00	; 0
     f76:	3f ef       	ldi	r19, 0xFF	; 255
     f78:	4f e7       	ldi	r20, 0x7F	; 127
     f7a:	57 e4       	ldi	r21, 0x47	; 71
     f7c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f80:	18 16       	cp	r1, r24
     f82:	4c f5       	brge	.+82     	; 0xfd6 <Recieve_Passowrd+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f84:	6b 85       	ldd	r22, Y+11	; 0x0b
     f86:	7c 85       	ldd	r23, Y+12	; 0x0c
     f88:	8d 85       	ldd	r24, Y+13	; 0x0d
     f8a:	9e 85       	ldd	r25, Y+14	; 0x0e
     f8c:	20 e0       	ldi	r18, 0x00	; 0
     f8e:	30 e0       	ldi	r19, 0x00	; 0
     f90:	40 e2       	ldi	r20, 0x20	; 32
     f92:	51 e4       	ldi	r21, 0x41	; 65
     f94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f98:	dc 01       	movw	r26, r24
     f9a:	cb 01       	movw	r24, r22
     f9c:	bc 01       	movw	r22, r24
     f9e:	cd 01       	movw	r24, r26
     fa0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fa4:	dc 01       	movw	r26, r24
     fa6:	cb 01       	movw	r24, r22
     fa8:	9e 83       	std	Y+6, r25	; 0x06
     faa:	8d 83       	std	Y+5, r24	; 0x05
     fac:	0f c0       	rjmp	.+30     	; 0xfcc <Recieve_Passowrd+0xec>
     fae:	88 ec       	ldi	r24, 0xC8	; 200
     fb0:	90 e0       	ldi	r25, 0x00	; 0
     fb2:	9c 83       	std	Y+4, r25	; 0x04
     fb4:	8b 83       	std	Y+3, r24	; 0x03
     fb6:	8b 81       	ldd	r24, Y+3	; 0x03
     fb8:	9c 81       	ldd	r25, Y+4	; 0x04
     fba:	01 97       	sbiw	r24, 0x01	; 1
     fbc:	f1 f7       	brne	.-4      	; 0xfba <Recieve_Passowrd+0xda>
     fbe:	9c 83       	std	Y+4, r25	; 0x04
     fc0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fc2:	8d 81       	ldd	r24, Y+5	; 0x05
     fc4:	9e 81       	ldd	r25, Y+6	; 0x06
     fc6:	01 97       	sbiw	r24, 0x01	; 1
     fc8:	9e 83       	std	Y+6, r25	; 0x06
     fca:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fcc:	8d 81       	ldd	r24, Y+5	; 0x05
     fce:	9e 81       	ldd	r25, Y+6	; 0x06
     fd0:	00 97       	sbiw	r24, 0x00	; 0
     fd2:	69 f7       	brne	.-38     	; 0xfae <Recieve_Passowrd+0xce>
     fd4:	14 c0       	rjmp	.+40     	; 0xffe <Recieve_Passowrd+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fd6:	6f 81       	ldd	r22, Y+7	; 0x07
     fd8:	78 85       	ldd	r23, Y+8	; 0x08
     fda:	89 85       	ldd	r24, Y+9	; 0x09
     fdc:	9a 85       	ldd	r25, Y+10	; 0x0a
     fde:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fe2:	dc 01       	movw	r26, r24
     fe4:	cb 01       	movw	r24, r22
     fe6:	9e 83       	std	Y+6, r25	; 0x06
     fe8:	8d 83       	std	Y+5, r24	; 0x05
     fea:	8d 81       	ldd	r24, Y+5	; 0x05
     fec:	9e 81       	ldd	r25, Y+6	; 0x06
     fee:	9a 83       	std	Y+2, r25	; 0x02
     ff0:	89 83       	std	Y+1, r24	; 0x01
     ff2:	89 81       	ldd	r24, Y+1	; 0x01
     ff4:	9a 81       	ldd	r25, Y+2	; 0x02
     ff6:	01 97       	sbiw	r24, 0x01	; 1
     ff8:	f1 f7       	brne	.-4      	; 0xff6 <Recieve_Passowrd+0x116>
     ffa:	9a 83       	std	Y+2, r25	; 0x02
     ffc:	89 83       	std	Y+1, r24	; 0x01
		}
	}
}
/*******************************************************************************/
void Recieve_Passowrd(uint8 *pass,uint8 size){
	for (uint8 i=0;i<size;i++)
     ffe:	8f 85       	ldd	r24, Y+15	; 0x0f
    1000:	8f 5f       	subi	r24, 0xFF	; 255
    1002:	8f 87       	std	Y+15, r24	; 0x0f
    1004:	9f 85       	ldd	r25, Y+15	; 0x0f
    1006:	8a 89       	ldd	r24, Y+18	; 0x12
    1008:	98 17       	cp	r25, r24
    100a:	08 f4       	brcc	.+2      	; 0x100e <Recieve_Passowrd+0x12e>
    100c:	7a cf       	rjmp	.-268    	; 0xf02 <Recieve_Passowrd+0x22>
	{
		pass[i]=UART_recieveByte();
		_delay_ms(50);
	}
}
    100e:	62 96       	adiw	r28, 0x12	; 18
    1010:	0f b6       	in	r0, 0x3f	; 63
    1012:	f8 94       	cli
    1014:	de bf       	out	0x3e, r29	; 62
    1016:	0f be       	out	0x3f, r0	; 63
    1018:	cd bf       	out	0x3d, r28	; 61
    101a:	cf 91       	pop	r28
    101c:	df 91       	pop	r29
    101e:	1f 91       	pop	r17
    1020:	0f 91       	pop	r16
    1022:	08 95       	ret

00001024 <compare_password>:
/*******************************************************************************/
uint8 compare_password(uint8 *pass_1 , uint8 *pass_2, uint8 size){
    1024:	df 93       	push	r29
    1026:	cf 93       	push	r28
    1028:	cd b7       	in	r28, 0x3d	; 61
    102a:	de b7       	in	r29, 0x3e	; 62
    102c:	27 97       	sbiw	r28, 0x07	; 7
    102e:	0f b6       	in	r0, 0x3f	; 63
    1030:	f8 94       	cli
    1032:	de bf       	out	0x3e, r29	; 62
    1034:	0f be       	out	0x3f, r0	; 63
    1036:	cd bf       	out	0x3d, r28	; 61
    1038:	9b 83       	std	Y+3, r25	; 0x03
    103a:	8a 83       	std	Y+2, r24	; 0x02
    103c:	7d 83       	std	Y+5, r23	; 0x05
    103e:	6c 83       	std	Y+4, r22	; 0x04
    1040:	4e 83       	std	Y+6, r20	; 0x06
	/*compare two password and return matched or not*/
	uint8 i;
	for(i =0 ;i<size ; i++){
    1042:	19 82       	std	Y+1, r1	; 0x01
    1044:	19 c0       	rjmp	.+50     	; 0x1078 <compare_password+0x54>
		if(pass_1[i] != pass_2[i]){
    1046:	89 81       	ldd	r24, Y+1	; 0x01
    1048:	28 2f       	mov	r18, r24
    104a:	30 e0       	ldi	r19, 0x00	; 0
    104c:	8a 81       	ldd	r24, Y+2	; 0x02
    104e:	9b 81       	ldd	r25, Y+3	; 0x03
    1050:	fc 01       	movw	r30, r24
    1052:	e2 0f       	add	r30, r18
    1054:	f3 1f       	adc	r31, r19
    1056:	40 81       	ld	r20, Z
    1058:	89 81       	ldd	r24, Y+1	; 0x01
    105a:	28 2f       	mov	r18, r24
    105c:	30 e0       	ldi	r19, 0x00	; 0
    105e:	8c 81       	ldd	r24, Y+4	; 0x04
    1060:	9d 81       	ldd	r25, Y+5	; 0x05
    1062:	fc 01       	movw	r30, r24
    1064:	e2 0f       	add	r30, r18
    1066:	f3 1f       	adc	r31, r19
    1068:	80 81       	ld	r24, Z
    106a:	48 17       	cp	r20, r24
    106c:	11 f0       	breq	.+4      	; 0x1072 <compare_password+0x4e>
			return PASSWORDS_UNMATCH;
    106e:	1f 82       	std	Y+7, r1	; 0x07
    1070:	09 c0       	rjmp	.+18     	; 0x1084 <compare_password+0x60>
}
/*******************************************************************************/
uint8 compare_password(uint8 *pass_1 , uint8 *pass_2, uint8 size){
	/*compare two password and return matched or not*/
	uint8 i;
	for(i =0 ;i<size ; i++){
    1072:	89 81       	ldd	r24, Y+1	; 0x01
    1074:	8f 5f       	subi	r24, 0xFF	; 255
    1076:	89 83       	std	Y+1, r24	; 0x01
    1078:	99 81       	ldd	r25, Y+1	; 0x01
    107a:	8e 81       	ldd	r24, Y+6	; 0x06
    107c:	98 17       	cp	r25, r24
    107e:	18 f3       	brcs	.-58     	; 0x1046 <compare_password+0x22>
		if(pass_1[i] != pass_2[i]){
			return PASSWORDS_UNMATCH;
		}
	}
	return PASSWORDS_MATCH;
    1080:	81 e0       	ldi	r24, 0x01	; 1
    1082:	8f 83       	std	Y+7, r24	; 0x07
    1084:	8f 81       	ldd	r24, Y+7	; 0x07
}
    1086:	27 96       	adiw	r28, 0x07	; 7
    1088:	0f b6       	in	r0, 0x3f	; 63
    108a:	f8 94       	cli
    108c:	de bf       	out	0x3e, r29	; 62
    108e:	0f be       	out	0x3f, r0	; 63
    1090:	cd bf       	out	0x3d, r28	; 61
    1092:	cf 91       	pop	r28
    1094:	df 91       	pop	r29
    1096:	08 95       	ret

00001098 <EEPROM_savepass>:
/*******************************************************************************/
void EEPROM_savepass(uint8 *pass , uint8 size){
    1098:	df 93       	push	r29
    109a:	cf 93       	push	r28
    109c:	cd b7       	in	r28, 0x3d	; 61
    109e:	de b7       	in	r29, 0x3e	; 62
    10a0:	62 97       	sbiw	r28, 0x12	; 18
    10a2:	0f b6       	in	r0, 0x3f	; 63
    10a4:	f8 94       	cli
    10a6:	de bf       	out	0x3e, r29	; 62
    10a8:	0f be       	out	0x3f, r0	; 63
    10aa:	cd bf       	out	0x3d, r28	; 61
    10ac:	99 8b       	std	Y+17, r25	; 0x11
    10ae:	88 8b       	std	Y+16, r24	; 0x10
    10b0:	6a 8b       	std	Y+18, r22	; 0x12
	uint8 i;
	for(i=0 ;i<size; i++){
    10b2:	1f 86       	std	Y+15, r1	; 0x0f
    10b4:	97 c0       	rjmp	.+302    	; 0x11e4 <EEPROM_savepass+0x14c>
		EEPROM_writeByte(PASS_EEPROM_ADDRESS+i,pass[i]);
    10b6:	8f 85       	ldd	r24, Y+15	; 0x0f
    10b8:	88 2f       	mov	r24, r24
    10ba:	90 e0       	ldi	r25, 0x00	; 0
    10bc:	80 96       	adiw	r24, 0x20	; 32
    10be:	ac 01       	movw	r20, r24
    10c0:	8f 85       	ldd	r24, Y+15	; 0x0f
    10c2:	28 2f       	mov	r18, r24
    10c4:	30 e0       	ldi	r19, 0x00	; 0
    10c6:	88 89       	ldd	r24, Y+16	; 0x10
    10c8:	99 89       	ldd	r25, Y+17	; 0x11
    10ca:	fc 01       	movw	r30, r24
    10cc:	e2 0f       	add	r30, r18
    10ce:	f3 1f       	adc	r31, r19
    10d0:	20 81       	ld	r18, Z
    10d2:	ca 01       	movw	r24, r20
    10d4:	62 2f       	mov	r22, r18
    10d6:	0e 94 cb 09 	call	0x1396	; 0x1396 <EEPROM_writeByte>
		saved_pass_eeprom[i] = pass[i];
    10da:	8f 85       	ldd	r24, Y+15	; 0x0f
    10dc:	48 2f       	mov	r20, r24
    10de:	50 e0       	ldi	r21, 0x00	; 0
    10e0:	8f 85       	ldd	r24, Y+15	; 0x0f
    10e2:	28 2f       	mov	r18, r24
    10e4:	30 e0       	ldi	r19, 0x00	; 0
    10e6:	88 89       	ldd	r24, Y+16	; 0x10
    10e8:	99 89       	ldd	r25, Y+17	; 0x11
    10ea:	fc 01       	movw	r30, r24
    10ec:	e2 0f       	add	r30, r18
    10ee:	f3 1f       	adc	r31, r19
    10f0:	80 81       	ld	r24, Z
    10f2:	fa 01       	movw	r30, r20
    10f4:	ef 57       	subi	r30, 0x7F	; 127
    10f6:	ff 4f       	sbci	r31, 0xFF	; 255
    10f8:	80 83       	st	Z, r24
    10fa:	80 e0       	ldi	r24, 0x00	; 0
    10fc:	90 e0       	ldi	r25, 0x00	; 0
    10fe:	a0 e2       	ldi	r26, 0x20	; 32
    1100:	b1 e4       	ldi	r27, 0x41	; 65
    1102:	8b 87       	std	Y+11, r24	; 0x0b
    1104:	9c 87       	std	Y+12, r25	; 0x0c
    1106:	ad 87       	std	Y+13, r26	; 0x0d
    1108:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    110a:	6b 85       	ldd	r22, Y+11	; 0x0b
    110c:	7c 85       	ldd	r23, Y+12	; 0x0c
    110e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1110:	9e 85       	ldd	r25, Y+14	; 0x0e
    1112:	20 e0       	ldi	r18, 0x00	; 0
    1114:	30 e0       	ldi	r19, 0x00	; 0
    1116:	4a ef       	ldi	r20, 0xFA	; 250
    1118:	54 e4       	ldi	r21, 0x44	; 68
    111a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    111e:	dc 01       	movw	r26, r24
    1120:	cb 01       	movw	r24, r22
    1122:	8f 83       	std	Y+7, r24	; 0x07
    1124:	98 87       	std	Y+8, r25	; 0x08
    1126:	a9 87       	std	Y+9, r26	; 0x09
    1128:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    112a:	6f 81       	ldd	r22, Y+7	; 0x07
    112c:	78 85       	ldd	r23, Y+8	; 0x08
    112e:	89 85       	ldd	r24, Y+9	; 0x09
    1130:	9a 85       	ldd	r25, Y+10	; 0x0a
    1132:	20 e0       	ldi	r18, 0x00	; 0
    1134:	30 e0       	ldi	r19, 0x00	; 0
    1136:	40 e8       	ldi	r20, 0x80	; 128
    1138:	5f e3       	ldi	r21, 0x3F	; 63
    113a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    113e:	88 23       	and	r24, r24
    1140:	2c f4       	brge	.+10     	; 0x114c <EEPROM_savepass+0xb4>
		__ticks = 1;
    1142:	81 e0       	ldi	r24, 0x01	; 1
    1144:	90 e0       	ldi	r25, 0x00	; 0
    1146:	9e 83       	std	Y+6, r25	; 0x06
    1148:	8d 83       	std	Y+5, r24	; 0x05
    114a:	3f c0       	rjmp	.+126    	; 0x11ca <EEPROM_savepass+0x132>
	else if (__tmp > 65535)
    114c:	6f 81       	ldd	r22, Y+7	; 0x07
    114e:	78 85       	ldd	r23, Y+8	; 0x08
    1150:	89 85       	ldd	r24, Y+9	; 0x09
    1152:	9a 85       	ldd	r25, Y+10	; 0x0a
    1154:	20 e0       	ldi	r18, 0x00	; 0
    1156:	3f ef       	ldi	r19, 0xFF	; 255
    1158:	4f e7       	ldi	r20, 0x7F	; 127
    115a:	57 e4       	ldi	r21, 0x47	; 71
    115c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1160:	18 16       	cp	r1, r24
    1162:	4c f5       	brge	.+82     	; 0x11b6 <EEPROM_savepass+0x11e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1164:	6b 85       	ldd	r22, Y+11	; 0x0b
    1166:	7c 85       	ldd	r23, Y+12	; 0x0c
    1168:	8d 85       	ldd	r24, Y+13	; 0x0d
    116a:	9e 85       	ldd	r25, Y+14	; 0x0e
    116c:	20 e0       	ldi	r18, 0x00	; 0
    116e:	30 e0       	ldi	r19, 0x00	; 0
    1170:	40 e2       	ldi	r20, 0x20	; 32
    1172:	51 e4       	ldi	r21, 0x41	; 65
    1174:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1178:	dc 01       	movw	r26, r24
    117a:	cb 01       	movw	r24, r22
    117c:	bc 01       	movw	r22, r24
    117e:	cd 01       	movw	r24, r26
    1180:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1184:	dc 01       	movw	r26, r24
    1186:	cb 01       	movw	r24, r22
    1188:	9e 83       	std	Y+6, r25	; 0x06
    118a:	8d 83       	std	Y+5, r24	; 0x05
    118c:	0f c0       	rjmp	.+30     	; 0x11ac <EEPROM_savepass+0x114>
    118e:	88 ec       	ldi	r24, 0xC8	; 200
    1190:	90 e0       	ldi	r25, 0x00	; 0
    1192:	9c 83       	std	Y+4, r25	; 0x04
    1194:	8b 83       	std	Y+3, r24	; 0x03
    1196:	8b 81       	ldd	r24, Y+3	; 0x03
    1198:	9c 81       	ldd	r25, Y+4	; 0x04
    119a:	01 97       	sbiw	r24, 0x01	; 1
    119c:	f1 f7       	brne	.-4      	; 0x119a <EEPROM_savepass+0x102>
    119e:	9c 83       	std	Y+4, r25	; 0x04
    11a0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11a2:	8d 81       	ldd	r24, Y+5	; 0x05
    11a4:	9e 81       	ldd	r25, Y+6	; 0x06
    11a6:	01 97       	sbiw	r24, 0x01	; 1
    11a8:	9e 83       	std	Y+6, r25	; 0x06
    11aa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11ac:	8d 81       	ldd	r24, Y+5	; 0x05
    11ae:	9e 81       	ldd	r25, Y+6	; 0x06
    11b0:	00 97       	sbiw	r24, 0x00	; 0
    11b2:	69 f7       	brne	.-38     	; 0x118e <EEPROM_savepass+0xf6>
    11b4:	14 c0       	rjmp	.+40     	; 0x11de <EEPROM_savepass+0x146>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11b6:	6f 81       	ldd	r22, Y+7	; 0x07
    11b8:	78 85       	ldd	r23, Y+8	; 0x08
    11ba:	89 85       	ldd	r24, Y+9	; 0x09
    11bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    11be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11c2:	dc 01       	movw	r26, r24
    11c4:	cb 01       	movw	r24, r22
    11c6:	9e 83       	std	Y+6, r25	; 0x06
    11c8:	8d 83       	std	Y+5, r24	; 0x05
    11ca:	8d 81       	ldd	r24, Y+5	; 0x05
    11cc:	9e 81       	ldd	r25, Y+6	; 0x06
    11ce:	9a 83       	std	Y+2, r25	; 0x02
    11d0:	89 83       	std	Y+1, r24	; 0x01
    11d2:	89 81       	ldd	r24, Y+1	; 0x01
    11d4:	9a 81       	ldd	r25, Y+2	; 0x02
    11d6:	01 97       	sbiw	r24, 0x01	; 1
    11d8:	f1 f7       	brne	.-4      	; 0x11d6 <EEPROM_savepass+0x13e>
    11da:	9a 83       	std	Y+2, r25	; 0x02
    11dc:	89 83       	std	Y+1, r24	; 0x01
	return PASSWORDS_MATCH;
}
/*******************************************************************************/
void EEPROM_savepass(uint8 *pass , uint8 size){
	uint8 i;
	for(i=0 ;i<size; i++){
    11de:	8f 85       	ldd	r24, Y+15	; 0x0f
    11e0:	8f 5f       	subi	r24, 0xFF	; 255
    11e2:	8f 87       	std	Y+15, r24	; 0x0f
    11e4:	9f 85       	ldd	r25, Y+15	; 0x0f
    11e6:	8a 89       	ldd	r24, Y+18	; 0x12
    11e8:	98 17       	cp	r25, r24
    11ea:	08 f4       	brcc	.+2      	; 0x11ee <EEPROM_savepass+0x156>
    11ec:	64 cf       	rjmp	.-312    	; 0x10b6 <EEPROM_savepass+0x1e>
		EEPROM_writeByte(PASS_EEPROM_ADDRESS+i,pass[i]);
		saved_pass_eeprom[i] = pass[i];
		_delay_ms(10);
	}
}
    11ee:	62 96       	adiw	r28, 0x12	; 18
    11f0:	0f b6       	in	r0, 0x3f	; 63
    11f2:	f8 94       	cli
    11f4:	de bf       	out	0x3e, r29	; 62
    11f6:	0f be       	out	0x3f, r0	; 63
    11f8:	cd bf       	out	0x3d, r28	; 61
    11fa:	cf 91       	pop	r28
    11fc:	df 91       	pop	r29
    11fe:	08 95       	ret

00001200 <Motor_function>:
/*******************************************************************************/
uint8 Motor_function(void){
    1200:	df 93       	push	r29
    1202:	cf 93       	push	r28
    1204:	cd b7       	in	r28, 0x3d	; 61
    1206:	de b7       	in	r29, 0x3e	; 62
	/*Opening the door in 15sec*/
	g_ticks=0;
    1208:	10 92 7c 00 	sts	0x007C, r1
    120c:	10 92 7b 00 	sts	0x007B, r1
	DcMotor_Rotate(CW,100);
    1210:	81 e0       	ldi	r24, 0x01	; 1
    1212:	64 e6       	ldi	r22, 0x64	; 100
    1214:	0e 94 93 09 	call	0x1326	; 0x1326 <DcMotor_Rotate>
	while (g_ticks < DOOR_IS_UNLOCK);
    1218:	80 91 7b 00 	lds	r24, 0x007B
    121c:	90 91 7c 00 	lds	r25, 0x007C
    1220:	8f 30       	cpi	r24, 0x0F	; 15
    1222:	91 05       	cpc	r25, r1
    1224:	c8 f3       	brcs	.-14     	; 0x1218 <Motor_function+0x18>


	/*Holding the door in 3sec*/
	g_ticks=0;
    1226:	10 92 7c 00 	sts	0x007C, r1
    122a:	10 92 7b 00 	sts	0x007B, r1
	DcMotor_Rotate(STOP,0);
    122e:	80 e0       	ldi	r24, 0x00	; 0
    1230:	60 e0       	ldi	r22, 0x00	; 0
    1232:	0e 94 93 09 	call	0x1326	; 0x1326 <DcMotor_Rotate>
	while (g_ticks < HOLD_MOTOR);
    1236:	80 91 7b 00 	lds	r24, 0x007B
    123a:	90 91 7c 00 	lds	r25, 0x007C
    123e:	83 30       	cpi	r24, 0x03	; 3
    1240:	91 05       	cpc	r25, r1
    1242:	c8 f3       	brcs	.-14     	; 0x1236 <Motor_function+0x36>


	/*Closing the door in 15sec*/
	g_ticks=0;
    1244:	10 92 7c 00 	sts	0x007C, r1
    1248:	10 92 7b 00 	sts	0x007B, r1
	DcMotor_Rotate(ACW,100);
    124c:	82 e0       	ldi	r24, 0x02	; 2
    124e:	64 e6       	ldi	r22, 0x64	; 100
    1250:	0e 94 93 09 	call	0x1326	; 0x1326 <DcMotor_Rotate>
	while (g_ticks < DOOR_IS_LOCK);
    1254:	80 91 7b 00 	lds	r24, 0x007B
    1258:	90 91 7c 00 	lds	r25, 0x007C
    125c:	8f 30       	cpi	r24, 0x0F	; 15
    125e:	91 05       	cpc	r25, r1
    1260:	c8 f3       	brcs	.-14     	; 0x1254 <Motor_function+0x54>


	/*Stop the Motor*/
	DcMotor_Rotate(STOP,0);
    1262:	80 e0       	ldi	r24, 0x00	; 0
    1264:	60 e0       	ldi	r22, 0x00	; 0
    1266:	0e 94 93 09 	call	0x1326	; 0x1326 <DcMotor_Rotate>
	return 0;
    126a:	80 e0       	ldi	r24, 0x00	; 0

}
    126c:	cf 91       	pop	r28
    126e:	df 91       	pop	r29
    1270:	08 95       	ret

00001272 <Buzzer_function>:
/*******************************************************************************/
void Buzzer_function(void){
    1272:	df 93       	push	r29
    1274:	cf 93       	push	r28
    1276:	cd b7       	in	r28, 0x3d	; 61
    1278:	de b7       	in	r29, 0x3e	; 62
	g_ticks=0;
    127a:	10 92 7c 00 	sts	0x007C, r1
    127e:	10 92 7b 00 	sts	0x007B, r1
	/*operate buzzer for 60 sec*/
	Buzzer_on();
    1282:	0e 94 60 09 	call	0x12c0	; 0x12c0 <Buzzer_on>
	while (g_ticks < WARNING);
    1286:	80 91 7b 00 	lds	r24, 0x007B
    128a:	90 91 7c 00 	lds	r25, 0x007C
    128e:	8c 33       	cpi	r24, 0x3C	; 60
    1290:	91 05       	cpc	r25, r1
    1292:	c8 f3       	brcs	.-14     	; 0x1286 <Buzzer_function+0x14>
	Buzzer_off();
    1294:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <Buzzer_off>
}
    1298:	cf 91       	pop	r28
    129a:	df 91       	pop	r29
    129c:	08 95       	ret

0000129e <Buzzer_init>:
 *[DESCRIPTION]		: Setup the direction for the buzzer pin as output pin through the GPIO driver.
 *		              turn off buzzer through GPIO
 *[ARGUMENTS]		: void
 *[RETURNS]			: void
 */
void Buzzer_init(void){
    129e:	df 93       	push	r29
    12a0:	cf 93       	push	r28
    12a2:	cd b7       	in	r28, 0x3d	; 61
    12a4:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(BUZZER_PORT_ID,BUZZER_PIN_ID,PIN_OUTPUT);
    12a6:	80 e0       	ldi	r24, 0x00	; 0
    12a8:	60 e0       	ldi	r22, 0x00	; 0
    12aa:	41 e0       	ldi	r20, 0x01	; 1
    12ac:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <GPIO_setupPinDirection>
	GPIO_writePin(BUZZER_PORT_ID,BUZZER_PIN_ID,LOGIC_LOW);
    12b0:	80 e0       	ldi	r24, 0x00	; 0
    12b2:	60 e0       	ldi	r22, 0x00	; 0
    12b4:	40 e0       	ldi	r20, 0x00	; 0
    12b6:	0e 94 57 0b 	call	0x16ae	; 0x16ae <GPIO_writePin>
}
    12ba:	cf 91       	pop	r28
    12bc:	df 91       	pop	r29
    12be:	08 95       	ret

000012c0 <Buzzer_on>:
/*[FUNCTION NAME]	: Buzzer_on
 *[DESCRIPTION]		: Function to enable the Buzzer through the GPIO.
 *[ARGUMENTS]		: void
 *[RETURNS]			: void
 */
void Buzzer_on(void){
    12c0:	df 93       	push	r29
    12c2:	cf 93       	push	r28
    12c4:	cd b7       	in	r28, 0x3d	; 61
    12c6:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID,BUZZER_PIN_ID,LOGIC_HIGH);
    12c8:	80 e0       	ldi	r24, 0x00	; 0
    12ca:	60 e0       	ldi	r22, 0x00	; 0
    12cc:	41 e0       	ldi	r20, 0x01	; 1
    12ce:	0e 94 57 0b 	call	0x16ae	; 0x16ae <GPIO_writePin>
}
    12d2:	cf 91       	pop	r28
    12d4:	df 91       	pop	r29
    12d6:	08 95       	ret

000012d8 <Buzzer_off>:
/*[FUNCTION NAME]	: Buzzer_off
 *[DESCRIPTION]		: Function to disable the Buzzer through the GPIO.
 *[ARGUMENTS]		: void
 *[RETURNS]			: void
 */
void Buzzer_off(void){
    12d8:	df 93       	push	r29
    12da:	cf 93       	push	r28
    12dc:	cd b7       	in	r28, 0x3d	; 61
    12de:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID,BUZZER_PIN_ID,LOGIC_LOW);
    12e0:	80 e0       	ldi	r24, 0x00	; 0
    12e2:	60 e0       	ldi	r22, 0x00	; 0
    12e4:	40 e0       	ldi	r20, 0x00	; 0
    12e6:	0e 94 57 0b 	call	0x16ae	; 0x16ae <GPIO_writePin>
}
    12ea:	cf 91       	pop	r28
    12ec:	df 91       	pop	r29
    12ee:	08 95       	ret

000012f0 <DcMotor_Init>:
 *                    motor pins through the GPIO driver.
 *                    Stop at the DC-Motor at the beginning through the GPIO driver.
 *[ARGUMENTS]		: void
 *[RETURNS]			: void
 */
void DcMotor_Init(void){
    12f0:	df 93       	push	r29
    12f2:	cf 93       	push	r28
    12f4:	cd b7       	in	r28, 0x3d	; 61
    12f6:	de b7       	in	r29, 0x3e	; 62

	/*Set PB0 and PB1 as output pins*/
	GPIO_setupPinDirection(DC_MOTOR_OUTPUT0_PORTID,DC_MOTOR_OUTPUT0_PINID,PIN_OUTPUT);
    12f8:	81 e0       	ldi	r24, 0x01	; 1
    12fa:	60 e0       	ldi	r22, 0x00	; 0
    12fc:	41 e0       	ldi	r20, 0x01	; 1
    12fe:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(DC_MOTOR_OUTPUT1_PORTID,DC_MOTOR_OUTPUT1_PINID,PIN_OUTPUT);
    1302:	81 e0       	ldi	r24, 0x01	; 1
    1304:	61 e0       	ldi	r22, 0x01	; 1
    1306:	41 e0       	ldi	r20, 0x01	; 1
    1308:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <GPIO_setupPinDirection>

	/*Set intial value for output pins as motor off*/
	GPIO_writePin(DC_MOTOR_OUTPUT0_PORTID,DC_MOTOR_OUTPUT0_PINID,LOGIC_LOW);
    130c:	81 e0       	ldi	r24, 0x01	; 1
    130e:	60 e0       	ldi	r22, 0x00	; 0
    1310:	40 e0       	ldi	r20, 0x00	; 0
    1312:	0e 94 57 0b 	call	0x16ae	; 0x16ae <GPIO_writePin>
	GPIO_writePin(DC_MOTOR_OUTPUT1_PORTID,DC_MOTOR_OUTPUT1_PINID,LOGIC_LOW);
    1316:	81 e0       	ldi	r24, 0x01	; 1
    1318:	61 e0       	ldi	r22, 0x01	; 1
    131a:	40 e0       	ldi	r20, 0x00	; 0
    131c:	0e 94 57 0b 	call	0x16ae	; 0x16ae <GPIO_writePin>
}
    1320:	cf 91       	pop	r28
    1322:	df 91       	pop	r29
    1324:	08 95       	ret

00001326 <DcMotor_Rotate>:
 *                    Send the required duty cycle to the PWM driver based on the  required speed value.
 *                    Stop at the DC-Motor at the beginning through the GPIO driver.
 *[ARGUMENTS]		: The required DC Motor state and required motor speed
 *[RETURNS]			: void
 */
void DcMotor_Rotate(DcMotor_State state,uint8 speed){
    1326:	df 93       	push	r29
    1328:	cf 93       	push	r28
    132a:	00 d0       	rcall	.+0      	; 0x132c <DcMotor_Rotate+0x6>
    132c:	cd b7       	in	r28, 0x3d	; 61
    132e:	de b7       	in	r29, 0x3e	; 62
    1330:	89 83       	std	Y+1, r24	; 0x01
    1332:	6a 83       	std	Y+2, r22	; 0x02
	if(state == STOP){
    1334:	89 81       	ldd	r24, Y+1	; 0x01
    1336:	88 23       	and	r24, r24
    1338:	59 f4       	brne	.+22     	; 0x1350 <DcMotor_Rotate+0x2a>
		GPIO_writePin(DC_MOTOR_OUTPUT0_PORTID,DC_MOTOR_OUTPUT0_PINID,LOGIC_LOW);
    133a:	81 e0       	ldi	r24, 0x01	; 1
    133c:	60 e0       	ldi	r22, 0x00	; 0
    133e:	40 e0       	ldi	r20, 0x00	; 0
    1340:	0e 94 57 0b 	call	0x16ae	; 0x16ae <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_OUTPUT1_PORTID,DC_MOTOR_OUTPUT1_PINID,LOGIC_LOW);
    1344:	81 e0       	ldi	r24, 0x01	; 1
    1346:	61 e0       	ldi	r22, 0x01	; 1
    1348:	40 e0       	ldi	r20, 0x00	; 0
    134a:	0e 94 57 0b 	call	0x16ae	; 0x16ae <GPIO_writePin>
    134e:	1b c0       	rjmp	.+54     	; 0x1386 <DcMotor_Rotate+0x60>
	}
	else if(state == CW){
    1350:	89 81       	ldd	r24, Y+1	; 0x01
    1352:	81 30       	cpi	r24, 0x01	; 1
    1354:	59 f4       	brne	.+22     	; 0x136c <DcMotor_Rotate+0x46>
		GPIO_writePin(DC_MOTOR_OUTPUT0_PORTID,DC_MOTOR_OUTPUT0_PINID,LOGIC_LOW);
    1356:	81 e0       	ldi	r24, 0x01	; 1
    1358:	60 e0       	ldi	r22, 0x00	; 0
    135a:	40 e0       	ldi	r20, 0x00	; 0
    135c:	0e 94 57 0b 	call	0x16ae	; 0x16ae <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_OUTPUT1_PORTID,DC_MOTOR_OUTPUT1_PINID,LOGIC_HIGH);
    1360:	81 e0       	ldi	r24, 0x01	; 1
    1362:	61 e0       	ldi	r22, 0x01	; 1
    1364:	41 e0       	ldi	r20, 0x01	; 1
    1366:	0e 94 57 0b 	call	0x16ae	; 0x16ae <GPIO_writePin>
    136a:	0d c0       	rjmp	.+26     	; 0x1386 <DcMotor_Rotate+0x60>
	}
	else if(state == ACW){
    136c:	89 81       	ldd	r24, Y+1	; 0x01
    136e:	82 30       	cpi	r24, 0x02	; 2
    1370:	51 f4       	brne	.+20     	; 0x1386 <DcMotor_Rotate+0x60>
		GPIO_writePin(DC_MOTOR_OUTPUT0_PORTID,DC_MOTOR_OUTPUT0_PINID,LOGIC_HIGH);
    1372:	81 e0       	ldi	r24, 0x01	; 1
    1374:	60 e0       	ldi	r22, 0x00	; 0
    1376:	41 e0       	ldi	r20, 0x01	; 1
    1378:	0e 94 57 0b 	call	0x16ae	; 0x16ae <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_OUTPUT1_PORTID,DC_MOTOR_OUTPUT1_PINID,LOGIC_LOW);
    137c:	81 e0       	ldi	r24, 0x01	; 1
    137e:	61 e0       	ldi	r22, 0x01	; 1
    1380:	40 e0       	ldi	r20, 0x00	; 0
    1382:	0e 94 57 0b 	call	0x16ae	; 0x16ae <GPIO_writePin>
	}

	PWM_Timer0_Start(speed);
    1386:	8a 81       	ldd	r24, Y+2	; 0x02
    1388:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <PWM_Timer0_Start>
}
    138c:	0f 90       	pop	r0
    138e:	0f 90       	pop	r0
    1390:	cf 91       	pop	r28
    1392:	df 91       	pop	r29
    1394:	08 95       	ret

00001396 <EEPROM_writeByte>:
/*[FUNCTION NAME]	: EEPROM_writeByte
 *[DESCRIPTION]		: send the device address and location address to write Byte from Memory
 *[ARGUMENTS]		: uint16 u16addr,uint8 u8data
 *[RETURNS]			: void
 */
uint8 EEPROM_writeByte(uint16 u16addr,uint8 u8data){
    1396:	df 93       	push	r29
    1398:	cf 93       	push	r28
    139a:	00 d0       	rcall	.+0      	; 0x139c <EEPROM_writeByte+0x6>
    139c:	00 d0       	rcall	.+0      	; 0x139e <EEPROM_writeByte+0x8>
    139e:	cd b7       	in	r28, 0x3d	; 61
    13a0:	de b7       	in	r29, 0x3e	; 62
    13a2:	9a 83       	std	Y+2, r25	; 0x02
    13a4:	89 83       	std	Y+1, r24	; 0x01
    13a6:	6b 83       	std	Y+3, r22	; 0x03
	/*send the start Bit*/
	TWI_start();
    13a8:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <TWI_start>
	if(TWI_getStatus() != TWI_START)
    13ac:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <TWI_getStatus>
    13b0:	88 30       	cpi	r24, 0x08	; 8
    13b2:	11 f0       	breq	.+4      	; 0x13b8 <EEPROM_writeByte+0x22>
		return ERROR;
    13b4:	1c 82       	std	Y+4, r1	; 0x04
    13b6:	28 c0       	rjmp	.+80     	; 0x1408 <EEPROM_writeByte+0x72>

	/* Send the device address, we need to get A8 A9 A10 address bits from the
	 * memory location address and R/W=0 (write) */
	TWI_writeByte((uint8)(0xA0) | ((u16addr & 0x700)>>7));
    13b8:	89 81       	ldd	r24, Y+1	; 0x01
    13ba:	9a 81       	ldd	r25, Y+2	; 0x02
    13bc:	80 70       	andi	r24, 0x00	; 0
    13be:	97 70       	andi	r25, 0x07	; 7
    13c0:	88 0f       	add	r24, r24
    13c2:	89 2f       	mov	r24, r25
    13c4:	88 1f       	adc	r24, r24
    13c6:	99 0b       	sbc	r25, r25
    13c8:	91 95       	neg	r25
    13ca:	80 6a       	ori	r24, 0xA0	; 160
    13cc:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <TWI_writeByte>
	if(TWI_getStatus() != TWI_MT_SLA_W_ACK)
    13d0:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <TWI_getStatus>
    13d4:	88 31       	cpi	r24, 0x18	; 24
    13d6:	11 f0       	breq	.+4      	; 0x13dc <EEPROM_writeByte+0x46>
		return ERROR;
    13d8:	1c 82       	std	Y+4, r1	; 0x04
    13da:	16 c0       	rjmp	.+44     	; 0x1408 <EEPROM_writeByte+0x72>

	/* Send the required memory location address */
	TWI_writeByte((uint8)(u16addr));
    13dc:	89 81       	ldd	r24, Y+1	; 0x01
    13de:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <TWI_writeByte>
	if(TWI_getStatus() != TWI_MT_DATA_ACK)
    13e2:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <TWI_getStatus>
    13e6:	88 32       	cpi	r24, 0x28	; 40
    13e8:	11 f0       	breq	.+4      	; 0x13ee <EEPROM_writeByte+0x58>
		return ERROR;
    13ea:	1c 82       	std	Y+4, r1	; 0x04
    13ec:	0d c0       	rjmp	.+26     	; 0x1408 <EEPROM_writeByte+0x72>

	/* write byte to eeprom */
	TWI_writeByte(u8data);
    13ee:	8b 81       	ldd	r24, Y+3	; 0x03
    13f0:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <TWI_writeByte>
	if(TWI_getStatus() != TWI_MT_DATA_ACK)
    13f4:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <TWI_getStatus>
    13f8:	88 32       	cpi	r24, 0x28	; 40
    13fa:	11 f0       	breq	.+4      	; 0x1400 <EEPROM_writeByte+0x6a>
		return ERROR;
    13fc:	1c 82       	std	Y+4, r1	; 0x04
    13fe:	04 c0       	rjmp	.+8      	; 0x1408 <EEPROM_writeByte+0x72>

	/* Send the Stop Bit */
	TWI_stop();
    1400:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <TWI_stop>

	return SUCCESS;
    1404:	81 e0       	ldi	r24, 0x01	; 1
    1406:	8c 83       	std	Y+4, r24	; 0x04
    1408:	8c 81       	ldd	r24, Y+4	; 0x04
}
    140a:	0f 90       	pop	r0
    140c:	0f 90       	pop	r0
    140e:	0f 90       	pop	r0
    1410:	0f 90       	pop	r0
    1412:	cf 91       	pop	r28
    1414:	df 91       	pop	r29
    1416:	08 95       	ret

00001418 <EEPROM_readByte>:
/*[FUNCTION NAME]	: EEPROM_writeByte
 *[DESCRIPTION]		: send the device address and location address to Read Byte from Memory
 *[ARGUMENTS]		: uint16 u16addr,uint8 *u8data
 *[RETURNS]			: void
 */
uint8 EEPROM_readByte(uint16 u16addr,uint8 *u8data){
    1418:	df 93       	push	r29
    141a:	cf 93       	push	r28
    141c:	00 d0       	rcall	.+0      	; 0x141e <EEPROM_readByte+0x6>
    141e:	00 d0       	rcall	.+0      	; 0x1420 <EEPROM_readByte+0x8>
    1420:	0f 92       	push	r0
    1422:	cd b7       	in	r28, 0x3d	; 61
    1424:	de b7       	in	r29, 0x3e	; 62
    1426:	9a 83       	std	Y+2, r25	; 0x02
    1428:	89 83       	std	Y+1, r24	; 0x01
    142a:	7c 83       	std	Y+4, r23	; 0x04
    142c:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
	TWI_start();
    142e:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <TWI_start>
	if (TWI_getStatus() != TWI_START)
    1432:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <TWI_getStatus>
    1436:	88 30       	cpi	r24, 0x08	; 8
    1438:	11 f0       	breq	.+4      	; 0x143e <EEPROM_readByte+0x26>
		return ERROR;
    143a:	1d 82       	std	Y+5, r1	; 0x05
    143c:	44 c0       	rjmp	.+136    	; 0x14c6 <EEPROM_readByte+0xae>

	/* Send the device address, we need to get A8 A9 A10 address bits from the
	 * memory location address and R/W=0 (write) */
	TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    143e:	89 81       	ldd	r24, Y+1	; 0x01
    1440:	9a 81       	ldd	r25, Y+2	; 0x02
    1442:	80 70       	andi	r24, 0x00	; 0
    1444:	97 70       	andi	r25, 0x07	; 7
    1446:	88 0f       	add	r24, r24
    1448:	89 2f       	mov	r24, r25
    144a:	88 1f       	adc	r24, r24
    144c:	99 0b       	sbc	r25, r25
    144e:	91 95       	neg	r25
    1450:	80 6a       	ori	r24, 0xA0	; 160
    1452:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <TWI_writeByte>
	if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    1456:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <TWI_getStatus>
    145a:	88 31       	cpi	r24, 0x18	; 24
    145c:	11 f0       	breq	.+4      	; 0x1462 <EEPROM_readByte+0x4a>
		return ERROR;
    145e:	1d 82       	std	Y+5, r1	; 0x05
    1460:	32 c0       	rjmp	.+100    	; 0x14c6 <EEPROM_readByte+0xae>

	/* Send the required memory location address */
	TWI_writeByte((uint8)(u16addr));
    1462:	89 81       	ldd	r24, Y+1	; 0x01
    1464:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <TWI_writeByte>
	if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1468:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <TWI_getStatus>
    146c:	88 32       	cpi	r24, 0x28	; 40
    146e:	11 f0       	breq	.+4      	; 0x1474 <EEPROM_readByte+0x5c>
		return ERROR;
    1470:	1d 82       	std	Y+5, r1	; 0x05
    1472:	29 c0       	rjmp	.+82     	; 0x14c6 <EEPROM_readByte+0xae>

	/* Send the Repeated Start Bit */
	TWI_start();
    1474:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <TWI_start>
	if (TWI_getStatus() != TWI_REP_START)
    1478:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <TWI_getStatus>
    147c:	80 31       	cpi	r24, 0x10	; 16
    147e:	11 f0       	breq	.+4      	; 0x1484 <EEPROM_readByte+0x6c>
		return ERROR;
    1480:	1d 82       	std	Y+5, r1	; 0x05
    1482:	21 c0       	rjmp	.+66     	; 0x14c6 <EEPROM_readByte+0xae>

	/* Send the device address, we need to get A8 A9 A10 address bits from the
	 * memory location address and R/W=1 (Read) */
	TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    1484:	89 81       	ldd	r24, Y+1	; 0x01
    1486:	9a 81       	ldd	r25, Y+2	; 0x02
    1488:	80 70       	andi	r24, 0x00	; 0
    148a:	97 70       	andi	r25, 0x07	; 7
    148c:	88 0f       	add	r24, r24
    148e:	89 2f       	mov	r24, r25
    1490:	88 1f       	adc	r24, r24
    1492:	99 0b       	sbc	r25, r25
    1494:	91 95       	neg	r25
    1496:	81 6a       	ori	r24, 0xA1	; 161
    1498:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <TWI_writeByte>
	if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    149c:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <TWI_getStatus>
    14a0:	80 34       	cpi	r24, 0x40	; 64
    14a2:	11 f0       	breq	.+4      	; 0x14a8 <EEPROM_readByte+0x90>
		return ERROR;
    14a4:	1d 82       	std	Y+5, r1	; 0x05
    14a6:	0f c0       	rjmp	.+30     	; 0x14c6 <EEPROM_readByte+0xae>

	/* Read Byte from Memory without send ACK */
	*u8data = TWI_readByteWithNACK();
    14a8:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <TWI_readByteWithNACK>
    14ac:	eb 81       	ldd	r30, Y+3	; 0x03
    14ae:	fc 81       	ldd	r31, Y+4	; 0x04
    14b0:	80 83       	st	Z, r24
	if (TWI_getStatus() != TWI_MR_DATA_NACK)
    14b2:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <TWI_getStatus>
    14b6:	88 35       	cpi	r24, 0x58	; 88
    14b8:	11 f0       	breq	.+4      	; 0x14be <EEPROM_readByte+0xa6>
		return ERROR;
    14ba:	1d 82       	std	Y+5, r1	; 0x05
    14bc:	04 c0       	rjmp	.+8      	; 0x14c6 <EEPROM_readByte+0xae>

	/* Send the Stop Bit */
	TWI_stop();
    14be:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <TWI_stop>

	return SUCCESS;
    14c2:	81 e0       	ldi	r24, 0x01	; 1
    14c4:	8d 83       	std	Y+5, r24	; 0x05
    14c6:	8d 81       	ldd	r24, Y+5	; 0x05
}
    14c8:	0f 90       	pop	r0
    14ca:	0f 90       	pop	r0
    14cc:	0f 90       	pop	r0
    14ce:	0f 90       	pop	r0
    14d0:	0f 90       	pop	r0
    14d2:	cf 91       	pop	r28
    14d4:	df 91       	pop	r29
    14d6:	08 95       	ret

000014d8 <GPIO_setupPinDirection>:
 *             		  If the input port number or pin number are not correct, The function will not handle the request.
 *[ARGUMENTS]		: unit8 (port_num, pin_num) ,
 *		              GPIO_PinDirectionType Enum(direction)
 *[RETURNS]			: void
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction){
    14d8:	df 93       	push	r29
    14da:	cf 93       	push	r28
    14dc:	00 d0       	rcall	.+0      	; 0x14de <GPIO_setupPinDirection+0x6>
    14de:	00 d0       	rcall	.+0      	; 0x14e0 <GPIO_setupPinDirection+0x8>
    14e0:	0f 92       	push	r0
    14e2:	cd b7       	in	r28, 0x3d	; 61
    14e4:	de b7       	in	r29, 0x3e	; 62
    14e6:	89 83       	std	Y+1, r24	; 0x01
    14e8:	6a 83       	std	Y+2, r22	; 0x02
    14ea:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    14ec:	8a 81       	ldd	r24, Y+2	; 0x02
    14ee:	88 30       	cpi	r24, 0x08	; 8
    14f0:	08 f0       	brcs	.+2      	; 0x14f4 <GPIO_setupPinDirection+0x1c>
    14f2:	d5 c0       	rjmp	.+426    	; 0x169e <GPIO_setupPinDirection+0x1c6>
    14f4:	89 81       	ldd	r24, Y+1	; 0x01
    14f6:	84 30       	cpi	r24, 0x04	; 4
    14f8:	08 f0       	brcs	.+2      	; 0x14fc <GPIO_setupPinDirection+0x24>
    14fa:	d1 c0       	rjmp	.+418    	; 0x169e <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		//switch on port number
		switch(port_num){
    14fc:	89 81       	ldd	r24, Y+1	; 0x01
    14fe:	28 2f       	mov	r18, r24
    1500:	30 e0       	ldi	r19, 0x00	; 0
    1502:	3d 83       	std	Y+5, r19	; 0x05
    1504:	2c 83       	std	Y+4, r18	; 0x04
    1506:	8c 81       	ldd	r24, Y+4	; 0x04
    1508:	9d 81       	ldd	r25, Y+5	; 0x05
    150a:	81 30       	cpi	r24, 0x01	; 1
    150c:	91 05       	cpc	r25, r1
    150e:	09 f4       	brne	.+2      	; 0x1512 <GPIO_setupPinDirection+0x3a>
    1510:	43 c0       	rjmp	.+134    	; 0x1598 <GPIO_setupPinDirection+0xc0>
    1512:	2c 81       	ldd	r18, Y+4	; 0x04
    1514:	3d 81       	ldd	r19, Y+5	; 0x05
    1516:	22 30       	cpi	r18, 0x02	; 2
    1518:	31 05       	cpc	r19, r1
    151a:	2c f4       	brge	.+10     	; 0x1526 <GPIO_setupPinDirection+0x4e>
    151c:	8c 81       	ldd	r24, Y+4	; 0x04
    151e:	9d 81       	ldd	r25, Y+5	; 0x05
    1520:	00 97       	sbiw	r24, 0x00	; 0
    1522:	71 f0       	breq	.+28     	; 0x1540 <GPIO_setupPinDirection+0x68>
    1524:	bc c0       	rjmp	.+376    	; 0x169e <GPIO_setupPinDirection+0x1c6>
    1526:	2c 81       	ldd	r18, Y+4	; 0x04
    1528:	3d 81       	ldd	r19, Y+5	; 0x05
    152a:	22 30       	cpi	r18, 0x02	; 2
    152c:	31 05       	cpc	r19, r1
    152e:	09 f4       	brne	.+2      	; 0x1532 <GPIO_setupPinDirection+0x5a>
    1530:	5f c0       	rjmp	.+190    	; 0x15f0 <GPIO_setupPinDirection+0x118>
    1532:	8c 81       	ldd	r24, Y+4	; 0x04
    1534:	9d 81       	ldd	r25, Y+5	; 0x05
    1536:	83 30       	cpi	r24, 0x03	; 3
    1538:	91 05       	cpc	r25, r1
    153a:	09 f4       	brne	.+2      	; 0x153e <GPIO_setupPinDirection+0x66>
    153c:	85 c0       	rjmp	.+266    	; 0x1648 <GPIO_setupPinDirection+0x170>
    153e:	af c0       	rjmp	.+350    	; 0x169e <GPIO_setupPinDirection+0x1c6>

		//If pin is input clear DDRA with chosen pin number and if not set Pin in DDRA
		case PORTA_ID:
			if(direction == PIN_INPUT){
    1540:	8b 81       	ldd	r24, Y+3	; 0x03
    1542:	88 23       	and	r24, r24
    1544:	a9 f4       	brne	.+42     	; 0x1570 <GPIO_setupPinDirection+0x98>
				CLEAR_BIT(DDRA,pin_num);
    1546:	aa e3       	ldi	r26, 0x3A	; 58
    1548:	b0 e0       	ldi	r27, 0x00	; 0
    154a:	ea e3       	ldi	r30, 0x3A	; 58
    154c:	f0 e0       	ldi	r31, 0x00	; 0
    154e:	80 81       	ld	r24, Z
    1550:	48 2f       	mov	r20, r24
    1552:	8a 81       	ldd	r24, Y+2	; 0x02
    1554:	28 2f       	mov	r18, r24
    1556:	30 e0       	ldi	r19, 0x00	; 0
    1558:	81 e0       	ldi	r24, 0x01	; 1
    155a:	90 e0       	ldi	r25, 0x00	; 0
    155c:	02 2e       	mov	r0, r18
    155e:	02 c0       	rjmp	.+4      	; 0x1564 <GPIO_setupPinDirection+0x8c>
    1560:	88 0f       	add	r24, r24
    1562:	99 1f       	adc	r25, r25
    1564:	0a 94       	dec	r0
    1566:	e2 f7       	brpl	.-8      	; 0x1560 <GPIO_setupPinDirection+0x88>
    1568:	80 95       	com	r24
    156a:	84 23       	and	r24, r20
    156c:	8c 93       	st	X, r24
    156e:	97 c0       	rjmp	.+302    	; 0x169e <GPIO_setupPinDirection+0x1c6>
			}
			else{
				SET_BIT(DDRA,pin_num);
    1570:	aa e3       	ldi	r26, 0x3A	; 58
    1572:	b0 e0       	ldi	r27, 0x00	; 0
    1574:	ea e3       	ldi	r30, 0x3A	; 58
    1576:	f0 e0       	ldi	r31, 0x00	; 0
    1578:	80 81       	ld	r24, Z
    157a:	48 2f       	mov	r20, r24
    157c:	8a 81       	ldd	r24, Y+2	; 0x02
    157e:	28 2f       	mov	r18, r24
    1580:	30 e0       	ldi	r19, 0x00	; 0
    1582:	81 e0       	ldi	r24, 0x01	; 1
    1584:	90 e0       	ldi	r25, 0x00	; 0
    1586:	02 2e       	mov	r0, r18
    1588:	02 c0       	rjmp	.+4      	; 0x158e <GPIO_setupPinDirection+0xb6>
    158a:	88 0f       	add	r24, r24
    158c:	99 1f       	adc	r25, r25
    158e:	0a 94       	dec	r0
    1590:	e2 f7       	brpl	.-8      	; 0x158a <GPIO_setupPinDirection+0xb2>
    1592:	84 2b       	or	r24, r20
    1594:	8c 93       	st	X, r24
    1596:	83 c0       	rjmp	.+262    	; 0x169e <GPIO_setupPinDirection+0x1c6>
			}
			break;

			//If pin is input clear DDRB with chosen pin number and if not set Pin in DDRB
		case PORTB_ID:
			if(direction == PIN_INPUT){
    1598:	8b 81       	ldd	r24, Y+3	; 0x03
    159a:	88 23       	and	r24, r24
    159c:	a9 f4       	brne	.+42     	; 0x15c8 <GPIO_setupPinDirection+0xf0>
				CLEAR_BIT(DDRB,pin_num);
    159e:	a7 e3       	ldi	r26, 0x37	; 55
    15a0:	b0 e0       	ldi	r27, 0x00	; 0
    15a2:	e7 e3       	ldi	r30, 0x37	; 55
    15a4:	f0 e0       	ldi	r31, 0x00	; 0
    15a6:	80 81       	ld	r24, Z
    15a8:	48 2f       	mov	r20, r24
    15aa:	8a 81       	ldd	r24, Y+2	; 0x02
    15ac:	28 2f       	mov	r18, r24
    15ae:	30 e0       	ldi	r19, 0x00	; 0
    15b0:	81 e0       	ldi	r24, 0x01	; 1
    15b2:	90 e0       	ldi	r25, 0x00	; 0
    15b4:	02 2e       	mov	r0, r18
    15b6:	02 c0       	rjmp	.+4      	; 0x15bc <GPIO_setupPinDirection+0xe4>
    15b8:	88 0f       	add	r24, r24
    15ba:	99 1f       	adc	r25, r25
    15bc:	0a 94       	dec	r0
    15be:	e2 f7       	brpl	.-8      	; 0x15b8 <GPIO_setupPinDirection+0xe0>
    15c0:	80 95       	com	r24
    15c2:	84 23       	and	r24, r20
    15c4:	8c 93       	st	X, r24
    15c6:	6b c0       	rjmp	.+214    	; 0x169e <GPIO_setupPinDirection+0x1c6>
			}
			else{
				SET_BIT(DDRB,pin_num);
    15c8:	a7 e3       	ldi	r26, 0x37	; 55
    15ca:	b0 e0       	ldi	r27, 0x00	; 0
    15cc:	e7 e3       	ldi	r30, 0x37	; 55
    15ce:	f0 e0       	ldi	r31, 0x00	; 0
    15d0:	80 81       	ld	r24, Z
    15d2:	48 2f       	mov	r20, r24
    15d4:	8a 81       	ldd	r24, Y+2	; 0x02
    15d6:	28 2f       	mov	r18, r24
    15d8:	30 e0       	ldi	r19, 0x00	; 0
    15da:	81 e0       	ldi	r24, 0x01	; 1
    15dc:	90 e0       	ldi	r25, 0x00	; 0
    15de:	02 2e       	mov	r0, r18
    15e0:	02 c0       	rjmp	.+4      	; 0x15e6 <GPIO_setupPinDirection+0x10e>
    15e2:	88 0f       	add	r24, r24
    15e4:	99 1f       	adc	r25, r25
    15e6:	0a 94       	dec	r0
    15e8:	e2 f7       	brpl	.-8      	; 0x15e2 <GPIO_setupPinDirection+0x10a>
    15ea:	84 2b       	or	r24, r20
    15ec:	8c 93       	st	X, r24
    15ee:	57 c0       	rjmp	.+174    	; 0x169e <GPIO_setupPinDirection+0x1c6>
			}
			break;

			//If pin is input clear DDRC with chosen pin number and if not set Pin in DDRC
		case PORTC_ID:
			if(direction == PIN_INPUT){
    15f0:	8b 81       	ldd	r24, Y+3	; 0x03
    15f2:	88 23       	and	r24, r24
    15f4:	a9 f4       	brne	.+42     	; 0x1620 <GPIO_setupPinDirection+0x148>
				CLEAR_BIT(DDRC,pin_num);
    15f6:	a4 e3       	ldi	r26, 0x34	; 52
    15f8:	b0 e0       	ldi	r27, 0x00	; 0
    15fa:	e4 e3       	ldi	r30, 0x34	; 52
    15fc:	f0 e0       	ldi	r31, 0x00	; 0
    15fe:	80 81       	ld	r24, Z
    1600:	48 2f       	mov	r20, r24
    1602:	8a 81       	ldd	r24, Y+2	; 0x02
    1604:	28 2f       	mov	r18, r24
    1606:	30 e0       	ldi	r19, 0x00	; 0
    1608:	81 e0       	ldi	r24, 0x01	; 1
    160a:	90 e0       	ldi	r25, 0x00	; 0
    160c:	02 2e       	mov	r0, r18
    160e:	02 c0       	rjmp	.+4      	; 0x1614 <GPIO_setupPinDirection+0x13c>
    1610:	88 0f       	add	r24, r24
    1612:	99 1f       	adc	r25, r25
    1614:	0a 94       	dec	r0
    1616:	e2 f7       	brpl	.-8      	; 0x1610 <GPIO_setupPinDirection+0x138>
    1618:	80 95       	com	r24
    161a:	84 23       	and	r24, r20
    161c:	8c 93       	st	X, r24
    161e:	3f c0       	rjmp	.+126    	; 0x169e <GPIO_setupPinDirection+0x1c6>
			}
			else{
				SET_BIT(DDRC,pin_num);
    1620:	a4 e3       	ldi	r26, 0x34	; 52
    1622:	b0 e0       	ldi	r27, 0x00	; 0
    1624:	e4 e3       	ldi	r30, 0x34	; 52
    1626:	f0 e0       	ldi	r31, 0x00	; 0
    1628:	80 81       	ld	r24, Z
    162a:	48 2f       	mov	r20, r24
    162c:	8a 81       	ldd	r24, Y+2	; 0x02
    162e:	28 2f       	mov	r18, r24
    1630:	30 e0       	ldi	r19, 0x00	; 0
    1632:	81 e0       	ldi	r24, 0x01	; 1
    1634:	90 e0       	ldi	r25, 0x00	; 0
    1636:	02 2e       	mov	r0, r18
    1638:	02 c0       	rjmp	.+4      	; 0x163e <GPIO_setupPinDirection+0x166>
    163a:	88 0f       	add	r24, r24
    163c:	99 1f       	adc	r25, r25
    163e:	0a 94       	dec	r0
    1640:	e2 f7       	brpl	.-8      	; 0x163a <GPIO_setupPinDirection+0x162>
    1642:	84 2b       	or	r24, r20
    1644:	8c 93       	st	X, r24
    1646:	2b c0       	rjmp	.+86     	; 0x169e <GPIO_setupPinDirection+0x1c6>
			}
			break;

			//If pin is input clear DDRD with chosen pin number and if not set Pin in DDRD
		case PORTD_ID:
			if(direction == PIN_INPUT){
    1648:	8b 81       	ldd	r24, Y+3	; 0x03
    164a:	88 23       	and	r24, r24
    164c:	a9 f4       	brne	.+42     	; 0x1678 <GPIO_setupPinDirection+0x1a0>
				CLEAR_BIT(DDRD,pin_num);
    164e:	a1 e3       	ldi	r26, 0x31	; 49
    1650:	b0 e0       	ldi	r27, 0x00	; 0
    1652:	e1 e3       	ldi	r30, 0x31	; 49
    1654:	f0 e0       	ldi	r31, 0x00	; 0
    1656:	80 81       	ld	r24, Z
    1658:	48 2f       	mov	r20, r24
    165a:	8a 81       	ldd	r24, Y+2	; 0x02
    165c:	28 2f       	mov	r18, r24
    165e:	30 e0       	ldi	r19, 0x00	; 0
    1660:	81 e0       	ldi	r24, 0x01	; 1
    1662:	90 e0       	ldi	r25, 0x00	; 0
    1664:	02 2e       	mov	r0, r18
    1666:	02 c0       	rjmp	.+4      	; 0x166c <GPIO_setupPinDirection+0x194>
    1668:	88 0f       	add	r24, r24
    166a:	99 1f       	adc	r25, r25
    166c:	0a 94       	dec	r0
    166e:	e2 f7       	brpl	.-8      	; 0x1668 <GPIO_setupPinDirection+0x190>
    1670:	80 95       	com	r24
    1672:	84 23       	and	r24, r20
    1674:	8c 93       	st	X, r24
    1676:	13 c0       	rjmp	.+38     	; 0x169e <GPIO_setupPinDirection+0x1c6>
			}
			else{
				SET_BIT(DDRD,pin_num);
    1678:	a1 e3       	ldi	r26, 0x31	; 49
    167a:	b0 e0       	ldi	r27, 0x00	; 0
    167c:	e1 e3       	ldi	r30, 0x31	; 49
    167e:	f0 e0       	ldi	r31, 0x00	; 0
    1680:	80 81       	ld	r24, Z
    1682:	48 2f       	mov	r20, r24
    1684:	8a 81       	ldd	r24, Y+2	; 0x02
    1686:	28 2f       	mov	r18, r24
    1688:	30 e0       	ldi	r19, 0x00	; 0
    168a:	81 e0       	ldi	r24, 0x01	; 1
    168c:	90 e0       	ldi	r25, 0x00	; 0
    168e:	02 2e       	mov	r0, r18
    1690:	02 c0       	rjmp	.+4      	; 0x1696 <GPIO_setupPinDirection+0x1be>
    1692:	88 0f       	add	r24, r24
    1694:	99 1f       	adc	r25, r25
    1696:	0a 94       	dec	r0
    1698:	e2 f7       	brpl	.-8      	; 0x1692 <GPIO_setupPinDirection+0x1ba>
    169a:	84 2b       	or	r24, r20
    169c:	8c 93       	st	X, r24

			break;
		}

	}
}
    169e:	0f 90       	pop	r0
    16a0:	0f 90       	pop	r0
    16a2:	0f 90       	pop	r0
    16a4:	0f 90       	pop	r0
    16a6:	0f 90       	pop	r0
    16a8:	cf 91       	pop	r28
    16aa:	df 91       	pop	r29
    16ac:	08 95       	ret

000016ae <GPIO_writePin>:
 *                    If the input port number or pin number are not correct, The function will not handle the request.
 *                    If the pin is input, this function will enable/disable the internal pull-up resistor.
 *[ARGUMENTS]		: unit8 (port_num, pin_num, value)
 *[RETURNS]			: void
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value){
    16ae:	df 93       	push	r29
    16b0:	cf 93       	push	r28
    16b2:	00 d0       	rcall	.+0      	; 0x16b4 <GPIO_writePin+0x6>
    16b4:	00 d0       	rcall	.+0      	; 0x16b6 <GPIO_writePin+0x8>
    16b6:	0f 92       	push	r0
    16b8:	cd b7       	in	r28, 0x3d	; 61
    16ba:	de b7       	in	r29, 0x3e	; 62
    16bc:	89 83       	std	Y+1, r24	; 0x01
    16be:	6a 83       	std	Y+2, r22	; 0x02
    16c0:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    16c2:	8a 81       	ldd	r24, Y+2	; 0x02
    16c4:	88 30       	cpi	r24, 0x08	; 8
    16c6:	08 f0       	brcs	.+2      	; 0x16ca <GPIO_writePin+0x1c>
    16c8:	d5 c0       	rjmp	.+426    	; 0x1874 <GPIO_writePin+0x1c6>
    16ca:	89 81       	ldd	r24, Y+1	; 0x01
    16cc:	84 30       	cpi	r24, 0x04	; 4
    16ce:	08 f0       	brcs	.+2      	; 0x16d2 <GPIO_writePin+0x24>
    16d0:	d1 c0       	rjmp	.+418    	; 0x1874 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		//switch on port number
		switch(port_num){
    16d2:	89 81       	ldd	r24, Y+1	; 0x01
    16d4:	28 2f       	mov	r18, r24
    16d6:	30 e0       	ldi	r19, 0x00	; 0
    16d8:	3d 83       	std	Y+5, r19	; 0x05
    16da:	2c 83       	std	Y+4, r18	; 0x04
    16dc:	8c 81       	ldd	r24, Y+4	; 0x04
    16de:	9d 81       	ldd	r25, Y+5	; 0x05
    16e0:	81 30       	cpi	r24, 0x01	; 1
    16e2:	91 05       	cpc	r25, r1
    16e4:	09 f4       	brne	.+2      	; 0x16e8 <GPIO_writePin+0x3a>
    16e6:	43 c0       	rjmp	.+134    	; 0x176e <GPIO_writePin+0xc0>
    16e8:	2c 81       	ldd	r18, Y+4	; 0x04
    16ea:	3d 81       	ldd	r19, Y+5	; 0x05
    16ec:	22 30       	cpi	r18, 0x02	; 2
    16ee:	31 05       	cpc	r19, r1
    16f0:	2c f4       	brge	.+10     	; 0x16fc <GPIO_writePin+0x4e>
    16f2:	8c 81       	ldd	r24, Y+4	; 0x04
    16f4:	9d 81       	ldd	r25, Y+5	; 0x05
    16f6:	00 97       	sbiw	r24, 0x00	; 0
    16f8:	71 f0       	breq	.+28     	; 0x1716 <GPIO_writePin+0x68>
    16fa:	bc c0       	rjmp	.+376    	; 0x1874 <GPIO_writePin+0x1c6>
    16fc:	2c 81       	ldd	r18, Y+4	; 0x04
    16fe:	3d 81       	ldd	r19, Y+5	; 0x05
    1700:	22 30       	cpi	r18, 0x02	; 2
    1702:	31 05       	cpc	r19, r1
    1704:	09 f4       	brne	.+2      	; 0x1708 <GPIO_writePin+0x5a>
    1706:	5f c0       	rjmp	.+190    	; 0x17c6 <GPIO_writePin+0x118>
    1708:	8c 81       	ldd	r24, Y+4	; 0x04
    170a:	9d 81       	ldd	r25, Y+5	; 0x05
    170c:	83 30       	cpi	r24, 0x03	; 3
    170e:	91 05       	cpc	r25, r1
    1710:	09 f4       	brne	.+2      	; 0x1714 <GPIO_writePin+0x66>
    1712:	85 c0       	rjmp	.+266    	; 0x181e <GPIO_writePin+0x170>
    1714:	af c0       	rjmp	.+350    	; 0x1874 <GPIO_writePin+0x1c6>

		//If value required is logic low clear chosen bit in PORTA and if not set bit in PORTA
		case PORTA_ID:
			if(value == LOGIC_LOW){
    1716:	8b 81       	ldd	r24, Y+3	; 0x03
    1718:	88 23       	and	r24, r24
    171a:	a9 f4       	brne	.+42     	; 0x1746 <GPIO_writePin+0x98>
				CLEAR_BIT(PORTA,pin_num);
    171c:	ab e3       	ldi	r26, 0x3B	; 59
    171e:	b0 e0       	ldi	r27, 0x00	; 0
    1720:	eb e3       	ldi	r30, 0x3B	; 59
    1722:	f0 e0       	ldi	r31, 0x00	; 0
    1724:	80 81       	ld	r24, Z
    1726:	48 2f       	mov	r20, r24
    1728:	8a 81       	ldd	r24, Y+2	; 0x02
    172a:	28 2f       	mov	r18, r24
    172c:	30 e0       	ldi	r19, 0x00	; 0
    172e:	81 e0       	ldi	r24, 0x01	; 1
    1730:	90 e0       	ldi	r25, 0x00	; 0
    1732:	02 2e       	mov	r0, r18
    1734:	02 c0       	rjmp	.+4      	; 0x173a <GPIO_writePin+0x8c>
    1736:	88 0f       	add	r24, r24
    1738:	99 1f       	adc	r25, r25
    173a:	0a 94       	dec	r0
    173c:	e2 f7       	brpl	.-8      	; 0x1736 <GPIO_writePin+0x88>
    173e:	80 95       	com	r24
    1740:	84 23       	and	r24, r20
    1742:	8c 93       	st	X, r24
    1744:	97 c0       	rjmp	.+302    	; 0x1874 <GPIO_writePin+0x1c6>
			}
			else{
				SET_BIT(PORTA,pin_num);
    1746:	ab e3       	ldi	r26, 0x3B	; 59
    1748:	b0 e0       	ldi	r27, 0x00	; 0
    174a:	eb e3       	ldi	r30, 0x3B	; 59
    174c:	f0 e0       	ldi	r31, 0x00	; 0
    174e:	80 81       	ld	r24, Z
    1750:	48 2f       	mov	r20, r24
    1752:	8a 81       	ldd	r24, Y+2	; 0x02
    1754:	28 2f       	mov	r18, r24
    1756:	30 e0       	ldi	r19, 0x00	; 0
    1758:	81 e0       	ldi	r24, 0x01	; 1
    175a:	90 e0       	ldi	r25, 0x00	; 0
    175c:	02 2e       	mov	r0, r18
    175e:	02 c0       	rjmp	.+4      	; 0x1764 <GPIO_writePin+0xb6>
    1760:	88 0f       	add	r24, r24
    1762:	99 1f       	adc	r25, r25
    1764:	0a 94       	dec	r0
    1766:	e2 f7       	brpl	.-8      	; 0x1760 <GPIO_writePin+0xb2>
    1768:	84 2b       	or	r24, r20
    176a:	8c 93       	st	X, r24
    176c:	83 c0       	rjmp	.+262    	; 0x1874 <GPIO_writePin+0x1c6>
			}
			break;

			//If value required is logic low clear chosen bit in PORTB and if not set bit in PORTB
		case PORTB_ID:
			if(value == LOGIC_LOW){
    176e:	8b 81       	ldd	r24, Y+3	; 0x03
    1770:	88 23       	and	r24, r24
    1772:	a9 f4       	brne	.+42     	; 0x179e <GPIO_writePin+0xf0>
				CLEAR_BIT(PORTB,pin_num);
    1774:	a8 e3       	ldi	r26, 0x38	; 56
    1776:	b0 e0       	ldi	r27, 0x00	; 0
    1778:	e8 e3       	ldi	r30, 0x38	; 56
    177a:	f0 e0       	ldi	r31, 0x00	; 0
    177c:	80 81       	ld	r24, Z
    177e:	48 2f       	mov	r20, r24
    1780:	8a 81       	ldd	r24, Y+2	; 0x02
    1782:	28 2f       	mov	r18, r24
    1784:	30 e0       	ldi	r19, 0x00	; 0
    1786:	81 e0       	ldi	r24, 0x01	; 1
    1788:	90 e0       	ldi	r25, 0x00	; 0
    178a:	02 2e       	mov	r0, r18
    178c:	02 c0       	rjmp	.+4      	; 0x1792 <GPIO_writePin+0xe4>
    178e:	88 0f       	add	r24, r24
    1790:	99 1f       	adc	r25, r25
    1792:	0a 94       	dec	r0
    1794:	e2 f7       	brpl	.-8      	; 0x178e <GPIO_writePin+0xe0>
    1796:	80 95       	com	r24
    1798:	84 23       	and	r24, r20
    179a:	8c 93       	st	X, r24
    179c:	6b c0       	rjmp	.+214    	; 0x1874 <GPIO_writePin+0x1c6>
			}
			else{
				SET_BIT(PORTB,pin_num);
    179e:	a8 e3       	ldi	r26, 0x38	; 56
    17a0:	b0 e0       	ldi	r27, 0x00	; 0
    17a2:	e8 e3       	ldi	r30, 0x38	; 56
    17a4:	f0 e0       	ldi	r31, 0x00	; 0
    17a6:	80 81       	ld	r24, Z
    17a8:	48 2f       	mov	r20, r24
    17aa:	8a 81       	ldd	r24, Y+2	; 0x02
    17ac:	28 2f       	mov	r18, r24
    17ae:	30 e0       	ldi	r19, 0x00	; 0
    17b0:	81 e0       	ldi	r24, 0x01	; 1
    17b2:	90 e0       	ldi	r25, 0x00	; 0
    17b4:	02 2e       	mov	r0, r18
    17b6:	02 c0       	rjmp	.+4      	; 0x17bc <GPIO_writePin+0x10e>
    17b8:	88 0f       	add	r24, r24
    17ba:	99 1f       	adc	r25, r25
    17bc:	0a 94       	dec	r0
    17be:	e2 f7       	brpl	.-8      	; 0x17b8 <GPIO_writePin+0x10a>
    17c0:	84 2b       	or	r24, r20
    17c2:	8c 93       	st	X, r24
    17c4:	57 c0       	rjmp	.+174    	; 0x1874 <GPIO_writePin+0x1c6>
			}
			break;

			//If value required is logic low clear chosen bit in PORTC and if not set bit in PORTC
		case PORTC_ID:
			if(value == LOGIC_LOW){
    17c6:	8b 81       	ldd	r24, Y+3	; 0x03
    17c8:	88 23       	and	r24, r24
    17ca:	a9 f4       	brne	.+42     	; 0x17f6 <GPIO_writePin+0x148>
				CLEAR_BIT(PORTC,pin_num);
    17cc:	a5 e3       	ldi	r26, 0x35	; 53
    17ce:	b0 e0       	ldi	r27, 0x00	; 0
    17d0:	e5 e3       	ldi	r30, 0x35	; 53
    17d2:	f0 e0       	ldi	r31, 0x00	; 0
    17d4:	80 81       	ld	r24, Z
    17d6:	48 2f       	mov	r20, r24
    17d8:	8a 81       	ldd	r24, Y+2	; 0x02
    17da:	28 2f       	mov	r18, r24
    17dc:	30 e0       	ldi	r19, 0x00	; 0
    17de:	81 e0       	ldi	r24, 0x01	; 1
    17e0:	90 e0       	ldi	r25, 0x00	; 0
    17e2:	02 2e       	mov	r0, r18
    17e4:	02 c0       	rjmp	.+4      	; 0x17ea <GPIO_writePin+0x13c>
    17e6:	88 0f       	add	r24, r24
    17e8:	99 1f       	adc	r25, r25
    17ea:	0a 94       	dec	r0
    17ec:	e2 f7       	brpl	.-8      	; 0x17e6 <GPIO_writePin+0x138>
    17ee:	80 95       	com	r24
    17f0:	84 23       	and	r24, r20
    17f2:	8c 93       	st	X, r24
    17f4:	3f c0       	rjmp	.+126    	; 0x1874 <GPIO_writePin+0x1c6>
			}
			else{
				SET_BIT(PORTC,pin_num);
    17f6:	a5 e3       	ldi	r26, 0x35	; 53
    17f8:	b0 e0       	ldi	r27, 0x00	; 0
    17fa:	e5 e3       	ldi	r30, 0x35	; 53
    17fc:	f0 e0       	ldi	r31, 0x00	; 0
    17fe:	80 81       	ld	r24, Z
    1800:	48 2f       	mov	r20, r24
    1802:	8a 81       	ldd	r24, Y+2	; 0x02
    1804:	28 2f       	mov	r18, r24
    1806:	30 e0       	ldi	r19, 0x00	; 0
    1808:	81 e0       	ldi	r24, 0x01	; 1
    180a:	90 e0       	ldi	r25, 0x00	; 0
    180c:	02 2e       	mov	r0, r18
    180e:	02 c0       	rjmp	.+4      	; 0x1814 <GPIO_writePin+0x166>
    1810:	88 0f       	add	r24, r24
    1812:	99 1f       	adc	r25, r25
    1814:	0a 94       	dec	r0
    1816:	e2 f7       	brpl	.-8      	; 0x1810 <GPIO_writePin+0x162>
    1818:	84 2b       	or	r24, r20
    181a:	8c 93       	st	X, r24
    181c:	2b c0       	rjmp	.+86     	; 0x1874 <GPIO_writePin+0x1c6>
			}
			break;

			//If value required is logic low clear chosen bit in PORTD and if not set bit in PORTD
		case PORTD_ID:
			if(value == LOGIC_LOW){
    181e:	8b 81       	ldd	r24, Y+3	; 0x03
    1820:	88 23       	and	r24, r24
    1822:	a9 f4       	brne	.+42     	; 0x184e <GPIO_writePin+0x1a0>
				CLEAR_BIT(PORTD,pin_num);
    1824:	a2 e3       	ldi	r26, 0x32	; 50
    1826:	b0 e0       	ldi	r27, 0x00	; 0
    1828:	e2 e3       	ldi	r30, 0x32	; 50
    182a:	f0 e0       	ldi	r31, 0x00	; 0
    182c:	80 81       	ld	r24, Z
    182e:	48 2f       	mov	r20, r24
    1830:	8a 81       	ldd	r24, Y+2	; 0x02
    1832:	28 2f       	mov	r18, r24
    1834:	30 e0       	ldi	r19, 0x00	; 0
    1836:	81 e0       	ldi	r24, 0x01	; 1
    1838:	90 e0       	ldi	r25, 0x00	; 0
    183a:	02 2e       	mov	r0, r18
    183c:	02 c0       	rjmp	.+4      	; 0x1842 <GPIO_writePin+0x194>
    183e:	88 0f       	add	r24, r24
    1840:	99 1f       	adc	r25, r25
    1842:	0a 94       	dec	r0
    1844:	e2 f7       	brpl	.-8      	; 0x183e <GPIO_writePin+0x190>
    1846:	80 95       	com	r24
    1848:	84 23       	and	r24, r20
    184a:	8c 93       	st	X, r24
    184c:	13 c0       	rjmp	.+38     	; 0x1874 <GPIO_writePin+0x1c6>
			}
			else{
				SET_BIT(PORTD,pin_num);
    184e:	a2 e3       	ldi	r26, 0x32	; 50
    1850:	b0 e0       	ldi	r27, 0x00	; 0
    1852:	e2 e3       	ldi	r30, 0x32	; 50
    1854:	f0 e0       	ldi	r31, 0x00	; 0
    1856:	80 81       	ld	r24, Z
    1858:	48 2f       	mov	r20, r24
    185a:	8a 81       	ldd	r24, Y+2	; 0x02
    185c:	28 2f       	mov	r18, r24
    185e:	30 e0       	ldi	r19, 0x00	; 0
    1860:	81 e0       	ldi	r24, 0x01	; 1
    1862:	90 e0       	ldi	r25, 0x00	; 0
    1864:	02 2e       	mov	r0, r18
    1866:	02 c0       	rjmp	.+4      	; 0x186c <GPIO_writePin+0x1be>
    1868:	88 0f       	add	r24, r24
    186a:	99 1f       	adc	r25, r25
    186c:	0a 94       	dec	r0
    186e:	e2 f7       	brpl	.-8      	; 0x1868 <GPIO_writePin+0x1ba>
    1870:	84 2b       	or	r24, r20
    1872:	8c 93       	st	X, r24

			break;

		}
	}
}
    1874:	0f 90       	pop	r0
    1876:	0f 90       	pop	r0
    1878:	0f 90       	pop	r0
    187a:	0f 90       	pop	r0
    187c:	0f 90       	pop	r0
    187e:	cf 91       	pop	r28
    1880:	df 91       	pop	r29
    1882:	08 95       	ret

00001884 <GPIO_readPin>:
 *                    If the input port number or pin number are not correct,
 *                    The function will return Logic Low.
 *[ARGUMENTS]		: unit8 (port_num, pin_num)
 *[RETURNS]			: unit8  "unsigned char"
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num){
    1884:	df 93       	push	r29
    1886:	cf 93       	push	r28
    1888:	00 d0       	rcall	.+0      	; 0x188a <GPIO_readPin+0x6>
    188a:	00 d0       	rcall	.+0      	; 0x188c <GPIO_readPin+0x8>
    188c:	0f 92       	push	r0
    188e:	cd b7       	in	r28, 0x3d	; 61
    1890:	de b7       	in	r29, 0x3e	; 62
    1892:	8a 83       	std	Y+2, r24	; 0x02
    1894:	6b 83       	std	Y+3, r22	; 0x03

	//set variable with logic low value (0)
	uint8 pin_value = LOGIC_LOW;
    1896:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1898:	8b 81       	ldd	r24, Y+3	; 0x03
    189a:	88 30       	cpi	r24, 0x08	; 8
    189c:	08 f0       	brcs	.+2      	; 0x18a0 <GPIO_readPin+0x1c>
    189e:	84 c0       	rjmp	.+264    	; 0x19a8 <GPIO_readPin+0x124>
    18a0:	8a 81       	ldd	r24, Y+2	; 0x02
    18a2:	84 30       	cpi	r24, 0x04	; 4
    18a4:	08 f0       	brcs	.+2      	; 0x18a8 <GPIO_readPin+0x24>
    18a6:	80 c0       	rjmp	.+256    	; 0x19a8 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		//switch on port number
		switch(port_num){
    18a8:	8a 81       	ldd	r24, Y+2	; 0x02
    18aa:	28 2f       	mov	r18, r24
    18ac:	30 e0       	ldi	r19, 0x00	; 0
    18ae:	3d 83       	std	Y+5, r19	; 0x05
    18b0:	2c 83       	std	Y+4, r18	; 0x04
    18b2:	4c 81       	ldd	r20, Y+4	; 0x04
    18b4:	5d 81       	ldd	r21, Y+5	; 0x05
    18b6:	41 30       	cpi	r20, 0x01	; 1
    18b8:	51 05       	cpc	r21, r1
    18ba:	79 f1       	breq	.+94     	; 0x191a <GPIO_readPin+0x96>
    18bc:	8c 81       	ldd	r24, Y+4	; 0x04
    18be:	9d 81       	ldd	r25, Y+5	; 0x05
    18c0:	82 30       	cpi	r24, 0x02	; 2
    18c2:	91 05       	cpc	r25, r1
    18c4:	34 f4       	brge	.+12     	; 0x18d2 <GPIO_readPin+0x4e>
    18c6:	2c 81       	ldd	r18, Y+4	; 0x04
    18c8:	3d 81       	ldd	r19, Y+5	; 0x05
    18ca:	21 15       	cp	r18, r1
    18cc:	31 05       	cpc	r19, r1
    18ce:	69 f0       	breq	.+26     	; 0x18ea <GPIO_readPin+0x66>
    18d0:	6b c0       	rjmp	.+214    	; 0x19a8 <GPIO_readPin+0x124>
    18d2:	4c 81       	ldd	r20, Y+4	; 0x04
    18d4:	5d 81       	ldd	r21, Y+5	; 0x05
    18d6:	42 30       	cpi	r20, 0x02	; 2
    18d8:	51 05       	cpc	r21, r1
    18da:	b9 f1       	breq	.+110    	; 0x194a <GPIO_readPin+0xc6>
    18dc:	8c 81       	ldd	r24, Y+4	; 0x04
    18de:	9d 81       	ldd	r25, Y+5	; 0x05
    18e0:	83 30       	cpi	r24, 0x03	; 3
    18e2:	91 05       	cpc	r25, r1
    18e4:	09 f4       	brne	.+2      	; 0x18e8 <GPIO_readPin+0x64>
    18e6:	49 c0       	rjmp	.+146    	; 0x197a <GPIO_readPin+0xf6>
    18e8:	5f c0       	rjmp	.+190    	; 0x19a8 <GPIO_readPin+0x124>

		//check on chosen pin number in PORTA ,If high return pin value = 1 else pin value = 0
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num)){
    18ea:	e9 e3       	ldi	r30, 0x39	; 57
    18ec:	f0 e0       	ldi	r31, 0x00	; 0
    18ee:	80 81       	ld	r24, Z
    18f0:	28 2f       	mov	r18, r24
    18f2:	30 e0       	ldi	r19, 0x00	; 0
    18f4:	8b 81       	ldd	r24, Y+3	; 0x03
    18f6:	88 2f       	mov	r24, r24
    18f8:	90 e0       	ldi	r25, 0x00	; 0
    18fa:	a9 01       	movw	r20, r18
    18fc:	02 c0       	rjmp	.+4      	; 0x1902 <GPIO_readPin+0x7e>
    18fe:	55 95       	asr	r21
    1900:	47 95       	ror	r20
    1902:	8a 95       	dec	r24
    1904:	e2 f7       	brpl	.-8      	; 0x18fe <GPIO_readPin+0x7a>
    1906:	ca 01       	movw	r24, r20
    1908:	81 70       	andi	r24, 0x01	; 1
    190a:	90 70       	andi	r25, 0x00	; 0
    190c:	88 23       	and	r24, r24
    190e:	19 f0       	breq	.+6      	; 0x1916 <GPIO_readPin+0x92>
				pin_value = LOGIC_HIGH;
    1910:	81 e0       	ldi	r24, 0x01	; 1
    1912:	89 83       	std	Y+1, r24	; 0x01
    1914:	49 c0       	rjmp	.+146    	; 0x19a8 <GPIO_readPin+0x124>
			}
			else{
				pin_value = LOGIC_LOW;
    1916:	19 82       	std	Y+1, r1	; 0x01
    1918:	47 c0       	rjmp	.+142    	; 0x19a8 <GPIO_readPin+0x124>
			}
			break;

			//check on chosen pin number in PORTB ,If high return pin value = 1 else pin value = 0
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num)){
    191a:	e6 e3       	ldi	r30, 0x36	; 54
    191c:	f0 e0       	ldi	r31, 0x00	; 0
    191e:	80 81       	ld	r24, Z
    1920:	28 2f       	mov	r18, r24
    1922:	30 e0       	ldi	r19, 0x00	; 0
    1924:	8b 81       	ldd	r24, Y+3	; 0x03
    1926:	88 2f       	mov	r24, r24
    1928:	90 e0       	ldi	r25, 0x00	; 0
    192a:	a9 01       	movw	r20, r18
    192c:	02 c0       	rjmp	.+4      	; 0x1932 <GPIO_readPin+0xae>
    192e:	55 95       	asr	r21
    1930:	47 95       	ror	r20
    1932:	8a 95       	dec	r24
    1934:	e2 f7       	brpl	.-8      	; 0x192e <GPIO_readPin+0xaa>
    1936:	ca 01       	movw	r24, r20
    1938:	81 70       	andi	r24, 0x01	; 1
    193a:	90 70       	andi	r25, 0x00	; 0
    193c:	88 23       	and	r24, r24
    193e:	19 f0       	breq	.+6      	; 0x1946 <GPIO_readPin+0xc2>
				pin_value = LOGIC_HIGH;
    1940:	81 e0       	ldi	r24, 0x01	; 1
    1942:	89 83       	std	Y+1, r24	; 0x01
    1944:	31 c0       	rjmp	.+98     	; 0x19a8 <GPIO_readPin+0x124>
			}
			else{
				pin_value = LOGIC_LOW;
    1946:	19 82       	std	Y+1, r1	; 0x01
    1948:	2f c0       	rjmp	.+94     	; 0x19a8 <GPIO_readPin+0x124>
			}
			break;

			//check on chosen pin number in PORTC ,If high return pin value = 1 else pin value = 0
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num)){
    194a:	e3 e3       	ldi	r30, 0x33	; 51
    194c:	f0 e0       	ldi	r31, 0x00	; 0
    194e:	80 81       	ld	r24, Z
    1950:	28 2f       	mov	r18, r24
    1952:	30 e0       	ldi	r19, 0x00	; 0
    1954:	8b 81       	ldd	r24, Y+3	; 0x03
    1956:	88 2f       	mov	r24, r24
    1958:	90 e0       	ldi	r25, 0x00	; 0
    195a:	a9 01       	movw	r20, r18
    195c:	02 c0       	rjmp	.+4      	; 0x1962 <GPIO_readPin+0xde>
    195e:	55 95       	asr	r21
    1960:	47 95       	ror	r20
    1962:	8a 95       	dec	r24
    1964:	e2 f7       	brpl	.-8      	; 0x195e <GPIO_readPin+0xda>
    1966:	ca 01       	movw	r24, r20
    1968:	81 70       	andi	r24, 0x01	; 1
    196a:	90 70       	andi	r25, 0x00	; 0
    196c:	88 23       	and	r24, r24
    196e:	19 f0       	breq	.+6      	; 0x1976 <GPIO_readPin+0xf2>
				pin_value = LOGIC_HIGH;
    1970:	81 e0       	ldi	r24, 0x01	; 1
    1972:	89 83       	std	Y+1, r24	; 0x01
    1974:	19 c0       	rjmp	.+50     	; 0x19a8 <GPIO_readPin+0x124>
			}
			else{
				pin_value = LOGIC_LOW;
    1976:	19 82       	std	Y+1, r1	; 0x01
    1978:	17 c0       	rjmp	.+46     	; 0x19a8 <GPIO_readPin+0x124>
			}
			break;

			//check on chosen pin number in PORTD ,If high return pin value = 1 else pin value = 0
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num)){
    197a:	e0 e3       	ldi	r30, 0x30	; 48
    197c:	f0 e0       	ldi	r31, 0x00	; 0
    197e:	80 81       	ld	r24, Z
    1980:	28 2f       	mov	r18, r24
    1982:	30 e0       	ldi	r19, 0x00	; 0
    1984:	8b 81       	ldd	r24, Y+3	; 0x03
    1986:	88 2f       	mov	r24, r24
    1988:	90 e0       	ldi	r25, 0x00	; 0
    198a:	a9 01       	movw	r20, r18
    198c:	02 c0       	rjmp	.+4      	; 0x1992 <GPIO_readPin+0x10e>
    198e:	55 95       	asr	r21
    1990:	47 95       	ror	r20
    1992:	8a 95       	dec	r24
    1994:	e2 f7       	brpl	.-8      	; 0x198e <GPIO_readPin+0x10a>
    1996:	ca 01       	movw	r24, r20
    1998:	81 70       	andi	r24, 0x01	; 1
    199a:	90 70       	andi	r25, 0x00	; 0
    199c:	88 23       	and	r24, r24
    199e:	19 f0       	breq	.+6      	; 0x19a6 <GPIO_readPin+0x122>
				pin_value = LOGIC_HIGH;
    19a0:	81 e0       	ldi	r24, 0x01	; 1
    19a2:	89 83       	std	Y+1, r24	; 0x01
    19a4:	01 c0       	rjmp	.+2      	; 0x19a8 <GPIO_readPin+0x124>
			}
			else{
				pin_value = LOGIC_LOW;
    19a6:	19 82       	std	Y+1, r1	; 0x01
			}

			break;
		}
	}
	return pin_value;
    19a8:	89 81       	ldd	r24, Y+1	; 0x01
}
    19aa:	0f 90       	pop	r0
    19ac:	0f 90       	pop	r0
    19ae:	0f 90       	pop	r0
    19b0:	0f 90       	pop	r0
    19b2:	0f 90       	pop	r0
    19b4:	cf 91       	pop	r28
    19b6:	df 91       	pop	r29
    19b8:	08 95       	ret

000019ba <GPIO_setupPortDirection>:
 *                    If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 *                    If the input port number is not correct, The function will not handle the request.
 *[ARGUMENTS]		: unit8 (port_num, direction)
 *[RETURNS]			: void
 */
void GPIO_setupPortDirection(uint8 port_num, uint8 direction){
    19ba:	df 93       	push	r29
    19bc:	cf 93       	push	r28
    19be:	00 d0       	rcall	.+0      	; 0x19c0 <GPIO_setupPortDirection+0x6>
    19c0:	00 d0       	rcall	.+0      	; 0x19c2 <GPIO_setupPortDirection+0x8>
    19c2:	cd b7       	in	r28, 0x3d	; 61
    19c4:	de b7       	in	r29, 0x3e	; 62
    19c6:	89 83       	std	Y+1, r24	; 0x01
    19c8:	6a 83       	std	Y+2, r22	; 0x02

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    19ca:	89 81       	ldd	r24, Y+1	; 0x01
    19cc:	84 30       	cpi	r24, 0x04	; 4
    19ce:	90 f5       	brcc	.+100    	; 0x1a34 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		//switch on port number
		switch(port_num){
    19d0:	89 81       	ldd	r24, Y+1	; 0x01
    19d2:	28 2f       	mov	r18, r24
    19d4:	30 e0       	ldi	r19, 0x00	; 0
    19d6:	3c 83       	std	Y+4, r19	; 0x04
    19d8:	2b 83       	std	Y+3, r18	; 0x03
    19da:	8b 81       	ldd	r24, Y+3	; 0x03
    19dc:	9c 81       	ldd	r25, Y+4	; 0x04
    19de:	81 30       	cpi	r24, 0x01	; 1
    19e0:	91 05       	cpc	r25, r1
    19e2:	d1 f0       	breq	.+52     	; 0x1a18 <GPIO_setupPortDirection+0x5e>
    19e4:	2b 81       	ldd	r18, Y+3	; 0x03
    19e6:	3c 81       	ldd	r19, Y+4	; 0x04
    19e8:	22 30       	cpi	r18, 0x02	; 2
    19ea:	31 05       	cpc	r19, r1
    19ec:	2c f4       	brge	.+10     	; 0x19f8 <GPIO_setupPortDirection+0x3e>
    19ee:	8b 81       	ldd	r24, Y+3	; 0x03
    19f0:	9c 81       	ldd	r25, Y+4	; 0x04
    19f2:	00 97       	sbiw	r24, 0x00	; 0
    19f4:	61 f0       	breq	.+24     	; 0x1a0e <GPIO_setupPortDirection+0x54>
    19f6:	1e c0       	rjmp	.+60     	; 0x1a34 <GPIO_setupPortDirection+0x7a>
    19f8:	2b 81       	ldd	r18, Y+3	; 0x03
    19fa:	3c 81       	ldd	r19, Y+4	; 0x04
    19fc:	22 30       	cpi	r18, 0x02	; 2
    19fe:	31 05       	cpc	r19, r1
    1a00:	81 f0       	breq	.+32     	; 0x1a22 <GPIO_setupPortDirection+0x68>
    1a02:	8b 81       	ldd	r24, Y+3	; 0x03
    1a04:	9c 81       	ldd	r25, Y+4	; 0x04
    1a06:	83 30       	cpi	r24, 0x03	; 3
    1a08:	91 05       	cpc	r25, r1
    1a0a:	81 f0       	breq	.+32     	; 0x1a2c <GPIO_setupPortDirection+0x72>
    1a0c:	13 c0       	rjmp	.+38     	; 0x1a34 <GPIO_setupPortDirection+0x7a>

		//SET direction of PORTA directly from REG: DDRA
		case PORTA_ID:
			DDRA = direction;
    1a0e:	ea e3       	ldi	r30, 0x3A	; 58
    1a10:	f0 e0       	ldi	r31, 0x00	; 0
    1a12:	8a 81       	ldd	r24, Y+2	; 0x02
    1a14:	80 83       	st	Z, r24
    1a16:	0e c0       	rjmp	.+28     	; 0x1a34 <GPIO_setupPortDirection+0x7a>
			break;

			//SET direction of PORTB directly from REG: DDRB
		case PORTB_ID:
			DDRB = direction;
    1a18:	e7 e3       	ldi	r30, 0x37	; 55
    1a1a:	f0 e0       	ldi	r31, 0x00	; 0
    1a1c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a1e:	80 83       	st	Z, r24
    1a20:	09 c0       	rjmp	.+18     	; 0x1a34 <GPIO_setupPortDirection+0x7a>
			break;

			//SET direction of PORTC directly from REG: DDRC
		case PORTC_ID:
			DDRC = direction;
    1a22:	e4 e3       	ldi	r30, 0x34	; 52
    1a24:	f0 e0       	ldi	r31, 0x00	; 0
    1a26:	8a 81       	ldd	r24, Y+2	; 0x02
    1a28:	80 83       	st	Z, r24
    1a2a:	04 c0       	rjmp	.+8      	; 0x1a34 <GPIO_setupPortDirection+0x7a>
			break;

			//SET direction of PORTD directly from REG: DDRD
		case PORTD_ID:
			DDRD = direction;
    1a2c:	e1 e3       	ldi	r30, 0x31	; 49
    1a2e:	f0 e0       	ldi	r31, 0x00	; 0
    1a30:	8a 81       	ldd	r24, Y+2	; 0x02
    1a32:	80 83       	st	Z, r24
			break;

		}
	}
}
    1a34:	0f 90       	pop	r0
    1a36:	0f 90       	pop	r0
    1a38:	0f 90       	pop	r0
    1a3a:	0f 90       	pop	r0
    1a3c:	cf 91       	pop	r28
    1a3e:	df 91       	pop	r29
    1a40:	08 95       	ret

00001a42 <GPIO_writePort>:
 *                    If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 *                    If the input port number is not correct, The function will not handle the request.
 *[ARGUMENTS]		: unit8 (port_num, value)
 *[RETURNS]			: void
 */
void GPIO_writePort(uint8 port_num, uint8 value){
    1a42:	df 93       	push	r29
    1a44:	cf 93       	push	r28
    1a46:	00 d0       	rcall	.+0      	; 0x1a48 <GPIO_writePort+0x6>
    1a48:	00 d0       	rcall	.+0      	; 0x1a4a <GPIO_writePort+0x8>
    1a4a:	cd b7       	in	r28, 0x3d	; 61
    1a4c:	de b7       	in	r29, 0x3e	; 62
    1a4e:	89 83       	std	Y+1, r24	; 0x01
    1a50:	6a 83       	std	Y+2, r22	; 0x02

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1a52:	89 81       	ldd	r24, Y+1	; 0x01
    1a54:	84 30       	cpi	r24, 0x04	; 4
    1a56:	90 f5       	brcc	.+100    	; 0x1abc <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		//switch on port number
		switch(port_num){
    1a58:	89 81       	ldd	r24, Y+1	; 0x01
    1a5a:	28 2f       	mov	r18, r24
    1a5c:	30 e0       	ldi	r19, 0x00	; 0
    1a5e:	3c 83       	std	Y+4, r19	; 0x04
    1a60:	2b 83       	std	Y+3, r18	; 0x03
    1a62:	8b 81       	ldd	r24, Y+3	; 0x03
    1a64:	9c 81       	ldd	r25, Y+4	; 0x04
    1a66:	81 30       	cpi	r24, 0x01	; 1
    1a68:	91 05       	cpc	r25, r1
    1a6a:	d1 f0       	breq	.+52     	; 0x1aa0 <GPIO_writePort+0x5e>
    1a6c:	2b 81       	ldd	r18, Y+3	; 0x03
    1a6e:	3c 81       	ldd	r19, Y+4	; 0x04
    1a70:	22 30       	cpi	r18, 0x02	; 2
    1a72:	31 05       	cpc	r19, r1
    1a74:	2c f4       	brge	.+10     	; 0x1a80 <GPIO_writePort+0x3e>
    1a76:	8b 81       	ldd	r24, Y+3	; 0x03
    1a78:	9c 81       	ldd	r25, Y+4	; 0x04
    1a7a:	00 97       	sbiw	r24, 0x00	; 0
    1a7c:	61 f0       	breq	.+24     	; 0x1a96 <GPIO_writePort+0x54>
    1a7e:	1e c0       	rjmp	.+60     	; 0x1abc <GPIO_writePort+0x7a>
    1a80:	2b 81       	ldd	r18, Y+3	; 0x03
    1a82:	3c 81       	ldd	r19, Y+4	; 0x04
    1a84:	22 30       	cpi	r18, 0x02	; 2
    1a86:	31 05       	cpc	r19, r1
    1a88:	81 f0       	breq	.+32     	; 0x1aaa <GPIO_writePort+0x68>
    1a8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a8c:	9c 81       	ldd	r25, Y+4	; 0x04
    1a8e:	83 30       	cpi	r24, 0x03	; 3
    1a90:	91 05       	cpc	r25, r1
    1a92:	81 f0       	breq	.+32     	; 0x1ab4 <GPIO_writePort+0x72>
    1a94:	13 c0       	rjmp	.+38     	; 0x1abc <GPIO_writePort+0x7a>

		//Write value in PORTA
		case PORTA_ID:
			PORTA = value;
    1a96:	eb e3       	ldi	r30, 0x3B	; 59
    1a98:	f0 e0       	ldi	r31, 0x00	; 0
    1a9a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a9c:	80 83       	st	Z, r24
    1a9e:	0e c0       	rjmp	.+28     	; 0x1abc <GPIO_writePort+0x7a>
			break;

			//Write value in PORTB
		case PORTB_ID:
			PORTB = value;
    1aa0:	e8 e3       	ldi	r30, 0x38	; 56
    1aa2:	f0 e0       	ldi	r31, 0x00	; 0
    1aa4:	8a 81       	ldd	r24, Y+2	; 0x02
    1aa6:	80 83       	st	Z, r24
    1aa8:	09 c0       	rjmp	.+18     	; 0x1abc <GPIO_writePort+0x7a>
			break;

			//Write value in PORTC
		case PORTC_ID:
			PORTC = value;
    1aaa:	e5 e3       	ldi	r30, 0x35	; 53
    1aac:	f0 e0       	ldi	r31, 0x00	; 0
    1aae:	8a 81       	ldd	r24, Y+2	; 0x02
    1ab0:	80 83       	st	Z, r24
    1ab2:	04 c0       	rjmp	.+8      	; 0x1abc <GPIO_writePort+0x7a>
			break;

			//Write value in PORTD
		case PORTD_ID:
			PORTD = value;
    1ab4:	e2 e3       	ldi	r30, 0x32	; 50
    1ab6:	f0 e0       	ldi	r31, 0x00	; 0
    1ab8:	8a 81       	ldd	r24, Y+2	; 0x02
    1aba:	80 83       	st	Z, r24
			break;

		}
	}

}
    1abc:	0f 90       	pop	r0
    1abe:	0f 90       	pop	r0
    1ac0:	0f 90       	pop	r0
    1ac2:	0f 90       	pop	r0
    1ac4:	cf 91       	pop	r28
    1ac6:	df 91       	pop	r29
    1ac8:	08 95       	ret

00001aca <GPIO_readPort>:
 *[DESCRIPTION]		: Read and return the value of the required port.
 *                    If the input port number is not correct, The function will return ZERO value.
 *[ARGUMENTS]		: unit8 (port_num)
 *[RETURNS]			: unit8  "unsigned char"
 */
uint8 GPIO_readPort(uint8 port_num){
    1aca:	df 93       	push	r29
    1acc:	cf 93       	push	r28
    1ace:	00 d0       	rcall	.+0      	; 0x1ad0 <GPIO_readPort+0x6>
    1ad0:	00 d0       	rcall	.+0      	; 0x1ad2 <GPIO_readPort+0x8>
    1ad2:	cd b7       	in	r28, 0x3d	; 61
    1ad4:	de b7       	in	r29, 0x3e	; 62
    1ad6:	8a 83       	std	Y+2, r24	; 0x02
	//set variable with logic low value (0)
	uint8 port_value = LOGIC_LOW;
    1ad8:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1ada:	8a 81       	ldd	r24, Y+2	; 0x02
    1adc:	84 30       	cpi	r24, 0x04	; 4
    1ade:	90 f5       	brcc	.+100    	; 0x1b44 <GPIO_readPort+0x7a>
	}
	else
	{

		//switch on port number
		switch(port_num){
    1ae0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ae2:	28 2f       	mov	r18, r24
    1ae4:	30 e0       	ldi	r19, 0x00	; 0
    1ae6:	3c 83       	std	Y+4, r19	; 0x04
    1ae8:	2b 83       	std	Y+3, r18	; 0x03
    1aea:	8b 81       	ldd	r24, Y+3	; 0x03
    1aec:	9c 81       	ldd	r25, Y+4	; 0x04
    1aee:	81 30       	cpi	r24, 0x01	; 1
    1af0:	91 05       	cpc	r25, r1
    1af2:	d1 f0       	breq	.+52     	; 0x1b28 <GPIO_readPort+0x5e>
    1af4:	2b 81       	ldd	r18, Y+3	; 0x03
    1af6:	3c 81       	ldd	r19, Y+4	; 0x04
    1af8:	22 30       	cpi	r18, 0x02	; 2
    1afa:	31 05       	cpc	r19, r1
    1afc:	2c f4       	brge	.+10     	; 0x1b08 <GPIO_readPort+0x3e>
    1afe:	8b 81       	ldd	r24, Y+3	; 0x03
    1b00:	9c 81       	ldd	r25, Y+4	; 0x04
    1b02:	00 97       	sbiw	r24, 0x00	; 0
    1b04:	61 f0       	breq	.+24     	; 0x1b1e <GPIO_readPort+0x54>
    1b06:	1e c0       	rjmp	.+60     	; 0x1b44 <GPIO_readPort+0x7a>
    1b08:	2b 81       	ldd	r18, Y+3	; 0x03
    1b0a:	3c 81       	ldd	r19, Y+4	; 0x04
    1b0c:	22 30       	cpi	r18, 0x02	; 2
    1b0e:	31 05       	cpc	r19, r1
    1b10:	81 f0       	breq	.+32     	; 0x1b32 <GPIO_readPort+0x68>
    1b12:	8b 81       	ldd	r24, Y+3	; 0x03
    1b14:	9c 81       	ldd	r25, Y+4	; 0x04
    1b16:	83 30       	cpi	r24, 0x03	; 3
    1b18:	91 05       	cpc	r25, r1
    1b1a:	81 f0       	breq	.+32     	; 0x1b3c <GPIO_readPort+0x72>
    1b1c:	13 c0       	rjmp	.+38     	; 0x1b44 <GPIO_readPort+0x7a>

		//check on PORTA value from PINA REG.
		case PORTA_ID:
			port_value = PINA;
    1b1e:	e9 e3       	ldi	r30, 0x39	; 57
    1b20:	f0 e0       	ldi	r31, 0x00	; 0
    1b22:	80 81       	ld	r24, Z
    1b24:	89 83       	std	Y+1, r24	; 0x01
    1b26:	0e c0       	rjmp	.+28     	; 0x1b44 <GPIO_readPort+0x7a>
			break;

			//check on PORTB value from PINB REG.
		case PORTB_ID:
			port_value = PINB;
    1b28:	e6 e3       	ldi	r30, 0x36	; 54
    1b2a:	f0 e0       	ldi	r31, 0x00	; 0
    1b2c:	80 81       	ld	r24, Z
    1b2e:	89 83       	std	Y+1, r24	; 0x01
    1b30:	09 c0       	rjmp	.+18     	; 0x1b44 <GPIO_readPort+0x7a>
			break;

			//check on PORTC value from PINC REG.
		case PORTC_ID:
			port_value = PINC;
    1b32:	e3 e3       	ldi	r30, 0x33	; 51
    1b34:	f0 e0       	ldi	r31, 0x00	; 0
    1b36:	80 81       	ld	r24, Z
    1b38:	89 83       	std	Y+1, r24	; 0x01
    1b3a:	04 c0       	rjmp	.+8      	; 0x1b44 <GPIO_readPort+0x7a>
			break;

			//check on PORTD value from PIND REG.
		case PORTD_ID:
			port_value = PIND;
    1b3c:	e0 e3       	ldi	r30, 0x30	; 48
    1b3e:	f0 e0       	ldi	r31, 0x00	; 0
    1b40:	80 81       	ld	r24, Z
    1b42:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}
	return port_value;
    1b44:	89 81       	ldd	r24, Y+1	; 0x01

}
    1b46:	0f 90       	pop	r0
    1b48:	0f 90       	pop	r0
    1b4a:	0f 90       	pop	r0
    1b4c:	0f 90       	pop	r0
    1b4e:	cf 91       	pop	r28
    1b50:	df 91       	pop	r29
    1b52:	08 95       	ret

00001b54 <PWM_Timer0_Start>:
/*[FUNCTION NAME]	: PWM_Timer0_Start
 *[DESCRIPTION]		: The function responsible for trigger the Timer0 with the PWM Mode.
 *[ARGUMENTS]		: The required duty cycle percentage of the generated PWM signal.
 *[RETURNS]			: void
 */
void PWM_Timer0_Start(uint8 duty_cycle){
    1b54:	df 93       	push	r29
    1b56:	cf 93       	push	r28
    1b58:	0f 92       	push	r0
    1b5a:	cd b7       	in	r28, 0x3d	; 61
    1b5c:	de b7       	in	r29, 0x3e	; 62
    1b5e:	89 83       	std	Y+1, r24	; 0x01
	 * 1. Fast PWM mode FOC0=0
	 * 2. Fast PWM Mode WGM01=1 & WGM00=1
	 * 3. Clear OC0 when match occurs (non inverted mode) COM00=0 & COM01=1
	 * 4. clock = F_CPU/8 CS00=0 CS01=1 CS02=0
	 */
	TCCR0 = (1<<WGM00) | (1<<WGM01) | (1<<COM01) | (1<<CS01);
    1b60:	e3 e5       	ldi	r30, 0x53	; 83
    1b62:	f0 e0       	ldi	r31, 0x00	; 0
    1b64:	8a e6       	ldi	r24, 0x6A	; 106
    1b66:	80 83       	st	Z, r24

	TCNT0 = 0;
    1b68:	e2 e5       	ldi	r30, 0x52	; 82
    1b6a:	f0 e0       	ldi	r31, 0x00	; 0
    1b6c:	10 82       	st	Z, r1

	/* Set Compare Value */
	OCR0  = (uint8)((uint16)(duty_cycle*255)/ 100);
    1b6e:	ec e5       	ldi	r30, 0x5C	; 92
    1b70:	f0 e0       	ldi	r31, 0x00	; 0
    1b72:	89 81       	ldd	r24, Y+1	; 0x01
    1b74:	48 2f       	mov	r20, r24
    1b76:	50 e0       	ldi	r21, 0x00	; 0
    1b78:	ca 01       	movw	r24, r20
    1b7a:	9c 01       	movw	r18, r24
    1b7c:	22 0f       	add	r18, r18
    1b7e:	33 1f       	adc	r19, r19
    1b80:	c9 01       	movw	r24, r18
    1b82:	96 95       	lsr	r25
    1b84:	98 2f       	mov	r25, r24
    1b86:	88 27       	eor	r24, r24
    1b88:	97 95       	ror	r25
    1b8a:	87 95       	ror	r24
    1b8c:	82 1b       	sub	r24, r18
    1b8e:	93 0b       	sbc	r25, r19
    1b90:	84 0f       	add	r24, r20
    1b92:	95 1f       	adc	r25, r21
    1b94:	24 e6       	ldi	r18, 0x64	; 100
    1b96:	30 e0       	ldi	r19, 0x00	; 0
    1b98:	b9 01       	movw	r22, r18
    1b9a:	0e 94 88 10 	call	0x2110	; 0x2110 <__udivmodhi4>
    1b9e:	cb 01       	movw	r24, r22
    1ba0:	80 83       	st	Z, r24

	/* Set OC0 -> PB3 as output pin*/
	GPIO_setupPinDirection(PORTB_ID, PIN3_ID, PIN_OUTPUT);
    1ba2:	81 e0       	ldi	r24, 0x01	; 1
    1ba4:	63 e0       	ldi	r22, 0x03	; 3
    1ba6:	41 e0       	ldi	r20, 0x01	; 1
    1ba8:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <GPIO_setupPinDirection>
}
    1bac:	0f 90       	pop	r0
    1bae:	cf 91       	pop	r28
    1bb0:	df 91       	pop	r29
    1bb2:	08 95       	ret

00001bb4 <__vector_7>:
/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

ISR(TIMER1_COMPA_vect)
{
    1bb4:	1f 92       	push	r1
    1bb6:	0f 92       	push	r0
    1bb8:	0f b6       	in	r0, 0x3f	; 63
    1bba:	0f 92       	push	r0
    1bbc:	11 24       	eor	r1, r1
    1bbe:	2f 93       	push	r18
    1bc0:	3f 93       	push	r19
    1bc2:	4f 93       	push	r20
    1bc4:	5f 93       	push	r21
    1bc6:	6f 93       	push	r22
    1bc8:	7f 93       	push	r23
    1bca:	8f 93       	push	r24
    1bcc:	9f 93       	push	r25
    1bce:	af 93       	push	r26
    1bd0:	bf 93       	push	r27
    1bd2:	ef 93       	push	r30
    1bd4:	ff 93       	push	r31
    1bd6:	df 93       	push	r29
    1bd8:	cf 93       	push	r28
    1bda:	cd b7       	in	r28, 0x3d	; 61
    1bdc:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR){
    1bde:	80 91 7f 00 	lds	r24, 0x007F
    1be2:	90 91 80 00 	lds	r25, 0x0080
    1be6:	00 97       	sbiw	r24, 0x00	; 0
    1be8:	29 f0       	breq	.+10     	; 0x1bf4 <__vector_7+0x40>
		/*call back function in main apllictaion after edge deteced*/
		(*g_callBackPtr)();
    1bea:	e0 91 7f 00 	lds	r30, 0x007F
    1bee:	f0 91 80 00 	lds	r31, 0x0080
    1bf2:	09 95       	icall
	}
}
    1bf4:	cf 91       	pop	r28
    1bf6:	df 91       	pop	r29
    1bf8:	ff 91       	pop	r31
    1bfa:	ef 91       	pop	r30
    1bfc:	bf 91       	pop	r27
    1bfe:	af 91       	pop	r26
    1c00:	9f 91       	pop	r25
    1c02:	8f 91       	pop	r24
    1c04:	7f 91       	pop	r23
    1c06:	6f 91       	pop	r22
    1c08:	5f 91       	pop	r21
    1c0a:	4f 91       	pop	r20
    1c0c:	3f 91       	pop	r19
    1c0e:	2f 91       	pop	r18
    1c10:	0f 90       	pop	r0
    1c12:	0f be       	out	0x3f, r0	; 63
    1c14:	0f 90       	pop	r0
    1c16:	1f 90       	pop	r1
    1c18:	18 95       	reti

00001c1a <__vector_9>:

ISR(TIMER1_OVF_vect)
{
    1c1a:	1f 92       	push	r1
    1c1c:	0f 92       	push	r0
    1c1e:	0f b6       	in	r0, 0x3f	; 63
    1c20:	0f 92       	push	r0
    1c22:	11 24       	eor	r1, r1
    1c24:	2f 93       	push	r18
    1c26:	3f 93       	push	r19
    1c28:	4f 93       	push	r20
    1c2a:	5f 93       	push	r21
    1c2c:	6f 93       	push	r22
    1c2e:	7f 93       	push	r23
    1c30:	8f 93       	push	r24
    1c32:	9f 93       	push	r25
    1c34:	af 93       	push	r26
    1c36:	bf 93       	push	r27
    1c38:	ef 93       	push	r30
    1c3a:	ff 93       	push	r31
    1c3c:	df 93       	push	r29
    1c3e:	cf 93       	push	r28
    1c40:	cd b7       	in	r28, 0x3d	; 61
    1c42:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR){
    1c44:	80 91 7f 00 	lds	r24, 0x007F
    1c48:	90 91 80 00 	lds	r25, 0x0080
    1c4c:	00 97       	sbiw	r24, 0x00	; 0
    1c4e:	29 f0       	breq	.+10     	; 0x1c5a <__vector_9+0x40>
		/*call back function in main apllictaion after edge deteced*/
		(*g_callBackPtr)();
    1c50:	e0 91 7f 00 	lds	r30, 0x007F
    1c54:	f0 91 80 00 	lds	r31, 0x0080
    1c58:	09 95       	icall
	}
}
    1c5a:	cf 91       	pop	r28
    1c5c:	df 91       	pop	r29
    1c5e:	ff 91       	pop	r31
    1c60:	ef 91       	pop	r30
    1c62:	bf 91       	pop	r27
    1c64:	af 91       	pop	r26
    1c66:	9f 91       	pop	r25
    1c68:	8f 91       	pop	r24
    1c6a:	7f 91       	pop	r23
    1c6c:	6f 91       	pop	r22
    1c6e:	5f 91       	pop	r21
    1c70:	4f 91       	pop	r20
    1c72:	3f 91       	pop	r19
    1c74:	2f 91       	pop	r18
    1c76:	0f 90       	pop	r0
    1c78:	0f be       	out	0x3f, r0	; 63
    1c7a:	0f 90       	pop	r0
    1c7c:	1f 90       	pop	r1
    1c7e:	18 95       	reti

00001c80 <Timer1_init>:
/*[FUNCTION NAME]	: Timer1_init
 *[DESCRIPTION]		: Function to initialize the Timer driver.
 *[ARGUMENTS]		: pointer to Structure of type Timer1_ConfigType
 *[RETURNS]			: void
 */
void Timer1_init(const Timer1_ConfigType * Config_Ptr){
    1c80:	df 93       	push	r29
    1c82:	cf 93       	push	r28
    1c84:	00 d0       	rcall	.+0      	; 0x1c86 <Timer1_init+0x6>
    1c86:	cd b7       	in	r28, 0x3d	; 61
    1c88:	de b7       	in	r29, 0x3e	; 62
    1c8a:	9a 83       	std	Y+2, r25	; 0x02
    1c8c:	89 83       	std	Y+1, r24	; 0x01

	/*first two bits is common in two modes 00 for both*/
	TCCR1A = (1 << FOC1A) | (Config_Ptr->mode & 3);
    1c8e:	af e4       	ldi	r26, 0x4F	; 79
    1c90:	b0 e0       	ldi	r27, 0x00	; 0
    1c92:	e9 81       	ldd	r30, Y+1	; 0x01
    1c94:	fa 81       	ldd	r31, Y+2	; 0x02
    1c96:	85 81       	ldd	r24, Z+5	; 0x05
    1c98:	83 70       	andi	r24, 0x03	; 3
    1c9a:	88 60       	ori	r24, 0x08	; 8
    1c9c:	8c 93       	st	X, r24
	if (Config_Ptr->mode == TIMER1_COMPARE_MODE_4) {
    1c9e:	e9 81       	ldd	r30, Y+1	; 0x01
    1ca0:	fa 81       	ldd	r31, Y+2	; 0x02
    1ca2:	85 81       	ldd	r24, Z+5	; 0x05
    1ca4:	84 30       	cpi	r24, 0x04	; 4
    1ca6:	29 f5       	brne	.+74     	; 0x1cf2 <Timer1_init+0x72>
		/* Set the Compare value to value in Configuration */
		OCR1A = Config_Ptr->compare_value;
    1ca8:	aa e4       	ldi	r26, 0x4A	; 74
    1caa:	b0 e0       	ldi	r27, 0x00	; 0
    1cac:	e9 81       	ldd	r30, Y+1	; 0x01
    1cae:	fa 81       	ldd	r31, Y+2	; 0x02
    1cb0:	82 81       	ldd	r24, Z+2	; 0x02
    1cb2:	93 81       	ldd	r25, Z+3	; 0x03
    1cb4:	11 96       	adiw	r26, 0x01	; 1
    1cb6:	9c 93       	st	X, r25
    1cb8:	8e 93       	st	-X, r24

		/* Enable Timer1 Compare A Interrupt */
		TIMSK |= (1 << OCIE1A);
    1cba:	a9 e5       	ldi	r26, 0x59	; 89
    1cbc:	b0 e0       	ldi	r27, 0x00	; 0
    1cbe:	e9 e5       	ldi	r30, 0x59	; 89
    1cc0:	f0 e0       	ldi	r31, 0x00	; 0
    1cc2:	80 81       	ld	r24, Z
    1cc4:	80 61       	ori	r24, 0x10	; 16
    1cc6:	8c 93       	st	X, r24
		TCCR1B = (Config_Ptr->prescaler) | ((Config_Ptr->mode >> 2) << 3);
    1cc8:	ae e4       	ldi	r26, 0x4E	; 78
    1cca:	b0 e0       	ldi	r27, 0x00	; 0
    1ccc:	e9 81       	ldd	r30, Y+1	; 0x01
    1cce:	fa 81       	ldd	r31, Y+2	; 0x02
    1cd0:	84 81       	ldd	r24, Z+4	; 0x04
    1cd2:	28 2f       	mov	r18, r24
    1cd4:	e9 81       	ldd	r30, Y+1	; 0x01
    1cd6:	fa 81       	ldd	r31, Y+2	; 0x02
    1cd8:	85 81       	ldd	r24, Z+5	; 0x05
    1cda:	86 95       	lsr	r24
    1cdc:	86 95       	lsr	r24
    1cde:	88 2f       	mov	r24, r24
    1ce0:	90 e0       	ldi	r25, 0x00	; 0
    1ce2:	88 0f       	add	r24, r24
    1ce4:	99 1f       	adc	r25, r25
    1ce6:	88 0f       	add	r24, r24
    1ce8:	99 1f       	adc	r25, r25
    1cea:	88 0f       	add	r24, r24
    1cec:	99 1f       	adc	r25, r25
    1cee:	82 2b       	or	r24, r18
    1cf0:	8c 93       	st	X, r24
	}
	if (Config_Ptr->mode == TIMER1_Normal_MODE) {
    1cf2:	e9 81       	ldd	r30, Y+1	; 0x01
    1cf4:	fa 81       	ldd	r31, Y+2	; 0x02
    1cf6:	85 81       	ldd	r24, Z+5	; 0x05
    1cf8:	88 23       	and	r24, r24
    1cfa:	69 f4       	brne	.+26     	; 0x1d16 <Timer1_init+0x96>
		/*Timer_ 1 Overflow  Interrupt Enable*/
		TIMSK |= (1<<TOIE1);
    1cfc:	a9 e5       	ldi	r26, 0x59	; 89
    1cfe:	b0 e0       	ldi	r27, 0x00	; 0
    1d00:	e9 e5       	ldi	r30, 0x59	; 89
    1d02:	f0 e0       	ldi	r31, 0x00	; 0
    1d04:	80 81       	ld	r24, Z
    1d06:	84 60       	ori	r24, 0x04	; 4
    1d08:	8c 93       	st	X, r24
		/*set prescaler chosen in Configuration*/
		TCCR1B = (Config_Ptr->prescaler);
    1d0a:	ae e4       	ldi	r26, 0x4E	; 78
    1d0c:	b0 e0       	ldi	r27, 0x00	; 0
    1d0e:	e9 81       	ldd	r30, Y+1	; 0x01
    1d10:	fa 81       	ldd	r31, Y+2	; 0x02
    1d12:	84 81       	ldd	r24, Z+4	; 0x04
    1d14:	8c 93       	st	X, r24
	}
	TCNT1 = Config_Ptr->initial_value;
    1d16:	ec e4       	ldi	r30, 0x4C	; 76
    1d18:	f0 e0       	ldi	r31, 0x00	; 0
    1d1a:	a9 81       	ldd	r26, Y+1	; 0x01
    1d1c:	ba 81       	ldd	r27, Y+2	; 0x02
    1d1e:	8d 91       	ld	r24, X+
    1d20:	9c 91       	ld	r25, X
    1d22:	11 97       	sbiw	r26, 0x01	; 1
    1d24:	91 83       	std	Z+1, r25	; 0x01
    1d26:	80 83       	st	Z, r24
}
    1d28:	0f 90       	pop	r0
    1d2a:	0f 90       	pop	r0
    1d2c:	cf 91       	pop	r28
    1d2e:	df 91       	pop	r29
    1d30:	08 95       	ret

00001d32 <Timer1_deInit>:
/*[FUNCTION NAME]	: Timer1_deInit
 *[DESCRIPTION]		: Function to disable the Timer1.
 *[ARGUMENTS]		: void
 *[RETURNS]			: void
 */
void Timer1_deInit(void){
    1d32:	df 93       	push	r29
    1d34:	cf 93       	push	r28
    1d36:	cd b7       	in	r28, 0x3d	; 61
    1d38:	de b7       	in	r29, 0x3e	; 62
	TCCR1A = 0;
    1d3a:	ef e4       	ldi	r30, 0x4F	; 79
    1d3c:	f0 e0       	ldi	r31, 0x00	; 0
    1d3e:	10 82       	st	Z, r1
	TCCR1B = 0;
    1d40:	ee e4       	ldi	r30, 0x4E	; 78
    1d42:	f0 e0       	ldi	r31, 0x00	; 0
    1d44:	10 82       	st	Z, r1
	TCNT1 = 0;
    1d46:	ec e4       	ldi	r30, 0x4C	; 76
    1d48:	f0 e0       	ldi	r31, 0x00	; 0
    1d4a:	11 82       	std	Z+1, r1	; 0x01
    1d4c:	10 82       	st	Z, r1
}
    1d4e:	cf 91       	pop	r28
    1d50:	df 91       	pop	r29
    1d52:	08 95       	ret

00001d54 <Timer1_setCallBack>:
/*[FUNCTION NAME]	: Timer1_setCallBack
 *[DESCRIPTION]		: Function to set the Call Back function address.
 *[ARGUMENTS]		: pointer to Call Back function.
 *[RETURNS]			: void
 */
void Timer1_setCallBack(void(*a_ptr)(void)){
    1d54:	df 93       	push	r29
    1d56:	cf 93       	push	r28
    1d58:	00 d0       	rcall	.+0      	; 0x1d5a <Timer1_setCallBack+0x6>
    1d5a:	cd b7       	in	r28, 0x3d	; 61
    1d5c:	de b7       	in	r29, 0x3e	; 62
    1d5e:	9a 83       	std	Y+2, r25	; 0x02
    1d60:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtr = a_ptr;
    1d62:	89 81       	ldd	r24, Y+1	; 0x01
    1d64:	9a 81       	ldd	r25, Y+2	; 0x02
    1d66:	90 93 80 00 	sts	0x0080, r25
    1d6a:	80 93 7f 00 	sts	0x007F, r24
}
    1d6e:	0f 90       	pop	r0
    1d70:	0f 90       	pop	r0
    1d72:	cf 91       	pop	r28
    1d74:	df 91       	pop	r29
    1d76:	08 95       	ret

00001d78 <TWI_init>:
/*[FUNCTION NAME]	: TWI_init
 *[DESCRIPTION]		: Initialize the I2C driver as required.
 *[ARGUMENTS]		: const TWI_ConfigType * Config_Ptr
 *[RETURNS]			: void
 */
void TWI_init(const TWI_ConfigType * Config_Ptr){
    1d78:	0f 93       	push	r16
    1d7a:	1f 93       	push	r17
    1d7c:	df 93       	push	r29
    1d7e:	cf 93       	push	r28
    1d80:	00 d0       	rcall	.+0      	; 0x1d82 <TWI_init+0xa>
    1d82:	cd b7       	in	r28, 0x3d	; 61
    1d84:	de b7       	in	r29, 0x3e	; 62
    1d86:	9a 83       	std	Y+2, r25	; 0x02
    1d88:	89 83       	std	Y+1, r24	; 0x01

	/* Bit Rate from configuration using zero pre-scaler TWPS=00 and F_CPU=8Mhz */
	/*TWBR = ((uint8)(uint16)((F_CPU/(Config_Ptr->bit_rate))- 16)* 2);*/
	TWBR = ((uint8) ((uint16)(F_CPU/((Config_Ptr->bit_rate)*2)))-8);
    1d8a:	00 e2       	ldi	r16, 0x20	; 32
    1d8c:	10 e0       	ldi	r17, 0x00	; 0
    1d8e:	e9 81       	ldd	r30, Y+1	; 0x01
    1d90:	fa 81       	ldd	r31, Y+2	; 0x02
    1d92:	81 81       	ldd	r24, Z+1	; 0x01
    1d94:	92 81       	ldd	r25, Z+2	; 0x02
    1d96:	a3 81       	ldd	r26, Z+3	; 0x03
    1d98:	b4 81       	ldd	r27, Z+4	; 0x04
    1d9a:	9c 01       	movw	r18, r24
    1d9c:	ad 01       	movw	r20, r26
    1d9e:	22 0f       	add	r18, r18
    1da0:	33 1f       	adc	r19, r19
    1da2:	44 1f       	adc	r20, r20
    1da4:	55 1f       	adc	r21, r21
    1da6:	80 e0       	ldi	r24, 0x00	; 0
    1da8:	92 e1       	ldi	r25, 0x12	; 18
    1daa:	aa e7       	ldi	r26, 0x7A	; 122
    1dac:	b0 e0       	ldi	r27, 0x00	; 0
    1dae:	bc 01       	movw	r22, r24
    1db0:	cd 01       	movw	r24, r26
    1db2:	0e 94 9c 10 	call	0x2138	; 0x2138 <__udivmodsi4>
    1db6:	da 01       	movw	r26, r20
    1db8:	c9 01       	movw	r24, r18
    1dba:	88 50       	subi	r24, 0x08	; 8
    1dbc:	f8 01       	movw	r30, r16
    1dbe:	80 83       	st	Z, r24
	TWSR = 0x00;
    1dc0:	e1 e2       	ldi	r30, 0x21	; 33
    1dc2:	f0 e0       	ldi	r31, 0x00	; 0
    1dc4:	10 82       	st	Z, r1

	/* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
	   General Call Recognition: Off */
	/* address from configuration*/
	TWAR = (Config_Ptr->address);
    1dc6:	a2 e2       	ldi	r26, 0x22	; 34
    1dc8:	b0 e0       	ldi	r27, 0x00	; 0
    1dca:	e9 81       	ldd	r30, Y+1	; 0x01
    1dcc:	fa 81       	ldd	r31, Y+2	; 0x02
    1dce:	80 81       	ld	r24, Z
    1dd0:	8c 93       	st	X, r24

	/* enable TWI */
	TWCR = (1<<TWEN);
    1dd2:	e6 e5       	ldi	r30, 0x56	; 86
    1dd4:	f0 e0       	ldi	r31, 0x00	; 0
    1dd6:	84 e0       	ldi	r24, 0x04	; 4
    1dd8:	80 83       	st	Z, r24
}
    1dda:	0f 90       	pop	r0
    1ddc:	0f 90       	pop	r0
    1dde:	cf 91       	pop	r28
    1de0:	df 91       	pop	r29
    1de2:	1f 91       	pop	r17
    1de4:	0f 91       	pop	r16
    1de6:	08 95       	ret

00001de8 <TWI_start>:
/*[FUNCTION NAME]	: TWI_start
 *[DESCRIPTION]		: send start bit to start Frame communication
 *[ARGUMENTS]		: void
 *[RETURNS]			: void
 */
void TWI_start(void){
    1de8:	df 93       	push	r29
    1dea:	cf 93       	push	r28
    1dec:	cd b7       	in	r28, 0x3d	; 61
    1dee:	de b7       	in	r29, 0x3e	; 62

	/* at beginning of each function clear flag by writing logical one
	 * enable I2C
	 * Set the start bit*/
	TWCR = (1<<TWEN) | (1<<TWSTA) | (1<<TWINT);
    1df0:	e6 e5       	ldi	r30, 0x56	; 86
    1df2:	f0 e0       	ldi	r31, 0x00	; 0
    1df4:	84 ea       	ldi	r24, 0xA4	; 164
    1df6:	80 83       	st	Z, r24

	/* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
	while(BIT_IS_CLEAR(TWCR,TWINT));
    1df8:	e6 e5       	ldi	r30, 0x56	; 86
    1dfa:	f0 e0       	ldi	r31, 0x00	; 0
    1dfc:	80 81       	ld	r24, Z
    1dfe:	88 23       	and	r24, r24
    1e00:	dc f7       	brge	.-10     	; 0x1df8 <TWI_start+0x10>
}
    1e02:	cf 91       	pop	r28
    1e04:	df 91       	pop	r29
    1e06:	08 95       	ret

00001e08 <TWI_stop>:
/*[FUNCTION NAME]	: TWI_stop
 *[DESCRIPTION]		: send stop bit to stop Frame communication
 *[ARGUMENTS]		: void
 *[RETURNS]			: void
 */
void TWI_stop(void){
    1e08:	df 93       	push	r29
    1e0a:	cf 93       	push	r28
    1e0c:	cd b7       	in	r28, 0x3d	; 61
    1e0e:	de b7       	in	r29, 0x3e	; 62

	/* at beginning of each function clear flag by writing logical one
	 * enable I2C
	 * Set the stop bit*/
	TWCR = (1<<TWEN) | (1<<TWSTO) | (1<<TWINT);
    1e10:	e6 e5       	ldi	r30, 0x56	; 86
    1e12:	f0 e0       	ldi	r31, 0x00	; 0
    1e14:	84 e9       	ldi	r24, 0x94	; 148
    1e16:	80 83       	st	Z, r24

	/*No polling as we end the frame no need to wait*/
}
    1e18:	cf 91       	pop	r28
    1e1a:	df 91       	pop	r29
    1e1c:	08 95       	ret

00001e1e <TWI_writeByte>:
/*[FUNCTION NAME]	: TWI_writeByte
 *[DESCRIPTION]		: send data "Byte" to receiver
 *[ARGUMENTS]		: uint8 data
 *[RETURNS]			: void
 */
void TWI_writeByte(uint8 data){
    1e1e:	df 93       	push	r29
    1e20:	cf 93       	push	r28
    1e22:	0f 92       	push	r0
    1e24:	cd b7       	in	r28, 0x3d	; 61
    1e26:	de b7       	in	r29, 0x3e	; 62
    1e28:	89 83       	std	Y+1, r24	; 0x01

	/* Put data On TWI data Register */
	TWDR = data;
    1e2a:	e3 e2       	ldi	r30, 0x23	; 35
    1e2c:	f0 e0       	ldi	r31, 0x00	; 0
    1e2e:	89 81       	ldd	r24, Y+1	; 0x01
    1e30:	80 83       	st	Z, r24
	/* at beginning of each function clear flag by writing logical one
	 * enable I2C */
	TWCR = (1<<TWEN) | (1<<TWINT);
    1e32:	e6 e5       	ldi	r30, 0x56	; 86
    1e34:	f0 e0       	ldi	r31, 0x00	; 0
    1e36:	84 e8       	ldi	r24, 0x84	; 132
    1e38:	80 83       	st	Z, r24

	/* Wait for TWINT flag set in TWCR Register (data bits is send successfully) */
	while(BIT_IS_CLEAR(TWCR,TWINT));
    1e3a:	e6 e5       	ldi	r30, 0x56	; 86
    1e3c:	f0 e0       	ldi	r31, 0x00	; 0
    1e3e:	80 81       	ld	r24, Z
    1e40:	88 23       	and	r24, r24
    1e42:	dc f7       	brge	.-10     	; 0x1e3a <TWI_writeByte+0x1c>
}
    1e44:	0f 90       	pop	r0
    1e46:	cf 91       	pop	r28
    1e48:	df 91       	pop	r29
    1e4a:	08 95       	ret

00001e4c <TWI_readByteWithACK>:
/*[FUNCTION NAME]	: TWI_readByteWithACK
 *[DESCRIPTION]		: Receive data From transmitter with ACK
 *[ARGUMENTS]		: void
 *[RETURNS]			: uint8
 */
uint8 TWI_readByteWithACK(void){
    1e4c:	df 93       	push	r29
    1e4e:	cf 93       	push	r28
    1e50:	cd b7       	in	r28, 0x3d	; 61
    1e52:	de b7       	in	r29, 0x3e	; 62

	/* at beginning of each function clear flag by writing logical one
	 * enable I2C
	 * Enable sending ACK after reading or receiving data TWEA=1 */
	TWCR = (1<<TWEN) | (1<<TWINT) | (1<<TWEA);
    1e54:	e6 e5       	ldi	r30, 0x56	; 86
    1e56:	f0 e0       	ldi	r31, 0x00	; 0
    1e58:	84 ec       	ldi	r24, 0xC4	; 196
    1e5a:	80 83       	st	Z, r24

	/* Wait for TWINT flag set in TWCR Register (data received is send successfully) */
	while(BIT_IS_CLEAR(TWCR,TWINT));
    1e5c:	e6 e5       	ldi	r30, 0x56	; 86
    1e5e:	f0 e0       	ldi	r31, 0x00	; 0
    1e60:	80 81       	ld	r24, Z
    1e62:	88 23       	and	r24, r24
    1e64:	dc f7       	brge	.-10     	; 0x1e5c <TWI_readByteWithACK+0x10>

	/*Read data*/
	return TWDR;
    1e66:	e3 e2       	ldi	r30, 0x23	; 35
    1e68:	f0 e0       	ldi	r31, 0x00	; 0
    1e6a:	80 81       	ld	r24, Z
}
    1e6c:	cf 91       	pop	r28
    1e6e:	df 91       	pop	r29
    1e70:	08 95       	ret

00001e72 <TWI_readByteWithNACK>:
 *[DESCRIPTION]		: Receive data From transmitter with NACK
 *		              informs transmitter to stop sending data
 *[ARGUMENTS]		: void
 *[RETURNS]			: uint8
 */
uint8 TWI_readByteWithNACK(void){
    1e72:	df 93       	push	r29
    1e74:	cf 93       	push	r28
    1e76:	cd b7       	in	r28, 0x3d	; 61
    1e78:	de b7       	in	r29, 0x3e	; 62

	/* at beginning of each function clear flag by writing logical one
	 * enable I2C8 */
	TWCR = (1<<TWEN) | (1<<TWINT);
    1e7a:	e6 e5       	ldi	r30, 0x56	; 86
    1e7c:	f0 e0       	ldi	r31, 0x00	; 0
    1e7e:	84 e8       	ldi	r24, 0x84	; 132
    1e80:	80 83       	st	Z, r24

	/* Wait for TWINT flag set in TWCR Register (data received is send successfully) */
	while(BIT_IS_CLEAR(TWCR,TWINT));
    1e82:	e6 e5       	ldi	r30, 0x56	; 86
    1e84:	f0 e0       	ldi	r31, 0x00	; 0
    1e86:	80 81       	ld	r24, Z
    1e88:	88 23       	and	r24, r24
    1e8a:	dc f7       	brge	.-10     	; 0x1e82 <TWI_readByteWithNACK+0x10>

	/*Read data*/
	return TWDR;
    1e8c:	e3 e2       	ldi	r30, 0x23	; 35
    1e8e:	f0 e0       	ldi	r31, 0x00	; 0
    1e90:	80 81       	ld	r24, Z

}
    1e92:	cf 91       	pop	r28
    1e94:	df 91       	pop	r29
    1e96:	08 95       	ret

00001e98 <TWI_getStatus>:
 *[DESCRIPTION]		: get five bits that reflect status of the TWI logic
 *		              and two-wire Serial Bus
 *[ARGUMENTS]		: void
 *[RETURNS]			: uint8
 */
uint8 TWI_getStatus(void){
    1e98:	df 93       	push	r29
    1e9a:	cf 93       	push	r28
    1e9c:	0f 92       	push	r0
    1e9e:	cd b7       	in	r28, 0x3d	; 61
    1ea0:	de b7       	in	r29, 0x3e	; 62
	uint8 status;
	/* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
	status = TWSR & 0xF8;
    1ea2:	e1 e2       	ldi	r30, 0x21	; 33
    1ea4:	f0 e0       	ldi	r31, 0x00	; 0
    1ea6:	80 81       	ld	r24, Z
    1ea8:	88 7f       	andi	r24, 0xF8	; 248
    1eaa:	89 83       	std	Y+1, r24	; 0x01
	return status;
    1eac:	89 81       	ldd	r24, Y+1	; 0x01
}
    1eae:	0f 90       	pop	r0
    1eb0:	cf 91       	pop	r28
    1eb2:	df 91       	pop	r29
    1eb4:	08 95       	ret

00001eb6 <UART_init>:
 *                    2. Enable the UART.
 *                    3. Setup the UART baud rate.
 *[ARGUMENTS]		: pointer to Structure of type UART_ConfigType
 *[RETURNS]			: void
 */
void UART_init(const UART_ConfigType * Config_Ptr){
    1eb6:	df 93       	push	r29
    1eb8:	cf 93       	push	r28
    1eba:	00 d0       	rcall	.+0      	; 0x1ebc <UART_init+0x6>
    1ebc:	00 d0       	rcall	.+0      	; 0x1ebe <UART_init+0x8>
    1ebe:	cd b7       	in	r28, 0x3d	; 61
    1ec0:	de b7       	in	r29, 0x3e	; 62
    1ec2:	9c 83       	std	Y+4, r25	; 0x04
    1ec4:	8b 83       	std	Y+3, r24	; 0x03

	uint16 ubrr_value = 0;
    1ec6:	1a 82       	std	Y+2, r1	; 0x02
    1ec8:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    1eca:	eb e2       	ldi	r30, 0x2B	; 43
    1ecc:	f0 e0       	ldi	r31, 0x00	; 0
    1ece:	82 e0       	ldi	r24, 0x02	; 2
    1ed0:	80 83       	st	Z, r24
	 * TXCIE = 0 Disable USART Tx Complete Interrupt Enable
	 * UDRIE = 0 Disable USART Data Register Empty Interrupt Enable
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 ***********************************************************************/
	UCSRB |= (1<<RXEN) | (1<<TXEN);
    1ed2:	aa e2       	ldi	r26, 0x2A	; 42
    1ed4:	b0 e0       	ldi	r27, 0x00	; 0
    1ed6:	ea e2       	ldi	r30, 0x2A	; 42
    1ed8:	f0 e0       	ldi	r31, 0x00	; 0
    1eda:	80 81       	ld	r24, Z
    1edc:	88 61       	ori	r24, 0x18	; 24
    1ede:	8c 93       	st	X, r24

	/*configure baud rate
	 * for 9 bit mode */
	if(Config_Ptr->bit_data == BIT_DATA_9_BITS){
    1ee0:	eb 81       	ldd	r30, Y+3	; 0x03
    1ee2:	fc 81       	ldd	r31, Y+4	; 0x04
    1ee4:	80 81       	ld	r24, Z
    1ee6:	87 30       	cpi	r24, 0x07	; 7
    1ee8:	79 f4       	brne	.+30     	; 0x1f08 <UART_init+0x52>
		UCSRB |= (1<<UCSZ2);
    1eea:	aa e2       	ldi	r26, 0x2A	; 42
    1eec:	b0 e0       	ldi	r27, 0x00	; 0
    1eee:	ea e2       	ldi	r30, 0x2A	; 42
    1ef0:	f0 e0       	ldi	r31, 0x00	; 0
    1ef2:	80 81       	ld	r24, Z
    1ef4:	84 60       	ori	r24, 0x04	; 4
    1ef6:	8c 93       	st	X, r24
		/* The URSEL must be one when writing to UCSRC */
		UCSRC |= (1<<URSEL) | (1<<UCSZ0) | (1<<UCSZ1);
    1ef8:	a0 e4       	ldi	r26, 0x40	; 64
    1efa:	b0 e0       	ldi	r27, 0x00	; 0
    1efc:	e0 e4       	ldi	r30, 0x40	; 64
    1efe:	f0 e0       	ldi	r31, 0x00	; 0
    1f00:	80 81       	ld	r24, Z
    1f02:	86 68       	ori	r24, 0x86	; 134
    1f04:	8c 93       	st	X, r24
    1f06:	17 c0       	rjmp	.+46     	; 0x1f36 <UART_init+0x80>
	}
	else{
		/*for 5 , 6 , 7 ,8 bit mode */
		UCSRC |= (1<<URSEL);
    1f08:	a0 e4       	ldi	r26, 0x40	; 64
    1f0a:	b0 e0       	ldi	r27, 0x00	; 0
    1f0c:	e0 e4       	ldi	r30, 0x40	; 64
    1f0e:	f0 e0       	ldi	r31, 0x00	; 0
    1f10:	80 81       	ld	r24, Z
    1f12:	80 68       	ori	r24, 0x80	; 128
    1f14:	8c 93       	st	X, r24
		UCSRC = (UCSRC & 0xF9) | ((Config_Ptr->bit_data)<<1);
    1f16:	a0 e4       	ldi	r26, 0x40	; 64
    1f18:	b0 e0       	ldi	r27, 0x00	; 0
    1f1a:	e0 e4       	ldi	r30, 0x40	; 64
    1f1c:	f0 e0       	ldi	r31, 0x00	; 0
    1f1e:	80 81       	ld	r24, Z
    1f20:	28 2f       	mov	r18, r24
    1f22:	29 7f       	andi	r18, 0xF9	; 249
    1f24:	eb 81       	ldd	r30, Y+3	; 0x03
    1f26:	fc 81       	ldd	r31, Y+4	; 0x04
    1f28:	80 81       	ld	r24, Z
    1f2a:	88 2f       	mov	r24, r24
    1f2c:	90 e0       	ldi	r25, 0x00	; 0
    1f2e:	88 0f       	add	r24, r24
    1f30:	99 1f       	adc	r25, r25
    1f32:	82 2b       	or	r24, r18
    1f34:	8c 93       	st	X, r24
	}

	/* choose parity and stop bit */
	UCSRC = (UCSRC & 0xCF ) | ((Config_Ptr->parity)<<4);
    1f36:	a0 e4       	ldi	r26, 0x40	; 64
    1f38:	b0 e0       	ldi	r27, 0x00	; 0
    1f3a:	e0 e4       	ldi	r30, 0x40	; 64
    1f3c:	f0 e0       	ldi	r31, 0x00	; 0
    1f3e:	80 81       	ld	r24, Z
    1f40:	28 2f       	mov	r18, r24
    1f42:	2f 7c       	andi	r18, 0xCF	; 207
    1f44:	eb 81       	ldd	r30, Y+3	; 0x03
    1f46:	fc 81       	ldd	r31, Y+4	; 0x04
    1f48:	81 81       	ldd	r24, Z+1	; 0x01
    1f4a:	88 2f       	mov	r24, r24
    1f4c:	90 e0       	ldi	r25, 0x00	; 0
    1f4e:	82 95       	swap	r24
    1f50:	92 95       	swap	r25
    1f52:	90 7f       	andi	r25, 0xF0	; 240
    1f54:	98 27       	eor	r25, r24
    1f56:	80 7f       	andi	r24, 0xF0	; 240
    1f58:	98 27       	eor	r25, r24
    1f5a:	82 2b       	or	r24, r18
    1f5c:	8c 93       	st	X, r24
	UCSRC = (UCSRC & 0xF7 ) | ((Config_Ptr->stop_bit)<<3);
    1f5e:	a0 e4       	ldi	r26, 0x40	; 64
    1f60:	b0 e0       	ldi	r27, 0x00	; 0
    1f62:	e0 e4       	ldi	r30, 0x40	; 64
    1f64:	f0 e0       	ldi	r31, 0x00	; 0
    1f66:	80 81       	ld	r24, Z
    1f68:	28 2f       	mov	r18, r24
    1f6a:	27 7f       	andi	r18, 0xF7	; 247
    1f6c:	eb 81       	ldd	r30, Y+3	; 0x03
    1f6e:	fc 81       	ldd	r31, Y+4	; 0x04
    1f70:	82 81       	ldd	r24, Z+2	; 0x02
    1f72:	88 2f       	mov	r24, r24
    1f74:	90 e0       	ldi	r25, 0x00	; 0
    1f76:	88 0f       	add	r24, r24
    1f78:	99 1f       	adc	r25, r25
    1f7a:	88 0f       	add	r24, r24
    1f7c:	99 1f       	adc	r25, r25
    1f7e:	88 0f       	add	r24, r24
    1f80:	99 1f       	adc	r25, r25
    1f82:	82 2b       	or	r24, r18
    1f84:	8c 93       	st	X, r24

	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (Config_Ptr->baud_rate * 8UL))) - 1);
    1f86:	eb 81       	ldd	r30, Y+3	; 0x03
    1f88:	fc 81       	ldd	r31, Y+4	; 0x04
    1f8a:	83 81       	ldd	r24, Z+3	; 0x03
    1f8c:	94 81       	ldd	r25, Z+4	; 0x04
    1f8e:	a5 81       	ldd	r26, Z+5	; 0x05
    1f90:	b6 81       	ldd	r27, Z+6	; 0x06
    1f92:	88 0f       	add	r24, r24
    1f94:	99 1f       	adc	r25, r25
    1f96:	aa 1f       	adc	r26, r26
    1f98:	bb 1f       	adc	r27, r27
    1f9a:	88 0f       	add	r24, r24
    1f9c:	99 1f       	adc	r25, r25
    1f9e:	aa 1f       	adc	r26, r26
    1fa0:	bb 1f       	adc	r27, r27
    1fa2:	88 0f       	add	r24, r24
    1fa4:	99 1f       	adc	r25, r25
    1fa6:	aa 1f       	adc	r26, r26
    1fa8:	bb 1f       	adc	r27, r27
    1faa:	9c 01       	movw	r18, r24
    1fac:	ad 01       	movw	r20, r26
    1fae:	80 e0       	ldi	r24, 0x00	; 0
    1fb0:	92 e1       	ldi	r25, 0x12	; 18
    1fb2:	aa e7       	ldi	r26, 0x7A	; 122
    1fb4:	b0 e0       	ldi	r27, 0x00	; 0
    1fb6:	bc 01       	movw	r22, r24
    1fb8:	cd 01       	movw	r24, r26
    1fba:	0e 94 9c 10 	call	0x2138	; 0x2138 <__udivmodsi4>
    1fbe:	da 01       	movw	r26, r20
    1fc0:	c9 01       	movw	r24, r18
    1fc2:	01 97       	sbiw	r24, 0x01	; 1
    1fc4:	9a 83       	std	Y+2, r25	; 0x02
    1fc6:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    1fc8:	e0 e4       	ldi	r30, 0x40	; 64
    1fca:	f0 e0       	ldi	r31, 0x00	; 0
    1fcc:	89 81       	ldd	r24, Y+1	; 0x01
    1fce:	9a 81       	ldd	r25, Y+2	; 0x02
    1fd0:	89 2f       	mov	r24, r25
    1fd2:	99 27       	eor	r25, r25
    1fd4:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    1fd6:	e9 e2       	ldi	r30, 0x29	; 41
    1fd8:	f0 e0       	ldi	r31, 0x00	; 0
    1fda:	89 81       	ldd	r24, Y+1	; 0x01
    1fdc:	80 83       	st	Z, r24

}
    1fde:	0f 90       	pop	r0
    1fe0:	0f 90       	pop	r0
    1fe2:	0f 90       	pop	r0
    1fe4:	0f 90       	pop	r0
    1fe6:	cf 91       	pop	r28
    1fe8:	df 91       	pop	r29
    1fea:	08 95       	ret

00001fec <UART_sendByte>:
/*[FUNCTION NAME]	: UART_sendByte
 *[DESCRIPTION]		: Functional responsible for send byte to another UART device.
 *[ARGUMENTS]		: uint8 data
 *[RETURNS]			: void
 */
void UART_sendByte(const uint8 data){
    1fec:	df 93       	push	r29
    1fee:	cf 93       	push	r28
    1ff0:	0f 92       	push	r0
    1ff2:	cd b7       	in	r28, 0x3d	; 61
    1ff4:	de b7       	in	r29, 0x3e	; 62
    1ff6:	89 83       	std	Y+1, r24	; 0x01

	while(BIT_IS_CLEAR(UCSRA,UDRE));
    1ff8:	eb e2       	ldi	r30, 0x2B	; 43
    1ffa:	f0 e0       	ldi	r31, 0x00	; 0
    1ffc:	80 81       	ld	r24, Z
    1ffe:	88 2f       	mov	r24, r24
    2000:	90 e0       	ldi	r25, 0x00	; 0
    2002:	80 72       	andi	r24, 0x20	; 32
    2004:	90 70       	andi	r25, 0x00	; 0
    2006:	00 97       	sbiw	r24, 0x00	; 0
    2008:	b9 f3       	breq	.-18     	; 0x1ff8 <UART_sendByte+0xc>
	UDR = data;
    200a:	ec e2       	ldi	r30, 0x2C	; 44
    200c:	f0 e0       	ldi	r31, 0x00	; 0
    200e:	89 81       	ldd	r24, Y+1	; 0x01
    2010:	80 83       	st	Z, r24
}
    2012:	0f 90       	pop	r0
    2014:	cf 91       	pop	r28
    2016:	df 91       	pop	r29
    2018:	08 95       	ret

0000201a <UART_recieveByte>:
/*[FUNCTION NAME]	: UART_sendByte
 *[DESCRIPTION]		: Functional responsible for receive byte from another UART device.
 *[ARGUMENTS]		: void
 *[RETURNS]			: uint8
 */
uint8 UART_recieveByte(){
    201a:	df 93       	push	r29
    201c:	cf 93       	push	r28
    201e:	cd b7       	in	r28, 0x3d	; 61
    2020:	de b7       	in	r29, 0x3e	; 62
	while(BIT_IS_CLEAR(UCSRA,RXCIE));
    2022:	eb e2       	ldi	r30, 0x2B	; 43
    2024:	f0 e0       	ldi	r31, 0x00	; 0
    2026:	80 81       	ld	r24, Z
    2028:	88 23       	and	r24, r24
    202a:	dc f7       	brge	.-10     	; 0x2022 <UART_recieveByte+0x8>
	return UDR;
    202c:	ec e2       	ldi	r30, 0x2C	; 44
    202e:	f0 e0       	ldi	r31, 0x00	; 0
    2030:	80 81       	ld	r24, Z
}
    2032:	cf 91       	pop	r28
    2034:	df 91       	pop	r29
    2036:	08 95       	ret

00002038 <UART_sendString>:
/*[FUNCTION NAME]	: UART_sendString
 *[DESCRIPTION]		: Send the required string through UART to the other UART device.
 *[ARGUMENTS]		: void
 *[RETURNS]			: void
 */
void UART_sendString(const uint8 *Str){
    2038:	df 93       	push	r29
    203a:	cf 93       	push	r28
    203c:	00 d0       	rcall	.+0      	; 0x203e <UART_sendString+0x6>
    203e:	0f 92       	push	r0
    2040:	cd b7       	in	r28, 0x3d	; 61
    2042:	de b7       	in	r29, 0x3e	; 62
    2044:	9b 83       	std	Y+3, r25	; 0x03
    2046:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i =0;
    2048:	19 82       	std	Y+1, r1	; 0x01
    204a:	0e c0       	rjmp	.+28     	; 0x2068 <UART_sendString+0x30>
	while(Str[i] != '\0'){
		UART_sendByte(Str[i]);
    204c:	89 81       	ldd	r24, Y+1	; 0x01
    204e:	28 2f       	mov	r18, r24
    2050:	30 e0       	ldi	r19, 0x00	; 0
    2052:	8a 81       	ldd	r24, Y+2	; 0x02
    2054:	9b 81       	ldd	r25, Y+3	; 0x03
    2056:	fc 01       	movw	r30, r24
    2058:	e2 0f       	add	r30, r18
    205a:	f3 1f       	adc	r31, r19
    205c:	80 81       	ld	r24, Z
    205e:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <UART_sendByte>
		i++;
    2062:	89 81       	ldd	r24, Y+1	; 0x01
    2064:	8f 5f       	subi	r24, 0xFF	; 255
    2066:	89 83       	std	Y+1, r24	; 0x01
 *[ARGUMENTS]		: void
 *[RETURNS]			: void
 */
void UART_sendString(const uint8 *Str){
	uint8 i =0;
	while(Str[i] != '\0'){
    2068:	89 81       	ldd	r24, Y+1	; 0x01
    206a:	28 2f       	mov	r18, r24
    206c:	30 e0       	ldi	r19, 0x00	; 0
    206e:	8a 81       	ldd	r24, Y+2	; 0x02
    2070:	9b 81       	ldd	r25, Y+3	; 0x03
    2072:	fc 01       	movw	r30, r24
    2074:	e2 0f       	add	r30, r18
    2076:	f3 1f       	adc	r31, r19
    2078:	80 81       	ld	r24, Z
    207a:	88 23       	and	r24, r24
    207c:	39 f7       	brne	.-50     	; 0x204c <UART_sendString+0x14>
		UART_sendByte(Str[i]);
		i++;
	}
}
    207e:	0f 90       	pop	r0
    2080:	0f 90       	pop	r0
    2082:	0f 90       	pop	r0
    2084:	cf 91       	pop	r28
    2086:	df 91       	pop	r29
    2088:	08 95       	ret

0000208a <UART_recieveString>:
/*[FUNCTION NAME]	: UART_sendString
 *[DESCRIPTION]		: Receive the required string until the '#' symbol through UART from the other UART device.
 *[ARGUMENTS]		: uint8 pointer to string
 *[RETURNS]			: void
 */
void UART_recieveString(uint8 *Str){
    208a:	0f 93       	push	r16
    208c:	1f 93       	push	r17
    208e:	df 93       	push	r29
    2090:	cf 93       	push	r28
    2092:	00 d0       	rcall	.+0      	; 0x2094 <UART_recieveString+0xa>
    2094:	0f 92       	push	r0
    2096:	cd b7       	in	r28, 0x3d	; 61
    2098:	de b7       	in	r29, 0x3e	; 62
    209a:	9b 83       	std	Y+3, r25	; 0x03
    209c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i =0;
    209e:	19 82       	std	Y+1, r1	; 0x01
	Str[i]= UART_recieveByte();
    20a0:	89 81       	ldd	r24, Y+1	; 0x01
    20a2:	28 2f       	mov	r18, r24
    20a4:	30 e0       	ldi	r19, 0x00	; 0
    20a6:	8a 81       	ldd	r24, Y+2	; 0x02
    20a8:	9b 81       	ldd	r25, Y+3	; 0x03
    20aa:	8c 01       	movw	r16, r24
    20ac:	02 0f       	add	r16, r18
    20ae:	13 1f       	adc	r17, r19
    20b0:	0e 94 0d 10 	call	0x201a	; 0x201a <UART_recieveByte>
    20b4:	f8 01       	movw	r30, r16
    20b6:	80 83       	st	Z, r24
    20b8:	0f c0       	rjmp	.+30     	; 0x20d8 <UART_recieveString+0x4e>
	while(Str[i] != '#'){
		i++;
    20ba:	89 81       	ldd	r24, Y+1	; 0x01
    20bc:	8f 5f       	subi	r24, 0xFF	; 255
    20be:	89 83       	std	Y+1, r24	; 0x01
		Str[i]= UART_recieveByte();
    20c0:	89 81       	ldd	r24, Y+1	; 0x01
    20c2:	28 2f       	mov	r18, r24
    20c4:	30 e0       	ldi	r19, 0x00	; 0
    20c6:	8a 81       	ldd	r24, Y+2	; 0x02
    20c8:	9b 81       	ldd	r25, Y+3	; 0x03
    20ca:	8c 01       	movw	r16, r24
    20cc:	02 0f       	add	r16, r18
    20ce:	13 1f       	adc	r17, r19
    20d0:	0e 94 0d 10 	call	0x201a	; 0x201a <UART_recieveByte>
    20d4:	f8 01       	movw	r30, r16
    20d6:	80 83       	st	Z, r24
 *[RETURNS]			: void
 */
void UART_recieveString(uint8 *Str){
	uint8 i =0;
	Str[i]= UART_recieveByte();
	while(Str[i] != '#'){
    20d8:	89 81       	ldd	r24, Y+1	; 0x01
    20da:	28 2f       	mov	r18, r24
    20dc:	30 e0       	ldi	r19, 0x00	; 0
    20de:	8a 81       	ldd	r24, Y+2	; 0x02
    20e0:	9b 81       	ldd	r25, Y+3	; 0x03
    20e2:	fc 01       	movw	r30, r24
    20e4:	e2 0f       	add	r30, r18
    20e6:	f3 1f       	adc	r31, r19
    20e8:	80 81       	ld	r24, Z
    20ea:	83 32       	cpi	r24, 0x23	; 35
    20ec:	31 f7       	brne	.-52     	; 0x20ba <UART_recieveString+0x30>
		i++;
		Str[i]= UART_recieveByte();
	}
	Str[i] = '\0';
    20ee:	89 81       	ldd	r24, Y+1	; 0x01
    20f0:	28 2f       	mov	r18, r24
    20f2:	30 e0       	ldi	r19, 0x00	; 0
    20f4:	8a 81       	ldd	r24, Y+2	; 0x02
    20f6:	9b 81       	ldd	r25, Y+3	; 0x03
    20f8:	fc 01       	movw	r30, r24
    20fa:	e2 0f       	add	r30, r18
    20fc:	f3 1f       	adc	r31, r19
    20fe:	10 82       	st	Z, r1
}
    2100:	0f 90       	pop	r0
    2102:	0f 90       	pop	r0
    2104:	0f 90       	pop	r0
    2106:	cf 91       	pop	r28
    2108:	df 91       	pop	r29
    210a:	1f 91       	pop	r17
    210c:	0f 91       	pop	r16
    210e:	08 95       	ret

00002110 <__udivmodhi4>:
    2110:	aa 1b       	sub	r26, r26
    2112:	bb 1b       	sub	r27, r27
    2114:	51 e1       	ldi	r21, 0x11	; 17
    2116:	07 c0       	rjmp	.+14     	; 0x2126 <__udivmodhi4_ep>

00002118 <__udivmodhi4_loop>:
    2118:	aa 1f       	adc	r26, r26
    211a:	bb 1f       	adc	r27, r27
    211c:	a6 17       	cp	r26, r22
    211e:	b7 07       	cpc	r27, r23
    2120:	10 f0       	brcs	.+4      	; 0x2126 <__udivmodhi4_ep>
    2122:	a6 1b       	sub	r26, r22
    2124:	b7 0b       	sbc	r27, r23

00002126 <__udivmodhi4_ep>:
    2126:	88 1f       	adc	r24, r24
    2128:	99 1f       	adc	r25, r25
    212a:	5a 95       	dec	r21
    212c:	a9 f7       	brne	.-22     	; 0x2118 <__udivmodhi4_loop>
    212e:	80 95       	com	r24
    2130:	90 95       	com	r25
    2132:	bc 01       	movw	r22, r24
    2134:	cd 01       	movw	r24, r26
    2136:	08 95       	ret

00002138 <__udivmodsi4>:
    2138:	a1 e2       	ldi	r26, 0x21	; 33
    213a:	1a 2e       	mov	r1, r26
    213c:	aa 1b       	sub	r26, r26
    213e:	bb 1b       	sub	r27, r27
    2140:	fd 01       	movw	r30, r26
    2142:	0d c0       	rjmp	.+26     	; 0x215e <__udivmodsi4_ep>

00002144 <__udivmodsi4_loop>:
    2144:	aa 1f       	adc	r26, r26
    2146:	bb 1f       	adc	r27, r27
    2148:	ee 1f       	adc	r30, r30
    214a:	ff 1f       	adc	r31, r31
    214c:	a2 17       	cp	r26, r18
    214e:	b3 07       	cpc	r27, r19
    2150:	e4 07       	cpc	r30, r20
    2152:	f5 07       	cpc	r31, r21
    2154:	20 f0       	brcs	.+8      	; 0x215e <__udivmodsi4_ep>
    2156:	a2 1b       	sub	r26, r18
    2158:	b3 0b       	sbc	r27, r19
    215a:	e4 0b       	sbc	r30, r20
    215c:	f5 0b       	sbc	r31, r21

0000215e <__udivmodsi4_ep>:
    215e:	66 1f       	adc	r22, r22
    2160:	77 1f       	adc	r23, r23
    2162:	88 1f       	adc	r24, r24
    2164:	99 1f       	adc	r25, r25
    2166:	1a 94       	dec	r1
    2168:	69 f7       	brne	.-38     	; 0x2144 <__udivmodsi4_loop>
    216a:	60 95       	com	r22
    216c:	70 95       	com	r23
    216e:	80 95       	com	r24
    2170:	90 95       	com	r25
    2172:	9b 01       	movw	r18, r22
    2174:	ac 01       	movw	r20, r24
    2176:	bd 01       	movw	r22, r26
    2178:	cf 01       	movw	r24, r30
    217a:	08 95       	ret

0000217c <__prologue_saves__>:
    217c:	2f 92       	push	r2
    217e:	3f 92       	push	r3
    2180:	4f 92       	push	r4
    2182:	5f 92       	push	r5
    2184:	6f 92       	push	r6
    2186:	7f 92       	push	r7
    2188:	8f 92       	push	r8
    218a:	9f 92       	push	r9
    218c:	af 92       	push	r10
    218e:	bf 92       	push	r11
    2190:	cf 92       	push	r12
    2192:	df 92       	push	r13
    2194:	ef 92       	push	r14
    2196:	ff 92       	push	r15
    2198:	0f 93       	push	r16
    219a:	1f 93       	push	r17
    219c:	cf 93       	push	r28
    219e:	df 93       	push	r29
    21a0:	cd b7       	in	r28, 0x3d	; 61
    21a2:	de b7       	in	r29, 0x3e	; 62
    21a4:	ca 1b       	sub	r28, r26
    21a6:	db 0b       	sbc	r29, r27
    21a8:	0f b6       	in	r0, 0x3f	; 63
    21aa:	f8 94       	cli
    21ac:	de bf       	out	0x3e, r29	; 62
    21ae:	0f be       	out	0x3f, r0	; 63
    21b0:	cd bf       	out	0x3d, r28	; 61
    21b2:	09 94       	ijmp

000021b4 <__epilogue_restores__>:
    21b4:	2a 88       	ldd	r2, Y+18	; 0x12
    21b6:	39 88       	ldd	r3, Y+17	; 0x11
    21b8:	48 88       	ldd	r4, Y+16	; 0x10
    21ba:	5f 84       	ldd	r5, Y+15	; 0x0f
    21bc:	6e 84       	ldd	r6, Y+14	; 0x0e
    21be:	7d 84       	ldd	r7, Y+13	; 0x0d
    21c0:	8c 84       	ldd	r8, Y+12	; 0x0c
    21c2:	9b 84       	ldd	r9, Y+11	; 0x0b
    21c4:	aa 84       	ldd	r10, Y+10	; 0x0a
    21c6:	b9 84       	ldd	r11, Y+9	; 0x09
    21c8:	c8 84       	ldd	r12, Y+8	; 0x08
    21ca:	df 80       	ldd	r13, Y+7	; 0x07
    21cc:	ee 80       	ldd	r14, Y+6	; 0x06
    21ce:	fd 80       	ldd	r15, Y+5	; 0x05
    21d0:	0c 81       	ldd	r16, Y+4	; 0x04
    21d2:	1b 81       	ldd	r17, Y+3	; 0x03
    21d4:	aa 81       	ldd	r26, Y+2	; 0x02
    21d6:	b9 81       	ldd	r27, Y+1	; 0x01
    21d8:	ce 0f       	add	r28, r30
    21da:	d1 1d       	adc	r29, r1
    21dc:	0f b6       	in	r0, 0x3f	; 63
    21de:	f8 94       	cli
    21e0:	de bf       	out	0x3e, r29	; 62
    21e2:	0f be       	out	0x3f, r0	; 63
    21e4:	cd bf       	out	0x3d, r28	; 61
    21e6:	ed 01       	movw	r28, r26
    21e8:	08 95       	ret

000021ea <_exit>:
    21ea:	f8 94       	cli

000021ec <__stop_program>:
    21ec:	ff cf       	rjmp	.-2      	; 0x21ec <__stop_program>
