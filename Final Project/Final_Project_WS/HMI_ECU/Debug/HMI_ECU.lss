
HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000316e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000108  00800060  0000316e  00003202  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  00800168  00800168  0000330a  2**0
                  ALLOC
  3 .stab         00002eb0  00000000  00000000  0000330c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001441  00000000  00000000  000061bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000075fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000773d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000078ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000094f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000a3e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000b190  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000b2f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000b57d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000bd4b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 08 16 	jmp	0x2c10	; 0x2c10 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 3b 16 	jmp	0x2c76	; 0x2c76 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e6       	ldi	r30, 0x6E	; 110
      68:	f1 e3       	ldi	r31, 0x31	; 49
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 36       	cpi	r26, 0x68	; 104
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a8 e6       	ldi	r26, 0x68	; 104
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 37       	cpi	r26, 0x74	; 116
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a3 05 	call	0xb46	; 0xb46 <main>
      8a:	0c 94 b5 18 	jmp	0x316a	; 0x316a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 39 18 	jmp	0x3072	; 0x3072 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a3 e5       	ldi	r26, 0x53	; 83
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 55 18 	jmp	0x30aa	; 0x30aa <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 45 18 	jmp	0x308a	; 0x308a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 61 18 	jmp	0x30c2	; 0x30c2 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 45 18 	jmp	0x308a	; 0x308a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 61 18 	jmp	0x30c2	; 0x30c2 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 39 18 	jmp	0x3072	; 0x3072 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	83 e5       	ldi	r24, 0x53	; 83
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 55 18 	jmp	0x30aa	; 0x30aa <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 45 18 	jmp	0x308a	; 0x308a <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 61 18 	jmp	0x30c2	; 0x30c2 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 45 18 	jmp	0x308a	; 0x308a <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 61 18 	jmp	0x30c2	; 0x30c2 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 45 18 	jmp	0x308a	; 0x308a <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 61 18 	jmp	0x30c2	; 0x30c2 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 49 18 	jmp	0x3092	; 0x3092 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 65 18 	jmp	0x30ca	; 0x30ca <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <main>:
void Warning_Message(void);
void Wrong_Message(void);
/*******************************************************************************
 *                      		Main Function                                  *
 *******************************************************************************/
int main(void){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	a5 97       	sbiw	r28, 0x25	; 37
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61

	/*Enable I-bit*/
	SREG|=(1<<7);
     b5a:	af e5       	ldi	r26, 0x5F	; 95
     b5c:	b0 e0       	ldi	r27, 0x00	; 0
     b5e:	ef e5       	ldi	r30, 0x5F	; 95
     b60:	f0 e0       	ldi	r31, 0x00	; 0
     b62:	80 81       	ld	r24, Z
     b64:	80 68       	ori	r24, 0x80	; 128
     b66:	8c 93       	st	X, r24

	/*Initialization UART*/
	UART_ConfigType UART_Config ={BIT_DATA_8_BITS,DISABLED,STOP_BIT_1,BAUD_RATE_9600};
     b68:	ce 01       	movw	r24, r28
     b6a:	0f 96       	adiw	r24, 0x0f	; 15
     b6c:	9d 8f       	std	Y+29, r25	; 0x1d
     b6e:	8c 8f       	std	Y+28, r24	; 0x1c
     b70:	e1 e6       	ldi	r30, 0x61	; 97
     b72:	f1 e0       	ldi	r31, 0x01	; 1
     b74:	ff 8f       	std	Y+31, r31	; 0x1f
     b76:	ee 8f       	std	Y+30, r30	; 0x1e
     b78:	f7 e0       	ldi	r31, 0x07	; 7
     b7a:	f8 a3       	std	Y+32, r31	; 0x20
     b7c:	ee 8d       	ldd	r30, Y+30	; 0x1e
     b7e:	ff 8d       	ldd	r31, Y+31	; 0x1f
     b80:	00 80       	ld	r0, Z
     b82:	8e 8d       	ldd	r24, Y+30	; 0x1e
     b84:	9f 8d       	ldd	r25, Y+31	; 0x1f
     b86:	01 96       	adiw	r24, 0x01	; 1
     b88:	9f 8f       	std	Y+31, r25	; 0x1f
     b8a:	8e 8f       	std	Y+30, r24	; 0x1e
     b8c:	ec 8d       	ldd	r30, Y+28	; 0x1c
     b8e:	fd 8d       	ldd	r31, Y+29	; 0x1d
     b90:	00 82       	st	Z, r0
     b92:	8c 8d       	ldd	r24, Y+28	; 0x1c
     b94:	9d 8d       	ldd	r25, Y+29	; 0x1d
     b96:	01 96       	adiw	r24, 0x01	; 1
     b98:	9d 8f       	std	Y+29, r25	; 0x1d
     b9a:	8c 8f       	std	Y+28, r24	; 0x1c
     b9c:	98 a1       	ldd	r25, Y+32	; 0x20
     b9e:	91 50       	subi	r25, 0x01	; 1
     ba0:	98 a3       	std	Y+32, r25	; 0x20
     ba2:	e8 a1       	ldd	r30, Y+32	; 0x20
     ba4:	ee 23       	and	r30, r30
     ba6:	51 f7       	brne	.-44     	; 0xb7c <main+0x36>
	UART_init(&UART_Config);
     ba8:	ce 01       	movw	r24, r28
     baa:	0f 96       	adiw	r24, 0x0f	; 15
     bac:	0e 94 ea 16 	call	0x2dd4	; 0x2dd4 <UART_init>

	/*Initialization The timer with 1 sec for every interrupt*/
	Timer1_ConfigType Timer1_Config ={0,8000,TIMER1_PRESCALER_1024,TIMER1_COMPARE_MODE_4};
     bb0:	ce 01       	movw	r24, r28
     bb2:	46 96       	adiw	r24, 0x16	; 22
     bb4:	9a a3       	std	Y+34, r25	; 0x22
     bb6:	89 a3       	std	Y+33, r24	; 0x21
     bb8:	eb e5       	ldi	r30, 0x5B	; 91
     bba:	f1 e0       	ldi	r31, 0x01	; 1
     bbc:	fc a3       	std	Y+36, r31	; 0x24
     bbe:	eb a3       	std	Y+35, r30	; 0x23
     bc0:	f6 e0       	ldi	r31, 0x06	; 6
     bc2:	fd a3       	std	Y+37, r31	; 0x25
     bc4:	eb a1       	ldd	r30, Y+35	; 0x23
     bc6:	fc a1       	ldd	r31, Y+36	; 0x24
     bc8:	00 80       	ld	r0, Z
     bca:	8b a1       	ldd	r24, Y+35	; 0x23
     bcc:	9c a1       	ldd	r25, Y+36	; 0x24
     bce:	01 96       	adiw	r24, 0x01	; 1
     bd0:	9c a3       	std	Y+36, r25	; 0x24
     bd2:	8b a3       	std	Y+35, r24	; 0x23
     bd4:	e9 a1       	ldd	r30, Y+33	; 0x21
     bd6:	fa a1       	ldd	r31, Y+34	; 0x22
     bd8:	00 82       	st	Z, r0
     bda:	89 a1       	ldd	r24, Y+33	; 0x21
     bdc:	9a a1       	ldd	r25, Y+34	; 0x22
     bde:	01 96       	adiw	r24, 0x01	; 1
     be0:	9a a3       	std	Y+34, r25	; 0x22
     be2:	89 a3       	std	Y+33, r24	; 0x21
     be4:	9d a1       	ldd	r25, Y+37	; 0x25
     be6:	91 50       	subi	r25, 0x01	; 1
     be8:	9d a3       	std	Y+37, r25	; 0x25
     bea:	ed a1       	ldd	r30, Y+37	; 0x25
     bec:	ee 23       	and	r30, r30
     bee:	51 f7       	brne	.-44     	; 0xbc4 <main+0x7e>
	Timer1_init(&Timer1_Config);
     bf0:	ce 01       	movw	r24, r28
     bf2:	46 96       	adiw	r24, 0x16	; 22
     bf4:	0e 94 6e 16 	call	0x2cdc	; 0x2cdc <Timer1_init>
	Timer1_setCallBack(Timer1_callback);
     bf8:	8b e9       	ldi	r24, 0x9B	; 155
     bfa:	96 e0       	ldi	r25, 0x06	; 6
     bfc:	0e 94 d8 16 	call	0x2db0	; 0x2db0 <Timer1_setCallBack>

	/*Initialization The LCD*/
	LCD_init();
     c00:	0e 94 dd 10 	call	0x21ba	; 0x21ba <LCD_init>

	/*lcd initialization ended ready to communicate!*/
	UART_sendByte(MC1_READY);
     c04:	80 e1       	ldi	r24, 0x10	; 16
     c06:	0e 94 85 17 	call	0x2f0a	; 0x2f0a <UART_sendByte>

	LCD_displayStringRowColumn(0,0,"Door Locker");
     c0a:	20 e6       	ldi	r18, 0x60	; 96
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	80 e0       	ldi	r24, 0x00	; 0
     c10:	60 e0       	ldi	r22, 0x00	; 0
     c12:	a9 01       	movw	r20, r18
     c14:	0e 94 c2 15 	call	0x2b84	; 0x2b84 <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1,0,"System :)");
     c18:	2c e6       	ldi	r18, 0x6C	; 108
     c1a:	30 e0       	ldi	r19, 0x00	; 0
     c1c:	81 e0       	ldi	r24, 0x01	; 1
     c1e:	60 e0       	ldi	r22, 0x00	; 0
     c20:	a9 01       	movw	r20, r18
     c22:	0e 94 c2 15 	call	0x2b84	; 0x2b84 <LCD_displayStringRowColumn>
     c26:	80 e0       	ldi	r24, 0x00	; 0
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	aa e7       	ldi	r26, 0x7A	; 122
     c2c:	b4 e4       	ldi	r27, 0x44	; 68
     c2e:	8b 87       	std	Y+11, r24	; 0x0b
     c30:	9c 87       	std	Y+12, r25	; 0x0c
     c32:	ad 87       	std	Y+13, r26	; 0x0d
     c34:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c36:	6b 85       	ldd	r22, Y+11	; 0x0b
     c38:	7c 85       	ldd	r23, Y+12	; 0x0c
     c3a:	8d 85       	ldd	r24, Y+13	; 0x0d
     c3c:	9e 85       	ldd	r25, Y+14	; 0x0e
     c3e:	20 e0       	ldi	r18, 0x00	; 0
     c40:	30 e0       	ldi	r19, 0x00	; 0
     c42:	4a ef       	ldi	r20, 0xFA	; 250
     c44:	54 e4       	ldi	r21, 0x44	; 68
     c46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c4a:	dc 01       	movw	r26, r24
     c4c:	cb 01       	movw	r24, r22
     c4e:	8f 83       	std	Y+7, r24	; 0x07
     c50:	98 87       	std	Y+8, r25	; 0x08
     c52:	a9 87       	std	Y+9, r26	; 0x09
     c54:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     c56:	6f 81       	ldd	r22, Y+7	; 0x07
     c58:	78 85       	ldd	r23, Y+8	; 0x08
     c5a:	89 85       	ldd	r24, Y+9	; 0x09
     c5c:	9a 85       	ldd	r25, Y+10	; 0x0a
     c5e:	20 e0       	ldi	r18, 0x00	; 0
     c60:	30 e0       	ldi	r19, 0x00	; 0
     c62:	40 e8       	ldi	r20, 0x80	; 128
     c64:	5f e3       	ldi	r21, 0x3F	; 63
     c66:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     c6a:	88 23       	and	r24, r24
     c6c:	2c f4       	brge	.+10     	; 0xc78 <main+0x132>
		__ticks = 1;
     c6e:	81 e0       	ldi	r24, 0x01	; 1
     c70:	90 e0       	ldi	r25, 0x00	; 0
     c72:	9e 83       	std	Y+6, r25	; 0x06
     c74:	8d 83       	std	Y+5, r24	; 0x05
     c76:	3f c0       	rjmp	.+126    	; 0xcf6 <main+0x1b0>
	else if (__tmp > 65535)
     c78:	6f 81       	ldd	r22, Y+7	; 0x07
     c7a:	78 85       	ldd	r23, Y+8	; 0x08
     c7c:	89 85       	ldd	r24, Y+9	; 0x09
     c7e:	9a 85       	ldd	r25, Y+10	; 0x0a
     c80:	20 e0       	ldi	r18, 0x00	; 0
     c82:	3f ef       	ldi	r19, 0xFF	; 255
     c84:	4f e7       	ldi	r20, 0x7F	; 127
     c86:	57 e4       	ldi	r21, 0x47	; 71
     c88:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     c8c:	18 16       	cp	r1, r24
     c8e:	4c f5       	brge	.+82     	; 0xce2 <main+0x19c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c90:	6b 85       	ldd	r22, Y+11	; 0x0b
     c92:	7c 85       	ldd	r23, Y+12	; 0x0c
     c94:	8d 85       	ldd	r24, Y+13	; 0x0d
     c96:	9e 85       	ldd	r25, Y+14	; 0x0e
     c98:	20 e0       	ldi	r18, 0x00	; 0
     c9a:	30 e0       	ldi	r19, 0x00	; 0
     c9c:	40 e2       	ldi	r20, 0x20	; 32
     c9e:	51 e4       	ldi	r21, 0x41	; 65
     ca0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ca4:	dc 01       	movw	r26, r24
     ca6:	cb 01       	movw	r24, r22
     ca8:	bc 01       	movw	r22, r24
     caa:	cd 01       	movw	r24, r26
     cac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     cb0:	dc 01       	movw	r26, r24
     cb2:	cb 01       	movw	r24, r22
     cb4:	9e 83       	std	Y+6, r25	; 0x06
     cb6:	8d 83       	std	Y+5, r24	; 0x05
     cb8:	0f c0       	rjmp	.+30     	; 0xcd8 <main+0x192>
     cba:	88 ec       	ldi	r24, 0xC8	; 200
     cbc:	90 e0       	ldi	r25, 0x00	; 0
     cbe:	9c 83       	std	Y+4, r25	; 0x04
     cc0:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     cc2:	8b 81       	ldd	r24, Y+3	; 0x03
     cc4:	9c 81       	ldd	r25, Y+4	; 0x04
     cc6:	01 97       	sbiw	r24, 0x01	; 1
     cc8:	f1 f7       	brne	.-4      	; 0xcc6 <main+0x180>
     cca:	9c 83       	std	Y+4, r25	; 0x04
     ccc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     cce:	8d 81       	ldd	r24, Y+5	; 0x05
     cd0:	9e 81       	ldd	r25, Y+6	; 0x06
     cd2:	01 97       	sbiw	r24, 0x01	; 1
     cd4:	9e 83       	std	Y+6, r25	; 0x06
     cd6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     cd8:	8d 81       	ldd	r24, Y+5	; 0x05
     cda:	9e 81       	ldd	r25, Y+6	; 0x06
     cdc:	00 97       	sbiw	r24, 0x00	; 0
     cde:	69 f7       	brne	.-38     	; 0xcba <main+0x174>
     ce0:	14 c0       	rjmp	.+40     	; 0xd0a <main+0x1c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ce2:	6f 81       	ldd	r22, Y+7	; 0x07
     ce4:	78 85       	ldd	r23, Y+8	; 0x08
     ce6:	89 85       	ldd	r24, Y+9	; 0x09
     ce8:	9a 85       	ldd	r25, Y+10	; 0x0a
     cea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     cee:	dc 01       	movw	r26, r24
     cf0:	cb 01       	movw	r24, r22
     cf2:	9e 83       	std	Y+6, r25	; 0x06
     cf4:	8d 83       	std	Y+5, r24	; 0x05
     cf6:	8d 81       	ldd	r24, Y+5	; 0x05
     cf8:	9e 81       	ldd	r25, Y+6	; 0x06
     cfa:	9a 83       	std	Y+2, r25	; 0x02
     cfc:	89 83       	std	Y+1, r24	; 0x01
     cfe:	89 81       	ldd	r24, Y+1	; 0x01
     d00:	9a 81       	ldd	r25, Y+2	; 0x02
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	f1 f7       	brne	.-4      	; 0xd02 <main+0x1bc>
     d06:	9a 83       	std	Y+2, r25	; 0x02
     d08:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);

	/*Setting the password for the first time*/
	Set_Password();
     d0a:	0e 94 ab 06 	call	0xd56	; 0xd56 <Set_Password>
	 * or to close door each with separete function
	 */
	while(1)
	{
		/*get current pressed key from keypad*/
		current_key = KEYPAD_getPressedKey();
     d0e:	0e 94 52 0f 	call	0x1ea4	; 0x1ea4 <KEYPAD_getPressedKey>
     d12:	80 93 73 01 	sts	0x0173, r24

		/*The LCD will always display the main system options*/
		Display_Main_Options();
     d16:	0e 94 1c 08 	call	0x1038	; 0x1038 <Display_Main_Options>

		/*based on which key you have entered function will be called*/
		if(current_key == OPEN_DOOR)
     d1a:	80 91 73 01 	lds	r24, 0x0173
     d1e:	8b 32       	cpi	r24, 0x2B	; 43
     d20:	19 f4       	brne	.+6      	; 0xd28 <main+0x1e2>
		{
			/*call open door function*/
			open_Door();
     d22:	0e 94 be 0a 	call	0x157c	; 0x157c <open_Door>
     d26:	f3 cf       	rjmp	.-26     	; 0xd0e <main+0x1c8>
		}
		else if(current_key == CHANGE_PASS)
     d28:	80 91 73 01 	lds	r24, 0x0173
     d2c:	8d 32       	cpi	r24, 0x2D	; 45
     d2e:	79 f7       	brne	.-34     	; 0xd0e <main+0x1c8>
		{
			/*call change pass function*/
			change_Pass();
     d30:	0e 94 f9 0a 	call	0x15f2	; 0x15f2 <change_Pass>
     d34:	ec cf       	rjmp	.-40     	; 0xd0e <main+0x1c8>

00000d36 <Timer1_callback>:
}

/*******************************************************************************
 *                      	Functions Definitions                               *
 *******************************************************************************/
void Timer1_callback(void){
     d36:	df 93       	push	r29
     d38:	cf 93       	push	r28
     d3a:	cd b7       	in	r28, 0x3d	; 61
     d3c:	de b7       	in	r29, 0x3e	; 62
	g_ticks++;
     d3e:	80 91 69 01 	lds	r24, 0x0169
     d42:	90 91 6a 01 	lds	r25, 0x016A
     d46:	01 96       	adiw	r24, 0x01	; 1
     d48:	90 93 6a 01 	sts	0x016A, r25
     d4c:	80 93 69 01 	sts	0x0169, r24
}
     d50:	cf 91       	pop	r28
     d52:	df 91       	pop	r29
     d54:	08 95       	ret

00000d56 <Set_Password>:
/*******************************************************************************/
void Set_Password(void){
     d56:	df 93       	push	r29
     d58:	cf 93       	push	r28
     d5a:	cd b7       	in	r28, 0x3d	; 61
     d5c:	de b7       	in	r29, 0x3e	; 62
     d5e:	a7 97       	sbiw	r28, 0x27	; 39
     d60:	0f b6       	in	r0, 0x3f	; 63
     d62:	f8 94       	cli
     d64:	de bf       	out	0x3e, r29	; 62
     d66:	0f be       	out	0x3f, r0	; 63
     d68:	cd bf       	out	0x3d, r28	; 61
	/*initialize two arries each for password*/
	uint8 arr_pass_first[PASSWORD_SIZE] , arr_pass_second[PASSWORD_SIZE];

	/*Initial value two pass doesn't match*/
	uint8 pass_state = PASSWORDS_UNMATCH;
     d6a:	1d 8e       	std	Y+29, r1	; 0x1d
     d6c:	ae c0       	rjmp	.+348    	; 0xeca <Set_Password+0x174>

	/*as long as two passwords doesn't match you are stuck in this while loop*/
	while(pass_state == PASSWORDS_UNMATCH){

		/*message to enter password*/
		Enter_Pass_Message();
     d6e:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <Enter_Pass_Message>

		/*Enter a password consists of 5 numbers, Display * in the screen for each number.*/
		Get_Password(arr_pass_first,PASSWORD_SIZE);
     d72:	ce 01       	movw	r24, r28
     d74:	4e 96       	adiw	r24, 0x1e	; 30
     d76:	65 e0       	ldi	r22, 0x05	; 5
     d78:	0e 94 ff 08 	call	0x11fe	; 0x11fe <Get_Password>

		LCD_clearScreen();
     d7c:	0e 94 fe 15 	call	0x2bfc	; 0x2bfc <LCD_clearScreen>

		/*second password message*/
		RePassword_Message();
     d80:	0e 94 05 08 	call	0x100a	; 0x100a <RePassword_Message>

		/*set second password verification*/
		Get_Password(arr_pass_second,PASSWORD_SIZE);
     d84:	ce 01       	movw	r24, r28
     d86:	83 96       	adiw	r24, 0x23	; 35
     d88:	65 e0       	ldi	r22, 0x05	; 5
     d8a:	0e 94 ff 08 	call	0x11fe	; 0x11fe <Get_Password>

		/*send verification to second MC to start communication!*/
		UART_sendByte(MC1_READY);
     d8e:	80 e1       	ldi	r24, 0x10	; 16
     d90:	0e 94 85 17 	call	0x2f0a	; 0x2f0a <UART_sendByte>

		/*send first password*/
		Send_Password(arr_pass_first,PASSWORD_SIZE);
     d94:	ce 01       	movw	r24, r28
     d96:	4e 96       	adiw	r24, 0x1e	; 30
     d98:	65 e0       	ldi	r22, 0x05	; 5
     d9a:	0e 94 1c 0a 	call	0x1438	; 0x1438 <Send_Password>

		/*Don't send second pass until you get verification from first*/
		while(UART_recieveByte() != FIRST_PASSWORD_RECIVED);
     d9e:	0e 94 9c 17 	call	0x2f38	; 0x2f38 <UART_recieveByte>
     da2:	8f 33       	cpi	r24, 0x3F	; 63
     da4:	e1 f7       	brne	.-8      	; 0xd9e <Set_Password+0x48>

		/*send second password*/
		Send_Password(arr_pass_second,PASSWORD_SIZE);
     da6:	ce 01       	movw	r24, r28
     da8:	83 96       	adiw	r24, 0x23	; 35
     daa:	65 e0       	ldi	r22, 0x05	; 5
     dac:	0e 94 1c 0a 	call	0x1438	; 0x1438 <Send_Password>

		while(UART_recieveByte() != SECOND_PASSWORD_RECIVED);
     db0:	0e 94 9c 17 	call	0x2f38	; 0x2f38 <UART_recieveByte>
     db4:	8f 34       	cpi	r24, 0x4F	; 79
     db6:	e1 f7       	brne	.-8      	; 0xdb0 <Set_Password+0x5a>

		/*save the check in pass_state*/
		pass_state = UART_recieveByte();
     db8:	0e 94 9c 17 	call	0x2f38	; 0x2f38 <UART_recieveByte>
     dbc:	8d 8f       	std	Y+29, r24	; 0x1d
		if(pass_state == PASSWORDS_UNMATCH)
     dbe:	8d 8d       	ldd	r24, Y+29	; 0x1d
     dc0:	88 23       	and	r24, r24
     dc2:	09 f0       	breq	.+2      	; 0xdc6 <Set_Password+0x70>
     dc4:	82 c0       	rjmp	.+260    	; 0xeca <Set_Password+0x174>
		{
			LCD_clearScreen();
     dc6:	0e 94 fe 15 	call	0x2bfc	; 0x2bfc <LCD_clearScreen>
			LCD_displayStringRowColumn(0,0,"Pass Unmatch");
     dca:	26 e7       	ldi	r18, 0x76	; 118
     dcc:	30 e0       	ldi	r19, 0x00	; 0
     dce:	80 e0       	ldi	r24, 0x00	; 0
     dd0:	60 e0       	ldi	r22, 0x00	; 0
     dd2:	a9 01       	movw	r20, r18
     dd4:	0e 94 c2 15 	call	0x2b84	; 0x2b84 <LCD_displayStringRowColumn>
			LCD_displayStringRowColumn(1,1,"Try again!");
     dd8:	23 e8       	ldi	r18, 0x83	; 131
     dda:	30 e0       	ldi	r19, 0x00	; 0
     ddc:	81 e0       	ldi	r24, 0x01	; 1
     dde:	61 e0       	ldi	r22, 0x01	; 1
     de0:	a9 01       	movw	r20, r18
     de2:	0e 94 c2 15 	call	0x2b84	; 0x2b84 <LCD_displayStringRowColumn>
     de6:	80 e0       	ldi	r24, 0x00	; 0
     de8:	90 e0       	ldi	r25, 0x00	; 0
     dea:	aa e7       	ldi	r26, 0x7A	; 122
     dec:	b4 e4       	ldi	r27, 0x44	; 68
     dee:	89 8f       	std	Y+25, r24	; 0x19
     df0:	9a 8f       	std	Y+26, r25	; 0x1a
     df2:	ab 8f       	std	Y+27, r26	; 0x1b
     df4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     df6:	69 8d       	ldd	r22, Y+25	; 0x19
     df8:	7a 8d       	ldd	r23, Y+26	; 0x1a
     dfa:	8b 8d       	ldd	r24, Y+27	; 0x1b
     dfc:	9c 8d       	ldd	r25, Y+28	; 0x1c
     dfe:	20 e0       	ldi	r18, 0x00	; 0
     e00:	30 e0       	ldi	r19, 0x00	; 0
     e02:	4a ef       	ldi	r20, 0xFA	; 250
     e04:	54 e4       	ldi	r21, 0x44	; 68
     e06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e0a:	dc 01       	movw	r26, r24
     e0c:	cb 01       	movw	r24, r22
     e0e:	8d 8b       	std	Y+21, r24	; 0x15
     e10:	9e 8b       	std	Y+22, r25	; 0x16
     e12:	af 8b       	std	Y+23, r26	; 0x17
     e14:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     e16:	6d 89       	ldd	r22, Y+21	; 0x15
     e18:	7e 89       	ldd	r23, Y+22	; 0x16
     e1a:	8f 89       	ldd	r24, Y+23	; 0x17
     e1c:	98 8d       	ldd	r25, Y+24	; 0x18
     e1e:	20 e0       	ldi	r18, 0x00	; 0
     e20:	30 e0       	ldi	r19, 0x00	; 0
     e22:	40 e8       	ldi	r20, 0x80	; 128
     e24:	5f e3       	ldi	r21, 0x3F	; 63
     e26:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e2a:	88 23       	and	r24, r24
     e2c:	2c f4       	brge	.+10     	; 0xe38 <Set_Password+0xe2>
		__ticks = 1;
     e2e:	81 e0       	ldi	r24, 0x01	; 1
     e30:	90 e0       	ldi	r25, 0x00	; 0
     e32:	9c 8b       	std	Y+20, r25	; 0x14
     e34:	8b 8b       	std	Y+19, r24	; 0x13
     e36:	3f c0       	rjmp	.+126    	; 0xeb6 <Set_Password+0x160>
	else if (__tmp > 65535)
     e38:	6d 89       	ldd	r22, Y+21	; 0x15
     e3a:	7e 89       	ldd	r23, Y+22	; 0x16
     e3c:	8f 89       	ldd	r24, Y+23	; 0x17
     e3e:	98 8d       	ldd	r25, Y+24	; 0x18
     e40:	20 e0       	ldi	r18, 0x00	; 0
     e42:	3f ef       	ldi	r19, 0xFF	; 255
     e44:	4f e7       	ldi	r20, 0x7F	; 127
     e46:	57 e4       	ldi	r21, 0x47	; 71
     e48:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e4c:	18 16       	cp	r1, r24
     e4e:	4c f5       	brge	.+82     	; 0xea2 <Set_Password+0x14c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e50:	69 8d       	ldd	r22, Y+25	; 0x19
     e52:	7a 8d       	ldd	r23, Y+26	; 0x1a
     e54:	8b 8d       	ldd	r24, Y+27	; 0x1b
     e56:	9c 8d       	ldd	r25, Y+28	; 0x1c
     e58:	20 e0       	ldi	r18, 0x00	; 0
     e5a:	30 e0       	ldi	r19, 0x00	; 0
     e5c:	40 e2       	ldi	r20, 0x20	; 32
     e5e:	51 e4       	ldi	r21, 0x41	; 65
     e60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e64:	dc 01       	movw	r26, r24
     e66:	cb 01       	movw	r24, r22
     e68:	bc 01       	movw	r22, r24
     e6a:	cd 01       	movw	r24, r26
     e6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e70:	dc 01       	movw	r26, r24
     e72:	cb 01       	movw	r24, r22
     e74:	9c 8b       	std	Y+20, r25	; 0x14
     e76:	8b 8b       	std	Y+19, r24	; 0x13
     e78:	0f c0       	rjmp	.+30     	; 0xe98 <Set_Password+0x142>
     e7a:	88 ec       	ldi	r24, 0xC8	; 200
     e7c:	90 e0       	ldi	r25, 0x00	; 0
     e7e:	9a 8b       	std	Y+18, r25	; 0x12
     e80:	89 8b       	std	Y+17, r24	; 0x11
     e82:	89 89       	ldd	r24, Y+17	; 0x11
     e84:	9a 89       	ldd	r25, Y+18	; 0x12
     e86:	01 97       	sbiw	r24, 0x01	; 1
     e88:	f1 f7       	brne	.-4      	; 0xe86 <Set_Password+0x130>
     e8a:	9a 8b       	std	Y+18, r25	; 0x12
     e8c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e8e:	8b 89       	ldd	r24, Y+19	; 0x13
     e90:	9c 89       	ldd	r25, Y+20	; 0x14
     e92:	01 97       	sbiw	r24, 0x01	; 1
     e94:	9c 8b       	std	Y+20, r25	; 0x14
     e96:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e98:	8b 89       	ldd	r24, Y+19	; 0x13
     e9a:	9c 89       	ldd	r25, Y+20	; 0x14
     e9c:	00 97       	sbiw	r24, 0x00	; 0
     e9e:	69 f7       	brne	.-38     	; 0xe7a <Set_Password+0x124>
     ea0:	14 c0       	rjmp	.+40     	; 0xeca <Set_Password+0x174>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ea2:	6d 89       	ldd	r22, Y+21	; 0x15
     ea4:	7e 89       	ldd	r23, Y+22	; 0x16
     ea6:	8f 89       	ldd	r24, Y+23	; 0x17
     ea8:	98 8d       	ldd	r25, Y+24	; 0x18
     eaa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     eae:	dc 01       	movw	r26, r24
     eb0:	cb 01       	movw	r24, r22
     eb2:	9c 8b       	std	Y+20, r25	; 0x14
     eb4:	8b 8b       	std	Y+19, r24	; 0x13
     eb6:	8b 89       	ldd	r24, Y+19	; 0x13
     eb8:	9c 89       	ldd	r25, Y+20	; 0x14
     eba:	98 8b       	std	Y+16, r25	; 0x10
     ebc:	8f 87       	std	Y+15, r24	; 0x0f
     ebe:	8f 85       	ldd	r24, Y+15	; 0x0f
     ec0:	98 89       	ldd	r25, Y+16	; 0x10
     ec2:	01 97       	sbiw	r24, 0x01	; 1
     ec4:	f1 f7       	brne	.-4      	; 0xec2 <Set_Password+0x16c>
     ec6:	98 8b       	std	Y+16, r25	; 0x10
     ec8:	8f 87       	std	Y+15, r24	; 0x0f

	/*Initial value two pass doesn't match*/
	uint8 pass_state = PASSWORDS_UNMATCH;

	/*as long as two passwords doesn't match you are stuck in this while loop*/
	while(pass_state == PASSWORDS_UNMATCH){
     eca:	8d 8d       	ldd	r24, Y+29	; 0x1d
     ecc:	88 23       	and	r24, r24
     ece:	09 f4       	brne	.+2      	; 0xed2 <Set_Password+0x17c>
     ed0:	4e cf       	rjmp	.-356    	; 0xd6e <Set_Password+0x18>
			LCD_displayStringRowColumn(1,1,"Try again!");
			_delay_ms(1000);
		}

	}
	LCD_clearScreen();
     ed2:	0e 94 fe 15 	call	0x2bfc	; 0x2bfc <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"New Pass is Set!");
     ed6:	2e e8       	ldi	r18, 0x8E	; 142
     ed8:	30 e0       	ldi	r19, 0x00	; 0
     eda:	80 e0       	ldi	r24, 0x00	; 0
     edc:	60 e0       	ldi	r22, 0x00	; 0
     ede:	a9 01       	movw	r20, r18
     ee0:	0e 94 c2 15 	call	0x2b84	; 0x2b84 <LCD_displayStringRowColumn>
     ee4:	80 e0       	ldi	r24, 0x00	; 0
     ee6:	90 e0       	ldi	r25, 0x00	; 0
     ee8:	aa e7       	ldi	r26, 0x7A	; 122
     eea:	b4 e4       	ldi	r27, 0x44	; 68
     eec:	8b 87       	std	Y+11, r24	; 0x0b
     eee:	9c 87       	std	Y+12, r25	; 0x0c
     ef0:	ad 87       	std	Y+13, r26	; 0x0d
     ef2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ef4:	6b 85       	ldd	r22, Y+11	; 0x0b
     ef6:	7c 85       	ldd	r23, Y+12	; 0x0c
     ef8:	8d 85       	ldd	r24, Y+13	; 0x0d
     efa:	9e 85       	ldd	r25, Y+14	; 0x0e
     efc:	20 e0       	ldi	r18, 0x00	; 0
     efe:	30 e0       	ldi	r19, 0x00	; 0
     f00:	4a ef       	ldi	r20, 0xFA	; 250
     f02:	54 e4       	ldi	r21, 0x44	; 68
     f04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f08:	dc 01       	movw	r26, r24
     f0a:	cb 01       	movw	r24, r22
     f0c:	8f 83       	std	Y+7, r24	; 0x07
     f0e:	98 87       	std	Y+8, r25	; 0x08
     f10:	a9 87       	std	Y+9, r26	; 0x09
     f12:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     f14:	6f 81       	ldd	r22, Y+7	; 0x07
     f16:	78 85       	ldd	r23, Y+8	; 0x08
     f18:	89 85       	ldd	r24, Y+9	; 0x09
     f1a:	9a 85       	ldd	r25, Y+10	; 0x0a
     f1c:	20 e0       	ldi	r18, 0x00	; 0
     f1e:	30 e0       	ldi	r19, 0x00	; 0
     f20:	40 e8       	ldi	r20, 0x80	; 128
     f22:	5f e3       	ldi	r21, 0x3F	; 63
     f24:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f28:	88 23       	and	r24, r24
     f2a:	2c f4       	brge	.+10     	; 0xf36 <Set_Password+0x1e0>
		__ticks = 1;
     f2c:	81 e0       	ldi	r24, 0x01	; 1
     f2e:	90 e0       	ldi	r25, 0x00	; 0
     f30:	9e 83       	std	Y+6, r25	; 0x06
     f32:	8d 83       	std	Y+5, r24	; 0x05
     f34:	3f c0       	rjmp	.+126    	; 0xfb4 <Set_Password+0x25e>
	else if (__tmp > 65535)
     f36:	6f 81       	ldd	r22, Y+7	; 0x07
     f38:	78 85       	ldd	r23, Y+8	; 0x08
     f3a:	89 85       	ldd	r24, Y+9	; 0x09
     f3c:	9a 85       	ldd	r25, Y+10	; 0x0a
     f3e:	20 e0       	ldi	r18, 0x00	; 0
     f40:	3f ef       	ldi	r19, 0xFF	; 255
     f42:	4f e7       	ldi	r20, 0x7F	; 127
     f44:	57 e4       	ldi	r21, 0x47	; 71
     f46:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f4a:	18 16       	cp	r1, r24
     f4c:	4c f5       	brge	.+82     	; 0xfa0 <Set_Password+0x24a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f4e:	6b 85       	ldd	r22, Y+11	; 0x0b
     f50:	7c 85       	ldd	r23, Y+12	; 0x0c
     f52:	8d 85       	ldd	r24, Y+13	; 0x0d
     f54:	9e 85       	ldd	r25, Y+14	; 0x0e
     f56:	20 e0       	ldi	r18, 0x00	; 0
     f58:	30 e0       	ldi	r19, 0x00	; 0
     f5a:	40 e2       	ldi	r20, 0x20	; 32
     f5c:	51 e4       	ldi	r21, 0x41	; 65
     f5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f62:	dc 01       	movw	r26, r24
     f64:	cb 01       	movw	r24, r22
     f66:	bc 01       	movw	r22, r24
     f68:	cd 01       	movw	r24, r26
     f6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f6e:	dc 01       	movw	r26, r24
     f70:	cb 01       	movw	r24, r22
     f72:	9e 83       	std	Y+6, r25	; 0x06
     f74:	8d 83       	std	Y+5, r24	; 0x05
     f76:	0f c0       	rjmp	.+30     	; 0xf96 <Set_Password+0x240>
     f78:	88 ec       	ldi	r24, 0xC8	; 200
     f7a:	90 e0       	ldi	r25, 0x00	; 0
     f7c:	9c 83       	std	Y+4, r25	; 0x04
     f7e:	8b 83       	std	Y+3, r24	; 0x03
     f80:	8b 81       	ldd	r24, Y+3	; 0x03
     f82:	9c 81       	ldd	r25, Y+4	; 0x04
     f84:	01 97       	sbiw	r24, 0x01	; 1
     f86:	f1 f7       	brne	.-4      	; 0xf84 <Set_Password+0x22e>
     f88:	9c 83       	std	Y+4, r25	; 0x04
     f8a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f8c:	8d 81       	ldd	r24, Y+5	; 0x05
     f8e:	9e 81       	ldd	r25, Y+6	; 0x06
     f90:	01 97       	sbiw	r24, 0x01	; 1
     f92:	9e 83       	std	Y+6, r25	; 0x06
     f94:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f96:	8d 81       	ldd	r24, Y+5	; 0x05
     f98:	9e 81       	ldd	r25, Y+6	; 0x06
     f9a:	00 97       	sbiw	r24, 0x00	; 0
     f9c:	69 f7       	brne	.-38     	; 0xf78 <Set_Password+0x222>
     f9e:	14 c0       	rjmp	.+40     	; 0xfc8 <Set_Password+0x272>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fa0:	6f 81       	ldd	r22, Y+7	; 0x07
     fa2:	78 85       	ldd	r23, Y+8	; 0x08
     fa4:	89 85       	ldd	r24, Y+9	; 0x09
     fa6:	9a 85       	ldd	r25, Y+10	; 0x0a
     fa8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fac:	dc 01       	movw	r26, r24
     fae:	cb 01       	movw	r24, r22
     fb0:	9e 83       	std	Y+6, r25	; 0x06
     fb2:	8d 83       	std	Y+5, r24	; 0x05
     fb4:	8d 81       	ldd	r24, Y+5	; 0x05
     fb6:	9e 81       	ldd	r25, Y+6	; 0x06
     fb8:	9a 83       	std	Y+2, r25	; 0x02
     fba:	89 83       	std	Y+1, r24	; 0x01
     fbc:	89 81       	ldd	r24, Y+1	; 0x01
     fbe:	9a 81       	ldd	r25, Y+2	; 0x02
     fc0:	01 97       	sbiw	r24, 0x01	; 1
     fc2:	f1 f7       	brne	.-4      	; 0xfc0 <Set_Password+0x26a>
     fc4:	9a 83       	std	Y+2, r25	; 0x02
     fc6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
	LCD_clearScreen();
     fc8:	0e 94 fe 15 	call	0x2bfc	; 0x2bfc <LCD_clearScreen>
	/*If Password MATCHED display main menu one time before while*/
	Display_Main_Options();
     fcc:	0e 94 1c 08 	call	0x1038	; 0x1038 <Display_Main_Options>
}
     fd0:	a7 96       	adiw	r28, 0x27	; 39
     fd2:	0f b6       	in	r0, 0x3f	; 63
     fd4:	f8 94       	cli
     fd6:	de bf       	out	0x3e, r29	; 62
     fd8:	0f be       	out	0x3f, r0	; 63
     fda:	cd bf       	out	0x3d, r28	; 61
     fdc:	cf 91       	pop	r28
     fde:	df 91       	pop	r29
     fe0:	08 95       	ret

00000fe2 <Enter_Pass_Message>:

/*******************************************************************************/
void Enter_Pass_Message(void){
     fe2:	df 93       	push	r29
     fe4:	cf 93       	push	r28
     fe6:	cd b7       	in	r28, 0x3d	; 61
     fe8:	de b7       	in	r29, 0x3e	; 62
	LCD_clearScreen();
     fea:	0e 94 fe 15 	call	0x2bfc	; 0x2bfc <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"Plz Enter Pass:");
     fee:	2f e9       	ldi	r18, 0x9F	; 159
     ff0:	30 e0       	ldi	r19, 0x00	; 0
     ff2:	80 e0       	ldi	r24, 0x00	; 0
     ff4:	60 e0       	ldi	r22, 0x00	; 0
     ff6:	a9 01       	movw	r20, r18
     ff8:	0e 94 c2 15 	call	0x2b84	; 0x2b84 <LCD_displayStringRowColumn>
	LCD_moveCursor(1,0);
     ffc:	81 e0       	ldi	r24, 0x01	; 1
     ffe:	60 e0       	ldi	r22, 0x00	; 0
    1000:	0e 94 80 15 	call	0x2b00	; 0x2b00 <LCD_moveCursor>
}
    1004:	cf 91       	pop	r28
    1006:	df 91       	pop	r29
    1008:	08 95       	ret

0000100a <RePassword_Message>:
/*******************************************************************************/
void RePassword_Message(void){
    100a:	df 93       	push	r29
    100c:	cf 93       	push	r28
    100e:	cd b7       	in	r28, 0x3d	; 61
    1010:	de b7       	in	r29, 0x3e	; 62
	LCD_clearScreen();
    1012:	0e 94 fe 15 	call	0x2bfc	; 0x2bfc <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"Plz re-enter the");
    1016:	2f ea       	ldi	r18, 0xAF	; 175
    1018:	30 e0       	ldi	r19, 0x00	; 0
    101a:	80 e0       	ldi	r24, 0x00	; 0
    101c:	60 e0       	ldi	r22, 0x00	; 0
    101e:	a9 01       	movw	r20, r18
    1020:	0e 94 c2 15 	call	0x2b84	; 0x2b84 <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1,0,"same pass: ");
    1024:	20 ec       	ldi	r18, 0xC0	; 192
    1026:	30 e0       	ldi	r19, 0x00	; 0
    1028:	81 e0       	ldi	r24, 0x01	; 1
    102a:	60 e0       	ldi	r22, 0x00	; 0
    102c:	a9 01       	movw	r20, r18
    102e:	0e 94 c2 15 	call	0x2b84	; 0x2b84 <LCD_displayStringRowColumn>
}
    1032:	cf 91       	pop	r28
    1034:	df 91       	pop	r29
    1036:	08 95       	ret

00001038 <Display_Main_Options>:
/*******************************************************************************/
void Display_Main_Options(void){
    1038:	df 93       	push	r29
    103a:	cf 93       	push	r28
    103c:	cd b7       	in	r28, 0x3d	; 61
    103e:	de b7       	in	r29, 0x3e	; 62
	LCD_clearScreen();
    1040:	0e 94 fe 15 	call	0x2bfc	; 0x2bfc <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0," + : Open door");
    1044:	2c ec       	ldi	r18, 0xCC	; 204
    1046:	30 e0       	ldi	r19, 0x00	; 0
    1048:	80 e0       	ldi	r24, 0x00	; 0
    104a:	60 e0       	ldi	r22, 0x00	; 0
    104c:	a9 01       	movw	r20, r18
    104e:	0e 94 c2 15 	call	0x2b84	; 0x2b84 <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1,0," - : Change Pass");
    1052:	2b ed       	ldi	r18, 0xDB	; 219
    1054:	30 e0       	ldi	r19, 0x00	; 0
    1056:	81 e0       	ldi	r24, 0x01	; 1
    1058:	60 e0       	ldi	r22, 0x00	; 0
    105a:	a9 01       	movw	r20, r18
    105c:	0e 94 c2 15 	call	0x2b84	; 0x2b84 <LCD_displayStringRowColumn>
}
    1060:	cf 91       	pop	r28
    1062:	df 91       	pop	r29
    1064:	08 95       	ret

00001066 <change_Pass_Message>:
/*******************************************************************************/
void change_Pass_Message(void){
    1066:	df 93       	push	r29
    1068:	cf 93       	push	r28
    106a:	cd b7       	in	r28, 0x3d	; 61
    106c:	de b7       	in	r29, 0x3e	; 62
	LCD_clearScreen();
    106e:	0e 94 fe 15 	call	0x2bfc	; 0x2bfc <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"Plz enter your");
    1072:	2c ee       	ldi	r18, 0xEC	; 236
    1074:	30 e0       	ldi	r19, 0x00	; 0
    1076:	80 e0       	ldi	r24, 0x00	; 0
    1078:	60 e0       	ldi	r22, 0x00	; 0
    107a:	a9 01       	movw	r20, r18
    107c:	0e 94 c2 15 	call	0x2b84	; 0x2b84 <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1,0,"old pass: ");
    1080:	2b ef       	ldi	r18, 0xFB	; 251
    1082:	30 e0       	ldi	r19, 0x00	; 0
    1084:	81 e0       	ldi	r24, 0x01	; 1
    1086:	60 e0       	ldi	r22, 0x00	; 0
    1088:	a9 01       	movw	r20, r18
    108a:	0e 94 c2 15 	call	0x2b84	; 0x2b84 <LCD_displayStringRowColumn>
}
    108e:	cf 91       	pop	r28
    1090:	df 91       	pop	r29
    1092:	08 95       	ret

00001094 <Warning_Message>:
/*******************************************************************************/
void Warning_Message(void){
    1094:	df 93       	push	r29
    1096:	cf 93       	push	r28
    1098:	cd b7       	in	r28, 0x3d	; 61
    109a:	de b7       	in	r29, 0x3e	; 62
	g_ticks=0;
    109c:	10 92 6a 01 	sts	0x016A, r1
    10a0:	10 92 69 01 	sts	0x0169, r1
	LCD_clearScreen();
    10a4:	0e 94 fe 15 	call	0x2bfc	; 0x2bfc <LCD_clearScreen>
    10a8:	07 c0       	rjmp	.+14     	; 0x10b8 <Warning_Message+0x24>
	while(g_ticks < WARNING){
		LCD_displayStringRowColumn(0,2,"!!!Warning!!!");
    10aa:	26 e0       	ldi	r18, 0x06	; 6
    10ac:	31 e0       	ldi	r19, 0x01	; 1
    10ae:	80 e0       	ldi	r24, 0x00	; 0
    10b0:	62 e0       	ldi	r22, 0x02	; 2
    10b2:	a9 01       	movw	r20, r18
    10b4:	0e 94 c2 15 	call	0x2b84	; 0x2b84 <LCD_displayStringRowColumn>
}
/*******************************************************************************/
void Warning_Message(void){
	g_ticks=0;
	LCD_clearScreen();
	while(g_ticks < WARNING){
    10b8:	80 91 69 01 	lds	r24, 0x0169
    10bc:	90 91 6a 01 	lds	r25, 0x016A
    10c0:	8c 33       	cpi	r24, 0x3C	; 60
    10c2:	91 05       	cpc	r25, r1
    10c4:	90 f3       	brcs	.-28     	; 0x10aa <Warning_Message+0x16>
		LCD_displayStringRowColumn(0,2,"!!!Warning!!!");
	}
	LCD_clearScreen();
    10c6:	0e 94 fe 15 	call	0x2bfc	; 0x2bfc <LCD_clearScreen>
	/*The LCD will always display the main system options*/
	Display_Main_Options();
    10ca:	0e 94 1c 08 	call	0x1038	; 0x1038 <Display_Main_Options>

}
    10ce:	cf 91       	pop	r28
    10d0:	df 91       	pop	r29
    10d2:	08 95       	ret

000010d4 <Wrong_Message>:
/*******************************************************************************/
void Wrong_Message(void){
    10d4:	df 93       	push	r29
    10d6:	cf 93       	push	r28
    10d8:	cd b7       	in	r28, 0x3d	; 61
    10da:	de b7       	in	r29, 0x3e	; 62
    10dc:	2e 97       	sbiw	r28, 0x0e	; 14
    10de:	0f b6       	in	r0, 0x3f	; 63
    10e0:	f8 94       	cli
    10e2:	de bf       	out	0x3e, r29	; 62
    10e4:	0f be       	out	0x3f, r0	; 63
    10e6:	cd bf       	out	0x3d, r28	; 61
	LCD_clearScreen();
    10e8:	0e 94 fe 15 	call	0x2bfc	; 0x2bfc <LCD_clearScreen>
	LCD_displayStringRowColumn(0,4,"Wrong Pass");
    10ec:	24 e1       	ldi	r18, 0x14	; 20
    10ee:	31 e0       	ldi	r19, 0x01	; 1
    10f0:	80 e0       	ldi	r24, 0x00	; 0
    10f2:	64 e0       	ldi	r22, 0x04	; 4
    10f4:	a9 01       	movw	r20, r18
    10f6:	0e 94 c2 15 	call	0x2b84	; 0x2b84 <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1,4,"Try again!");
    10fa:	23 e8       	ldi	r18, 0x83	; 131
    10fc:	30 e0       	ldi	r19, 0x00	; 0
    10fe:	81 e0       	ldi	r24, 0x01	; 1
    1100:	64 e0       	ldi	r22, 0x04	; 4
    1102:	a9 01       	movw	r20, r18
    1104:	0e 94 c2 15 	call	0x2b84	; 0x2b84 <LCD_displayStringRowColumn>
    1108:	80 e0       	ldi	r24, 0x00	; 0
    110a:	90 e0       	ldi	r25, 0x00	; 0
    110c:	aa e7       	ldi	r26, 0x7A	; 122
    110e:	b4 e4       	ldi	r27, 0x44	; 68
    1110:	8b 87       	std	Y+11, r24	; 0x0b
    1112:	9c 87       	std	Y+12, r25	; 0x0c
    1114:	ad 87       	std	Y+13, r26	; 0x0d
    1116:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1118:	6b 85       	ldd	r22, Y+11	; 0x0b
    111a:	7c 85       	ldd	r23, Y+12	; 0x0c
    111c:	8d 85       	ldd	r24, Y+13	; 0x0d
    111e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1120:	20 e0       	ldi	r18, 0x00	; 0
    1122:	30 e0       	ldi	r19, 0x00	; 0
    1124:	4a ef       	ldi	r20, 0xFA	; 250
    1126:	54 e4       	ldi	r21, 0x44	; 68
    1128:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    112c:	dc 01       	movw	r26, r24
    112e:	cb 01       	movw	r24, r22
    1130:	8f 83       	std	Y+7, r24	; 0x07
    1132:	98 87       	std	Y+8, r25	; 0x08
    1134:	a9 87       	std	Y+9, r26	; 0x09
    1136:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1138:	6f 81       	ldd	r22, Y+7	; 0x07
    113a:	78 85       	ldd	r23, Y+8	; 0x08
    113c:	89 85       	ldd	r24, Y+9	; 0x09
    113e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1140:	20 e0       	ldi	r18, 0x00	; 0
    1142:	30 e0       	ldi	r19, 0x00	; 0
    1144:	40 e8       	ldi	r20, 0x80	; 128
    1146:	5f e3       	ldi	r21, 0x3F	; 63
    1148:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    114c:	88 23       	and	r24, r24
    114e:	2c f4       	brge	.+10     	; 0x115a <Wrong_Message+0x86>
		__ticks = 1;
    1150:	81 e0       	ldi	r24, 0x01	; 1
    1152:	90 e0       	ldi	r25, 0x00	; 0
    1154:	9e 83       	std	Y+6, r25	; 0x06
    1156:	8d 83       	std	Y+5, r24	; 0x05
    1158:	3f c0       	rjmp	.+126    	; 0x11d8 <Wrong_Message+0x104>
	else if (__tmp > 65535)
    115a:	6f 81       	ldd	r22, Y+7	; 0x07
    115c:	78 85       	ldd	r23, Y+8	; 0x08
    115e:	89 85       	ldd	r24, Y+9	; 0x09
    1160:	9a 85       	ldd	r25, Y+10	; 0x0a
    1162:	20 e0       	ldi	r18, 0x00	; 0
    1164:	3f ef       	ldi	r19, 0xFF	; 255
    1166:	4f e7       	ldi	r20, 0x7F	; 127
    1168:	57 e4       	ldi	r21, 0x47	; 71
    116a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    116e:	18 16       	cp	r1, r24
    1170:	4c f5       	brge	.+82     	; 0x11c4 <Wrong_Message+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1172:	6b 85       	ldd	r22, Y+11	; 0x0b
    1174:	7c 85       	ldd	r23, Y+12	; 0x0c
    1176:	8d 85       	ldd	r24, Y+13	; 0x0d
    1178:	9e 85       	ldd	r25, Y+14	; 0x0e
    117a:	20 e0       	ldi	r18, 0x00	; 0
    117c:	30 e0       	ldi	r19, 0x00	; 0
    117e:	40 e2       	ldi	r20, 0x20	; 32
    1180:	51 e4       	ldi	r21, 0x41	; 65
    1182:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1186:	dc 01       	movw	r26, r24
    1188:	cb 01       	movw	r24, r22
    118a:	bc 01       	movw	r22, r24
    118c:	cd 01       	movw	r24, r26
    118e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1192:	dc 01       	movw	r26, r24
    1194:	cb 01       	movw	r24, r22
    1196:	9e 83       	std	Y+6, r25	; 0x06
    1198:	8d 83       	std	Y+5, r24	; 0x05
    119a:	0f c0       	rjmp	.+30     	; 0x11ba <Wrong_Message+0xe6>
    119c:	88 ec       	ldi	r24, 0xC8	; 200
    119e:	90 e0       	ldi	r25, 0x00	; 0
    11a0:	9c 83       	std	Y+4, r25	; 0x04
    11a2:	8b 83       	std	Y+3, r24	; 0x03
    11a4:	8b 81       	ldd	r24, Y+3	; 0x03
    11a6:	9c 81       	ldd	r25, Y+4	; 0x04
    11a8:	01 97       	sbiw	r24, 0x01	; 1
    11aa:	f1 f7       	brne	.-4      	; 0x11a8 <Wrong_Message+0xd4>
    11ac:	9c 83       	std	Y+4, r25	; 0x04
    11ae:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11b0:	8d 81       	ldd	r24, Y+5	; 0x05
    11b2:	9e 81       	ldd	r25, Y+6	; 0x06
    11b4:	01 97       	sbiw	r24, 0x01	; 1
    11b6:	9e 83       	std	Y+6, r25	; 0x06
    11b8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11ba:	8d 81       	ldd	r24, Y+5	; 0x05
    11bc:	9e 81       	ldd	r25, Y+6	; 0x06
    11be:	00 97       	sbiw	r24, 0x00	; 0
    11c0:	69 f7       	brne	.-38     	; 0x119c <Wrong_Message+0xc8>
    11c2:	14 c0       	rjmp	.+40     	; 0x11ec <Wrong_Message+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11c4:	6f 81       	ldd	r22, Y+7	; 0x07
    11c6:	78 85       	ldd	r23, Y+8	; 0x08
    11c8:	89 85       	ldd	r24, Y+9	; 0x09
    11ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    11cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11d0:	dc 01       	movw	r26, r24
    11d2:	cb 01       	movw	r24, r22
    11d4:	9e 83       	std	Y+6, r25	; 0x06
    11d6:	8d 83       	std	Y+5, r24	; 0x05
    11d8:	8d 81       	ldd	r24, Y+5	; 0x05
    11da:	9e 81       	ldd	r25, Y+6	; 0x06
    11dc:	9a 83       	std	Y+2, r25	; 0x02
    11de:	89 83       	std	Y+1, r24	; 0x01
    11e0:	89 81       	ldd	r24, Y+1	; 0x01
    11e2:	9a 81       	ldd	r25, Y+2	; 0x02
    11e4:	01 97       	sbiw	r24, 0x01	; 1
    11e6:	f1 f7       	brne	.-4      	; 0x11e4 <Wrong_Message+0x110>
    11e8:	9a 83       	std	Y+2, r25	; 0x02
    11ea:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
}
    11ec:	2e 96       	adiw	r28, 0x0e	; 14
    11ee:	0f b6       	in	r0, 0x3f	; 63
    11f0:	f8 94       	cli
    11f2:	de bf       	out	0x3e, r29	; 62
    11f4:	0f be       	out	0x3f, r0	; 63
    11f6:	cd bf       	out	0x3d, r28	; 61
    11f8:	cf 91       	pop	r28
    11fa:	df 91       	pop	r29
    11fc:	08 95       	ret

000011fe <Get_Password>:
/*******************************************************************************/
void Get_Password(uint8* pass,uint8 size){
    11fe:	df 93       	push	r29
    1200:	cf 93       	push	r28
    1202:	cd b7       	in	r28, 0x3d	; 61
    1204:	de b7       	in	r29, 0x3e	; 62
    1206:	a0 97       	sbiw	r28, 0x20	; 32
    1208:	0f b6       	in	r0, 0x3f	; 63
    120a:	f8 94       	cli
    120c:	de bf       	out	0x3e, r29	; 62
    120e:	0f be       	out	0x3f, r0	; 63
    1210:	cd bf       	out	0x3d, r28	; 61
    1212:	9f 8f       	std	Y+31, r25	; 0x1f
    1214:	8e 8f       	std	Y+30, r24	; 0x1e
    1216:	68 a3       	std	Y+32, r22	; 0x20
	uint8 key;
	for(i=0 ; i<size ; i++){
    1218:	10 92 6b 01 	sts	0x016B, r1
    121c:	fa c0       	rjmp	.+500    	; 0x1412 <Get_Password+0x214>
    121e:	80 e0       	ldi	r24, 0x00	; 0
    1220:	90 e0       	ldi	r25, 0x00	; 0
    1222:	a8 ec       	ldi	r26, 0xC8	; 200
    1224:	b3 e4       	ldi	r27, 0x43	; 67
    1226:	89 8f       	std	Y+25, r24	; 0x19
    1228:	9a 8f       	std	Y+26, r25	; 0x1a
    122a:	ab 8f       	std	Y+27, r26	; 0x1b
    122c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    122e:	69 8d       	ldd	r22, Y+25	; 0x19
    1230:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1232:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1234:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1236:	20 e0       	ldi	r18, 0x00	; 0
    1238:	30 e0       	ldi	r19, 0x00	; 0
    123a:	4a ef       	ldi	r20, 0xFA	; 250
    123c:	54 e4       	ldi	r21, 0x44	; 68
    123e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1242:	dc 01       	movw	r26, r24
    1244:	cb 01       	movw	r24, r22
    1246:	8d 8b       	std	Y+21, r24	; 0x15
    1248:	9e 8b       	std	Y+22, r25	; 0x16
    124a:	af 8b       	std	Y+23, r26	; 0x17
    124c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    124e:	6d 89       	ldd	r22, Y+21	; 0x15
    1250:	7e 89       	ldd	r23, Y+22	; 0x16
    1252:	8f 89       	ldd	r24, Y+23	; 0x17
    1254:	98 8d       	ldd	r25, Y+24	; 0x18
    1256:	20 e0       	ldi	r18, 0x00	; 0
    1258:	30 e0       	ldi	r19, 0x00	; 0
    125a:	40 e8       	ldi	r20, 0x80	; 128
    125c:	5f e3       	ldi	r21, 0x3F	; 63
    125e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1262:	88 23       	and	r24, r24
    1264:	2c f4       	brge	.+10     	; 0x1270 <Get_Password+0x72>
		__ticks = 1;
    1266:	81 e0       	ldi	r24, 0x01	; 1
    1268:	90 e0       	ldi	r25, 0x00	; 0
    126a:	9c 8b       	std	Y+20, r25	; 0x14
    126c:	8b 8b       	std	Y+19, r24	; 0x13
    126e:	3f c0       	rjmp	.+126    	; 0x12ee <Get_Password+0xf0>
	else if (__tmp > 65535)
    1270:	6d 89       	ldd	r22, Y+21	; 0x15
    1272:	7e 89       	ldd	r23, Y+22	; 0x16
    1274:	8f 89       	ldd	r24, Y+23	; 0x17
    1276:	98 8d       	ldd	r25, Y+24	; 0x18
    1278:	20 e0       	ldi	r18, 0x00	; 0
    127a:	3f ef       	ldi	r19, 0xFF	; 255
    127c:	4f e7       	ldi	r20, 0x7F	; 127
    127e:	57 e4       	ldi	r21, 0x47	; 71
    1280:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1284:	18 16       	cp	r1, r24
    1286:	4c f5       	brge	.+82     	; 0x12da <Get_Password+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1288:	69 8d       	ldd	r22, Y+25	; 0x19
    128a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    128c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    128e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1290:	20 e0       	ldi	r18, 0x00	; 0
    1292:	30 e0       	ldi	r19, 0x00	; 0
    1294:	40 e2       	ldi	r20, 0x20	; 32
    1296:	51 e4       	ldi	r21, 0x41	; 65
    1298:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    129c:	dc 01       	movw	r26, r24
    129e:	cb 01       	movw	r24, r22
    12a0:	bc 01       	movw	r22, r24
    12a2:	cd 01       	movw	r24, r26
    12a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12a8:	dc 01       	movw	r26, r24
    12aa:	cb 01       	movw	r24, r22
    12ac:	9c 8b       	std	Y+20, r25	; 0x14
    12ae:	8b 8b       	std	Y+19, r24	; 0x13
    12b0:	0f c0       	rjmp	.+30     	; 0x12d0 <Get_Password+0xd2>
    12b2:	88 ec       	ldi	r24, 0xC8	; 200
    12b4:	90 e0       	ldi	r25, 0x00	; 0
    12b6:	9a 8b       	std	Y+18, r25	; 0x12
    12b8:	89 8b       	std	Y+17, r24	; 0x11
    12ba:	89 89       	ldd	r24, Y+17	; 0x11
    12bc:	9a 89       	ldd	r25, Y+18	; 0x12
    12be:	01 97       	sbiw	r24, 0x01	; 1
    12c0:	f1 f7       	brne	.-4      	; 0x12be <Get_Password+0xc0>
    12c2:	9a 8b       	std	Y+18, r25	; 0x12
    12c4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12c6:	8b 89       	ldd	r24, Y+19	; 0x13
    12c8:	9c 89       	ldd	r25, Y+20	; 0x14
    12ca:	01 97       	sbiw	r24, 0x01	; 1
    12cc:	9c 8b       	std	Y+20, r25	; 0x14
    12ce:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12d0:	8b 89       	ldd	r24, Y+19	; 0x13
    12d2:	9c 89       	ldd	r25, Y+20	; 0x14
    12d4:	00 97       	sbiw	r24, 0x00	; 0
    12d6:	69 f7       	brne	.-38     	; 0x12b2 <Get_Password+0xb4>
    12d8:	14 c0       	rjmp	.+40     	; 0x1302 <Get_Password+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12da:	6d 89       	ldd	r22, Y+21	; 0x15
    12dc:	7e 89       	ldd	r23, Y+22	; 0x16
    12de:	8f 89       	ldd	r24, Y+23	; 0x17
    12e0:	98 8d       	ldd	r25, Y+24	; 0x18
    12e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12e6:	dc 01       	movw	r26, r24
    12e8:	cb 01       	movw	r24, r22
    12ea:	9c 8b       	std	Y+20, r25	; 0x14
    12ec:	8b 8b       	std	Y+19, r24	; 0x13
    12ee:	8b 89       	ldd	r24, Y+19	; 0x13
    12f0:	9c 89       	ldd	r25, Y+20	; 0x14
    12f2:	98 8b       	std	Y+16, r25	; 0x10
    12f4:	8f 87       	std	Y+15, r24	; 0x0f
    12f6:	8f 85       	ldd	r24, Y+15	; 0x0f
    12f8:	98 89       	ldd	r25, Y+16	; 0x10
    12fa:	01 97       	sbiw	r24, 0x01	; 1
    12fc:	f1 f7       	brne	.-4      	; 0x12fa <Get_Password+0xfc>
    12fe:	98 8b       	std	Y+16, r25	; 0x10
    1300:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(400);
		key =  KEYPAD_getPressedKey();
    1302:	0e 94 52 0f 	call	0x1ea4	; 0x1ea4 <KEYPAD_getPressedKey>
    1306:	8d 8f       	std	Y+29, r24	; 0x1d
		LCD_displayCharacter('*');
    1308:	8a e2       	ldi	r24, 0x2A	; 42
    130a:	0e 94 68 13 	call	0x26d0	; 0x26d0 <LCD_displayCharacter>
		pass[i] =  key;
    130e:	80 91 6b 01 	lds	r24, 0x016B
    1312:	28 2f       	mov	r18, r24
    1314:	30 e0       	ldi	r19, 0x00	; 0
    1316:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1318:	9f 8d       	ldd	r25, Y+31	; 0x1f
    131a:	fc 01       	movw	r30, r24
    131c:	e2 0f       	add	r30, r18
    131e:	f3 1f       	adc	r31, r19
    1320:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1322:	80 83       	st	Z, r24
    1324:	80 e0       	ldi	r24, 0x00	; 0
    1326:	90 e0       	ldi	r25, 0x00	; 0
    1328:	a8 e4       	ldi	r26, 0x48	; 72
    132a:	b3 e4       	ldi	r27, 0x43	; 67
    132c:	8b 87       	std	Y+11, r24	; 0x0b
    132e:	9c 87       	std	Y+12, r25	; 0x0c
    1330:	ad 87       	std	Y+13, r26	; 0x0d
    1332:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1334:	6b 85       	ldd	r22, Y+11	; 0x0b
    1336:	7c 85       	ldd	r23, Y+12	; 0x0c
    1338:	8d 85       	ldd	r24, Y+13	; 0x0d
    133a:	9e 85       	ldd	r25, Y+14	; 0x0e
    133c:	20 e0       	ldi	r18, 0x00	; 0
    133e:	30 e0       	ldi	r19, 0x00	; 0
    1340:	4a ef       	ldi	r20, 0xFA	; 250
    1342:	54 e4       	ldi	r21, 0x44	; 68
    1344:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1348:	dc 01       	movw	r26, r24
    134a:	cb 01       	movw	r24, r22
    134c:	8f 83       	std	Y+7, r24	; 0x07
    134e:	98 87       	std	Y+8, r25	; 0x08
    1350:	a9 87       	std	Y+9, r26	; 0x09
    1352:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1354:	6f 81       	ldd	r22, Y+7	; 0x07
    1356:	78 85       	ldd	r23, Y+8	; 0x08
    1358:	89 85       	ldd	r24, Y+9	; 0x09
    135a:	9a 85       	ldd	r25, Y+10	; 0x0a
    135c:	20 e0       	ldi	r18, 0x00	; 0
    135e:	30 e0       	ldi	r19, 0x00	; 0
    1360:	40 e8       	ldi	r20, 0x80	; 128
    1362:	5f e3       	ldi	r21, 0x3F	; 63
    1364:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1368:	88 23       	and	r24, r24
    136a:	2c f4       	brge	.+10     	; 0x1376 <Get_Password+0x178>
		__ticks = 1;
    136c:	81 e0       	ldi	r24, 0x01	; 1
    136e:	90 e0       	ldi	r25, 0x00	; 0
    1370:	9e 83       	std	Y+6, r25	; 0x06
    1372:	8d 83       	std	Y+5, r24	; 0x05
    1374:	3f c0       	rjmp	.+126    	; 0x13f4 <Get_Password+0x1f6>
	else if (__tmp > 65535)
    1376:	6f 81       	ldd	r22, Y+7	; 0x07
    1378:	78 85       	ldd	r23, Y+8	; 0x08
    137a:	89 85       	ldd	r24, Y+9	; 0x09
    137c:	9a 85       	ldd	r25, Y+10	; 0x0a
    137e:	20 e0       	ldi	r18, 0x00	; 0
    1380:	3f ef       	ldi	r19, 0xFF	; 255
    1382:	4f e7       	ldi	r20, 0x7F	; 127
    1384:	57 e4       	ldi	r21, 0x47	; 71
    1386:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    138a:	18 16       	cp	r1, r24
    138c:	4c f5       	brge	.+82     	; 0x13e0 <Get_Password+0x1e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    138e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1390:	7c 85       	ldd	r23, Y+12	; 0x0c
    1392:	8d 85       	ldd	r24, Y+13	; 0x0d
    1394:	9e 85       	ldd	r25, Y+14	; 0x0e
    1396:	20 e0       	ldi	r18, 0x00	; 0
    1398:	30 e0       	ldi	r19, 0x00	; 0
    139a:	40 e2       	ldi	r20, 0x20	; 32
    139c:	51 e4       	ldi	r21, 0x41	; 65
    139e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13a2:	dc 01       	movw	r26, r24
    13a4:	cb 01       	movw	r24, r22
    13a6:	bc 01       	movw	r22, r24
    13a8:	cd 01       	movw	r24, r26
    13aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13ae:	dc 01       	movw	r26, r24
    13b0:	cb 01       	movw	r24, r22
    13b2:	9e 83       	std	Y+6, r25	; 0x06
    13b4:	8d 83       	std	Y+5, r24	; 0x05
    13b6:	0f c0       	rjmp	.+30     	; 0x13d6 <Get_Password+0x1d8>
    13b8:	88 ec       	ldi	r24, 0xC8	; 200
    13ba:	90 e0       	ldi	r25, 0x00	; 0
    13bc:	9c 83       	std	Y+4, r25	; 0x04
    13be:	8b 83       	std	Y+3, r24	; 0x03
    13c0:	8b 81       	ldd	r24, Y+3	; 0x03
    13c2:	9c 81       	ldd	r25, Y+4	; 0x04
    13c4:	01 97       	sbiw	r24, 0x01	; 1
    13c6:	f1 f7       	brne	.-4      	; 0x13c4 <Get_Password+0x1c6>
    13c8:	9c 83       	std	Y+4, r25	; 0x04
    13ca:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13cc:	8d 81       	ldd	r24, Y+5	; 0x05
    13ce:	9e 81       	ldd	r25, Y+6	; 0x06
    13d0:	01 97       	sbiw	r24, 0x01	; 1
    13d2:	9e 83       	std	Y+6, r25	; 0x06
    13d4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13d6:	8d 81       	ldd	r24, Y+5	; 0x05
    13d8:	9e 81       	ldd	r25, Y+6	; 0x06
    13da:	00 97       	sbiw	r24, 0x00	; 0
    13dc:	69 f7       	brne	.-38     	; 0x13b8 <Get_Password+0x1ba>
    13de:	14 c0       	rjmp	.+40     	; 0x1408 <Get_Password+0x20a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13e0:	6f 81       	ldd	r22, Y+7	; 0x07
    13e2:	78 85       	ldd	r23, Y+8	; 0x08
    13e4:	89 85       	ldd	r24, Y+9	; 0x09
    13e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    13e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13ec:	dc 01       	movw	r26, r24
    13ee:	cb 01       	movw	r24, r22
    13f0:	9e 83       	std	Y+6, r25	; 0x06
    13f2:	8d 83       	std	Y+5, r24	; 0x05
    13f4:	8d 81       	ldd	r24, Y+5	; 0x05
    13f6:	9e 81       	ldd	r25, Y+6	; 0x06
    13f8:	9a 83       	std	Y+2, r25	; 0x02
    13fa:	89 83       	std	Y+1, r24	; 0x01
    13fc:	89 81       	ldd	r24, Y+1	; 0x01
    13fe:	9a 81       	ldd	r25, Y+2	; 0x02
    1400:	01 97       	sbiw	r24, 0x01	; 1
    1402:	f1 f7       	brne	.-4      	; 0x1400 <Get_Password+0x202>
    1404:	9a 83       	std	Y+2, r25	; 0x02
    1406:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
}
/*******************************************************************************/
void Get_Password(uint8* pass,uint8 size){
	uint8 key;
	for(i=0 ; i<size ; i++){
    1408:	80 91 6b 01 	lds	r24, 0x016B
    140c:	8f 5f       	subi	r24, 0xFF	; 255
    140e:	80 93 6b 01 	sts	0x016B, r24
    1412:	90 91 6b 01 	lds	r25, 0x016B
    1416:	88 a1       	ldd	r24, Y+32	; 0x20
    1418:	98 17       	cp	r25, r24
    141a:	08 f4       	brcc	.+2      	; 0x141e <Get_Password+0x220>
    141c:	00 cf       	rjmp	.-512    	; 0x121e <Get_Password+0x20>
		LCD_displayCharacter('*');
		pass[i] =  key;
		_delay_ms(200);
	}

	while(KEYPAD_getPressedKey() != ENTER);
    141e:	0e 94 52 0f 	call	0x1ea4	; 0x1ea4 <KEYPAD_getPressedKey>
    1422:	8d 33       	cpi	r24, 0x3D	; 61
    1424:	e1 f7       	brne	.-8      	; 0x141e <Get_Password+0x220>
}
    1426:	a0 96       	adiw	r28, 0x20	; 32
    1428:	0f b6       	in	r0, 0x3f	; 63
    142a:	f8 94       	cli
    142c:	de bf       	out	0x3e, r29	; 62
    142e:	0f be       	out	0x3f, r0	; 63
    1430:	cd bf       	out	0x3d, r28	; 61
    1432:	cf 91       	pop	r28
    1434:	df 91       	pop	r29
    1436:	08 95       	ret

00001438 <Send_Password>:
/*******************************************************************************/
void Send_Password(uint8 *pass ,uint8 size){
    1438:	df 93       	push	r29
    143a:	cf 93       	push	r28
    143c:	cd b7       	in	r28, 0x3d	; 61
    143e:	de b7       	in	r29, 0x3e	; 62
    1440:	61 97       	sbiw	r28, 0x11	; 17
    1442:	0f b6       	in	r0, 0x3f	; 63
    1444:	f8 94       	cli
    1446:	de bf       	out	0x3e, r29	; 62
    1448:	0f be       	out	0x3f, r0	; 63
    144a:	cd bf       	out	0x3d, r28	; 61
    144c:	98 8b       	std	Y+16, r25	; 0x10
    144e:	8f 87       	std	Y+15, r24	; 0x0f
    1450:	69 8b       	std	Y+17, r22	; 0x11

	for (i=0;i<size;i++)
    1452:	10 92 6b 01 	sts	0x016B, r1
    1456:	83 c0       	rjmp	.+262    	; 0x155e <Send_Password+0x126>
	{
		UART_sendByte(pass[i]);
    1458:	80 91 6b 01 	lds	r24, 0x016B
    145c:	28 2f       	mov	r18, r24
    145e:	30 e0       	ldi	r19, 0x00	; 0
    1460:	8f 85       	ldd	r24, Y+15	; 0x0f
    1462:	98 89       	ldd	r25, Y+16	; 0x10
    1464:	fc 01       	movw	r30, r24
    1466:	e2 0f       	add	r30, r18
    1468:	f3 1f       	adc	r31, r19
    146a:	80 81       	ld	r24, Z
    146c:	0e 94 85 17 	call	0x2f0a	; 0x2f0a <UART_sendByte>
    1470:	80 e0       	ldi	r24, 0x00	; 0
    1472:	90 e0       	ldi	r25, 0x00	; 0
    1474:	a8 e4       	ldi	r26, 0x48	; 72
    1476:	b2 e4       	ldi	r27, 0x42	; 66
    1478:	8b 87       	std	Y+11, r24	; 0x0b
    147a:	9c 87       	std	Y+12, r25	; 0x0c
    147c:	ad 87       	std	Y+13, r26	; 0x0d
    147e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1480:	6b 85       	ldd	r22, Y+11	; 0x0b
    1482:	7c 85       	ldd	r23, Y+12	; 0x0c
    1484:	8d 85       	ldd	r24, Y+13	; 0x0d
    1486:	9e 85       	ldd	r25, Y+14	; 0x0e
    1488:	20 e0       	ldi	r18, 0x00	; 0
    148a:	30 e0       	ldi	r19, 0x00	; 0
    148c:	4a ef       	ldi	r20, 0xFA	; 250
    148e:	54 e4       	ldi	r21, 0x44	; 68
    1490:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1494:	dc 01       	movw	r26, r24
    1496:	cb 01       	movw	r24, r22
    1498:	8f 83       	std	Y+7, r24	; 0x07
    149a:	98 87       	std	Y+8, r25	; 0x08
    149c:	a9 87       	std	Y+9, r26	; 0x09
    149e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    14a0:	6f 81       	ldd	r22, Y+7	; 0x07
    14a2:	78 85       	ldd	r23, Y+8	; 0x08
    14a4:	89 85       	ldd	r24, Y+9	; 0x09
    14a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    14a8:	20 e0       	ldi	r18, 0x00	; 0
    14aa:	30 e0       	ldi	r19, 0x00	; 0
    14ac:	40 e8       	ldi	r20, 0x80	; 128
    14ae:	5f e3       	ldi	r21, 0x3F	; 63
    14b0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    14b4:	88 23       	and	r24, r24
    14b6:	2c f4       	brge	.+10     	; 0x14c2 <Send_Password+0x8a>
		__ticks = 1;
    14b8:	81 e0       	ldi	r24, 0x01	; 1
    14ba:	90 e0       	ldi	r25, 0x00	; 0
    14bc:	9e 83       	std	Y+6, r25	; 0x06
    14be:	8d 83       	std	Y+5, r24	; 0x05
    14c0:	3f c0       	rjmp	.+126    	; 0x1540 <Send_Password+0x108>
	else if (__tmp > 65535)
    14c2:	6f 81       	ldd	r22, Y+7	; 0x07
    14c4:	78 85       	ldd	r23, Y+8	; 0x08
    14c6:	89 85       	ldd	r24, Y+9	; 0x09
    14c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    14ca:	20 e0       	ldi	r18, 0x00	; 0
    14cc:	3f ef       	ldi	r19, 0xFF	; 255
    14ce:	4f e7       	ldi	r20, 0x7F	; 127
    14d0:	57 e4       	ldi	r21, 0x47	; 71
    14d2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    14d6:	18 16       	cp	r1, r24
    14d8:	4c f5       	brge	.+82     	; 0x152c <Send_Password+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14da:	6b 85       	ldd	r22, Y+11	; 0x0b
    14dc:	7c 85       	ldd	r23, Y+12	; 0x0c
    14de:	8d 85       	ldd	r24, Y+13	; 0x0d
    14e0:	9e 85       	ldd	r25, Y+14	; 0x0e
    14e2:	20 e0       	ldi	r18, 0x00	; 0
    14e4:	30 e0       	ldi	r19, 0x00	; 0
    14e6:	40 e2       	ldi	r20, 0x20	; 32
    14e8:	51 e4       	ldi	r21, 0x41	; 65
    14ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14ee:	dc 01       	movw	r26, r24
    14f0:	cb 01       	movw	r24, r22
    14f2:	bc 01       	movw	r22, r24
    14f4:	cd 01       	movw	r24, r26
    14f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14fa:	dc 01       	movw	r26, r24
    14fc:	cb 01       	movw	r24, r22
    14fe:	9e 83       	std	Y+6, r25	; 0x06
    1500:	8d 83       	std	Y+5, r24	; 0x05
    1502:	0f c0       	rjmp	.+30     	; 0x1522 <Send_Password+0xea>
    1504:	88 ec       	ldi	r24, 0xC8	; 200
    1506:	90 e0       	ldi	r25, 0x00	; 0
    1508:	9c 83       	std	Y+4, r25	; 0x04
    150a:	8b 83       	std	Y+3, r24	; 0x03
    150c:	8b 81       	ldd	r24, Y+3	; 0x03
    150e:	9c 81       	ldd	r25, Y+4	; 0x04
    1510:	01 97       	sbiw	r24, 0x01	; 1
    1512:	f1 f7       	brne	.-4      	; 0x1510 <Send_Password+0xd8>
    1514:	9c 83       	std	Y+4, r25	; 0x04
    1516:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1518:	8d 81       	ldd	r24, Y+5	; 0x05
    151a:	9e 81       	ldd	r25, Y+6	; 0x06
    151c:	01 97       	sbiw	r24, 0x01	; 1
    151e:	9e 83       	std	Y+6, r25	; 0x06
    1520:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1522:	8d 81       	ldd	r24, Y+5	; 0x05
    1524:	9e 81       	ldd	r25, Y+6	; 0x06
    1526:	00 97       	sbiw	r24, 0x00	; 0
    1528:	69 f7       	brne	.-38     	; 0x1504 <Send_Password+0xcc>
    152a:	14 c0       	rjmp	.+40     	; 0x1554 <Send_Password+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    152c:	6f 81       	ldd	r22, Y+7	; 0x07
    152e:	78 85       	ldd	r23, Y+8	; 0x08
    1530:	89 85       	ldd	r24, Y+9	; 0x09
    1532:	9a 85       	ldd	r25, Y+10	; 0x0a
    1534:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1538:	dc 01       	movw	r26, r24
    153a:	cb 01       	movw	r24, r22
    153c:	9e 83       	std	Y+6, r25	; 0x06
    153e:	8d 83       	std	Y+5, r24	; 0x05
    1540:	8d 81       	ldd	r24, Y+5	; 0x05
    1542:	9e 81       	ldd	r25, Y+6	; 0x06
    1544:	9a 83       	std	Y+2, r25	; 0x02
    1546:	89 83       	std	Y+1, r24	; 0x01
    1548:	89 81       	ldd	r24, Y+1	; 0x01
    154a:	9a 81       	ldd	r25, Y+2	; 0x02
    154c:	01 97       	sbiw	r24, 0x01	; 1
    154e:	f1 f7       	brne	.-4      	; 0x154c <Send_Password+0x114>
    1550:	9a 83       	std	Y+2, r25	; 0x02
    1552:	89 83       	std	Y+1, r24	; 0x01
	while(KEYPAD_getPressedKey() != ENTER);
}
/*******************************************************************************/
void Send_Password(uint8 *pass ,uint8 size){

	for (i=0;i<size;i++)
    1554:	80 91 6b 01 	lds	r24, 0x016B
    1558:	8f 5f       	subi	r24, 0xFF	; 255
    155a:	80 93 6b 01 	sts	0x016B, r24
    155e:	90 91 6b 01 	lds	r25, 0x016B
    1562:	89 89       	ldd	r24, Y+17	; 0x11
    1564:	98 17       	cp	r25, r24
    1566:	08 f4       	brcc	.+2      	; 0x156a <Send_Password+0x132>
    1568:	77 cf       	rjmp	.-274    	; 0x1458 <Send_Password+0x20>
	{
		UART_sendByte(pass[i]);
		_delay_ms(50);
	}
}
    156a:	61 96       	adiw	r28, 0x11	; 17
    156c:	0f b6       	in	r0, 0x3f	; 63
    156e:	f8 94       	cli
    1570:	de bf       	out	0x3e, r29	; 62
    1572:	0f be       	out	0x3f, r0	; 63
    1574:	cd bf       	out	0x3d, r28	; 61
    1576:	cf 91       	pop	r28
    1578:	df 91       	pop	r29
    157a:	08 95       	ret

0000157c <open_Door>:
/*******************************************************************************/
void open_Door(){
    157c:	df 93       	push	r29
    157e:	cf 93       	push	r28
    1580:	0f 92       	push	r0
    1582:	cd b7       	in	r28, 0x3d	; 61
    1584:	de b7       	in	r29, 0x3e	; 62
	uint8 state = PASSWORDS_UNMATCH;
    1586:	19 82       	std	Y+1, r1	; 0x01
    1588:	2d c0       	rjmp	.+90     	; 0x15e4 <open_Door+0x68>

	while(state == PASSWORDS_UNMATCH){
		/*enter message*/
		Enter_Pass_Message();
    158a:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <Enter_Pass_Message>
		/*get password*/
		Get_Password(User_Current_Password,PASSWORD_SIZE);
    158e:	8e e6       	ldi	r24, 0x6E	; 110
    1590:	91 e0       	ldi	r25, 0x01	; 1
    1592:	65 e0       	ldi	r22, 0x05	; 5
    1594:	0e 94 ff 08 	call	0x11fe	; 0x11fe <Get_Password>
		/*send command to MC2*/
		UART_sendByte(OPEN_DOOR);
    1598:	8b e2       	ldi	r24, 0x2B	; 43
    159a:	0e 94 85 17 	call	0x2f0a	; 0x2f0a <UART_sendByte>

		while(UART_recieveByte() != MC2_READY);
    159e:	0e 94 9c 17 	call	0x2f38	; 0x2f38 <UART_recieveByte>
    15a2:	83 31       	cpi	r24, 0x13	; 19
    15a4:	e1 f7       	brne	.-8      	; 0x159e <open_Door+0x22>
		/*send password to check*/
		Send_Password(User_Current_Password,PASSWORD_SIZE);
    15a6:	8e e6       	ldi	r24, 0x6E	; 110
    15a8:	91 e0       	ldi	r25, 0x01	; 1
    15aa:	65 e0       	ldi	r22, 0x05	; 5
    15ac:	0e 94 1c 0a 	call	0x1438	; 0x1438 <Send_Password>

		UART_Received_Byte = UART_recieveByte();
    15b0:	0e 94 9c 17 	call	0x2f38	; 0x2f38 <UART_recieveByte>
    15b4:	80 93 68 01 	sts	0x0168, r24
		/*check the states of the entered password*/
		if (UART_Received_Byte == PASSWORDS_MATCH){
    15b8:	80 91 68 01 	lds	r24, 0x0168
    15bc:	81 30       	cpi	r24, 0x01	; 1
    15be:	19 f4       	brne	.+6      	; 0x15c6 <open_Door+0x4a>
			Motor_function();
    15c0:	0e 94 34 0b 	call	0x1668	; 0x1668 <Motor_function>
    15c4:	12 c0       	rjmp	.+36     	; 0x15ea <open_Door+0x6e>
			break;
		}
		else if(UART_Received_Byte  == PASSWORDS_UNMATCH){
    15c6:	80 91 68 01 	lds	r24, 0x0168
    15ca:	88 23       	and	r24, r24
    15cc:	21 f4       	brne	.+8      	; 0x15d6 <open_Door+0x5a>
			Wrong_Message();
    15ce:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <Wrong_Message>
			state = PASSWORDS_UNMATCH;
    15d2:	19 82       	std	Y+1, r1	; 0x01
    15d4:	07 c0       	rjmp	.+14     	; 0x15e4 <open_Door+0x68>
		}
		else if(UART_Received_Byte  == WARNING){
    15d6:	80 91 68 01 	lds	r24, 0x0168
    15da:	8c 33       	cpi	r24, 0x3C	; 60
    15dc:	19 f4       	brne	.+6      	; 0x15e4 <open_Door+0x68>
			Warning_Message();
    15de:	0e 94 4a 08 	call	0x1094	; 0x1094 <Warning_Message>
    15e2:	03 c0       	rjmp	.+6      	; 0x15ea <open_Door+0x6e>
}
/*******************************************************************************/
void open_Door(){
	uint8 state = PASSWORDS_UNMATCH;

	while(state == PASSWORDS_UNMATCH){
    15e4:	89 81       	ldd	r24, Y+1	; 0x01
    15e6:	88 23       	and	r24, r24
    15e8:	81 f2       	breq	.-96     	; 0x158a <open_Door+0xe>
			Warning_Message();
			break;
		}
	}

}
    15ea:	0f 90       	pop	r0
    15ec:	cf 91       	pop	r28
    15ee:	df 91       	pop	r29
    15f0:	08 95       	ret

000015f2 <change_Pass>:
/*******************************************************************************/
void change_Pass(void){
    15f2:	df 93       	push	r29
    15f4:	cf 93       	push	r28
    15f6:	0f 92       	push	r0
    15f8:	cd b7       	in	r28, 0x3d	; 61
    15fa:	de b7       	in	r29, 0x3e	; 62
	uint8 state = PASSWORDS_UNMATCH;
    15fc:	19 82       	std	Y+1, r1	; 0x01
    15fe:	2d c0       	rjmp	.+90     	; 0x165a <change_Pass+0x68>
	while(state == PASSWORDS_UNMATCH){
		/*change pass message*/
		change_Pass_Message();
    1600:	0e 94 33 08 	call	0x1066	; 0x1066 <change_Pass_Message>
		/*get password*/
		Get_Password(User_Current_Password,PASSWORD_SIZE);
    1604:	8e e6       	ldi	r24, 0x6E	; 110
    1606:	91 e0       	ldi	r25, 0x01	; 1
    1608:	65 e0       	ldi	r22, 0x05	; 5
    160a:	0e 94 ff 08 	call	0x11fe	; 0x11fe <Get_Password>
		/*send command to MC2*/
		UART_sendByte(CHANGE_PASS);
    160e:	8d e2       	ldi	r24, 0x2D	; 45
    1610:	0e 94 85 17 	call	0x2f0a	; 0x2f0a <UART_sendByte>

		while(UART_recieveByte() != MC2_READY);
    1614:	0e 94 9c 17 	call	0x2f38	; 0x2f38 <UART_recieveByte>
    1618:	83 31       	cpi	r24, 0x13	; 19
    161a:	e1 f7       	brne	.-8      	; 0x1614 <change_Pass+0x22>
		/*send password to check*/
		Send_Password(User_Current_Password,PASSWORD_SIZE);
    161c:	8e e6       	ldi	r24, 0x6E	; 110
    161e:	91 e0       	ldi	r25, 0x01	; 1
    1620:	65 e0       	ldi	r22, 0x05	; 5
    1622:	0e 94 1c 0a 	call	0x1438	; 0x1438 <Send_Password>

		UART_Received_Byte = UART_recieveByte();
    1626:	0e 94 9c 17 	call	0x2f38	; 0x2f38 <UART_recieveByte>
    162a:	80 93 68 01 	sts	0x0168, r24
		/*check the states of the entered password*/
		if (UART_Received_Byte == PASSWORDS_MATCH){
    162e:	80 91 68 01 	lds	r24, 0x0168
    1632:	81 30       	cpi	r24, 0x01	; 1
    1634:	19 f4       	brne	.+6      	; 0x163c <change_Pass+0x4a>
			Set_Password();
    1636:	0e 94 ab 06 	call	0xd56	; 0xd56 <Set_Password>
    163a:	12 c0       	rjmp	.+36     	; 0x1660 <change_Pass+0x6e>
			break;
		}
		else if(UART_Received_Byte  == PASSWORDS_UNMATCH){
    163c:	80 91 68 01 	lds	r24, 0x0168
    1640:	88 23       	and	r24, r24
    1642:	21 f4       	brne	.+8      	; 0x164c <change_Pass+0x5a>
			Wrong_Message();
    1644:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <Wrong_Message>
			state = PASSWORDS_UNMATCH;
    1648:	19 82       	std	Y+1, r1	; 0x01
    164a:	07 c0       	rjmp	.+14     	; 0x165a <change_Pass+0x68>
		}
		else if(UART_Received_Byte  == WARNING){
    164c:	80 91 68 01 	lds	r24, 0x0168
    1650:	8c 33       	cpi	r24, 0x3C	; 60
    1652:	19 f4       	brne	.+6      	; 0x165a <change_Pass+0x68>
			Warning_Message();
    1654:	0e 94 4a 08 	call	0x1094	; 0x1094 <Warning_Message>
    1658:	03 c0       	rjmp	.+6      	; 0x1660 <change_Pass+0x6e>

}
/*******************************************************************************/
void change_Pass(void){
	uint8 state = PASSWORDS_UNMATCH;
	while(state == PASSWORDS_UNMATCH){
    165a:	89 81       	ldd	r24, Y+1	; 0x01
    165c:	88 23       	and	r24, r24
    165e:	81 f2       	breq	.-96     	; 0x1600 <change_Pass+0xe>
		else if(UART_Received_Byte  == WARNING){
			Warning_Message();
			break;
		}
	}
}
    1660:	0f 90       	pop	r0
    1662:	cf 91       	pop	r28
    1664:	df 91       	pop	r29
    1666:	08 95       	ret

00001668 <Motor_function>:
/*******************************************************************************/
void Motor_function(void){
    1668:	df 93       	push	r29
    166a:	cf 93       	push	r28
    166c:	cd b7       	in	r28, 0x3d	; 61
    166e:	de b7       	in	r29, 0x3e	; 62
    1670:	2e 97       	sbiw	r28, 0x0e	; 14
    1672:	0f b6       	in	r0, 0x3f	; 63
    1674:	f8 94       	cli
    1676:	de bf       	out	0x3e, r29	; 62
    1678:	0f be       	out	0x3f, r0	; 63
    167a:	cd bf       	out	0x3d, r28	; 61
	/*Opening the door in 15sec*/
	g_ticks=0;
    167c:	10 92 6a 01 	sts	0x016A, r1
    1680:	10 92 69 01 	sts	0x0169, r1
	LCD_clearScreen();
    1684:	0e 94 fe 15 	call	0x2bfc	; 0x2bfc <LCD_clearScreen>
	LCD_displayStringRowColumn(0,4,"Door is");
    1688:	2f e1       	ldi	r18, 0x1F	; 31
    168a:	31 e0       	ldi	r19, 0x01	; 1
    168c:	80 e0       	ldi	r24, 0x00	; 0
    168e:	64 e0       	ldi	r22, 0x04	; 4
    1690:	a9 01       	movw	r20, r18
    1692:	0e 94 c2 15 	call	0x2b84	; 0x2b84 <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1,4,"Unlocking!");
    1696:	27 e2       	ldi	r18, 0x27	; 39
    1698:	31 e0       	ldi	r19, 0x01	; 1
    169a:	81 e0       	ldi	r24, 0x01	; 1
    169c:	64 e0       	ldi	r22, 0x04	; 4
    169e:	a9 01       	movw	r20, r18
    16a0:	0e 94 c2 15 	call	0x2b84	; 0x2b84 <LCD_displayStringRowColumn>
	while (g_ticks < DOOR_IS_UNLOCK);
    16a4:	80 91 69 01 	lds	r24, 0x0169
    16a8:	90 91 6a 01 	lds	r25, 0x016A
    16ac:	8f 30       	cpi	r24, 0x0F	; 15
    16ae:	91 05       	cpc	r25, r1
    16b0:	c8 f3       	brcs	.-14     	; 0x16a4 <Motor_function+0x3c>

	/*Holding the door in 3sec*/
	g_ticks=0;
    16b2:	10 92 6a 01 	sts	0x016A, r1
    16b6:	10 92 69 01 	sts	0x0169, r1
	LCD_clearScreen();
    16ba:	0e 94 fe 15 	call	0x2bfc	; 0x2bfc <LCD_clearScreen>
	LCD_displayString("Door is Unlock!");
    16be:	82 e3       	ldi	r24, 0x32	; 50
    16c0:	91 e0       	ldi	r25, 0x01	; 1
    16c2:	0e 94 57 15 	call	0x2aae	; 0x2aae <LCD_displayString>
	while (g_ticks < HOLD_MOTOR);
    16c6:	80 91 69 01 	lds	r24, 0x0169
    16ca:	90 91 6a 01 	lds	r25, 0x016A
    16ce:	83 30       	cpi	r24, 0x03	; 3
    16d0:	91 05       	cpc	r25, r1
    16d2:	c8 f3       	brcs	.-14     	; 0x16c6 <Motor_function+0x5e>

	/*Closing the door in 15sec*/
	g_ticks=0;
    16d4:	10 92 6a 01 	sts	0x016A, r1
    16d8:	10 92 69 01 	sts	0x0169, r1
	LCD_clearScreen();
    16dc:	0e 94 fe 15 	call	0x2bfc	; 0x2bfc <LCD_clearScreen>
	LCD_displayStringRowColumn(0,4,"Door is");
    16e0:	2f e1       	ldi	r18, 0x1F	; 31
    16e2:	31 e0       	ldi	r19, 0x01	; 1
    16e4:	80 e0       	ldi	r24, 0x00	; 0
    16e6:	64 e0       	ldi	r22, 0x04	; 4
    16e8:	a9 01       	movw	r20, r18
    16ea:	0e 94 c2 15 	call	0x2b84	; 0x2b84 <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1,4,"locking!");
    16ee:	22 e4       	ldi	r18, 0x42	; 66
    16f0:	31 e0       	ldi	r19, 0x01	; 1
    16f2:	81 e0       	ldi	r24, 0x01	; 1
    16f4:	64 e0       	ldi	r22, 0x04	; 4
    16f6:	a9 01       	movw	r20, r18
    16f8:	0e 94 c2 15 	call	0x2b84	; 0x2b84 <LCD_displayStringRowColumn>
	while (g_ticks < DOOR_IS_LOCK);
    16fc:	80 91 69 01 	lds	r24, 0x0169
    1700:	90 91 6a 01 	lds	r25, 0x016A
    1704:	8f 30       	cpi	r24, 0x0F	; 15
    1706:	91 05       	cpc	r25, r1
    1708:	c8 f3       	brcs	.-14     	; 0x16fc <Motor_function+0x94>

	/*Stop the Motor*/
	LCD_clearScreen();
    170a:	0e 94 fe 15 	call	0x2bfc	; 0x2bfc <LCD_clearScreen>
	LCD_displayStringRowColumn(0,4,"Door is");
    170e:	2f e1       	ldi	r18, 0x1F	; 31
    1710:	31 e0       	ldi	r19, 0x01	; 1
    1712:	80 e0       	ldi	r24, 0x00	; 0
    1714:	64 e0       	ldi	r22, 0x04	; 4
    1716:	a9 01       	movw	r20, r18
    1718:	0e 94 c2 15 	call	0x2b84	; 0x2b84 <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1,4,"locked!");
    171c:	2b e4       	ldi	r18, 0x4B	; 75
    171e:	31 e0       	ldi	r19, 0x01	; 1
    1720:	81 e0       	ldi	r24, 0x01	; 1
    1722:	64 e0       	ldi	r22, 0x04	; 4
    1724:	a9 01       	movw	r20, r18
    1726:	0e 94 c2 15 	call	0x2b84	; 0x2b84 <LCD_displayStringRowColumn>
    172a:	80 e0       	ldi	r24, 0x00	; 0
    172c:	90 e0       	ldi	r25, 0x00	; 0
    172e:	aa e7       	ldi	r26, 0x7A	; 122
    1730:	b4 e4       	ldi	r27, 0x44	; 68
    1732:	8b 87       	std	Y+11, r24	; 0x0b
    1734:	9c 87       	std	Y+12, r25	; 0x0c
    1736:	ad 87       	std	Y+13, r26	; 0x0d
    1738:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    173a:	6b 85       	ldd	r22, Y+11	; 0x0b
    173c:	7c 85       	ldd	r23, Y+12	; 0x0c
    173e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1740:	9e 85       	ldd	r25, Y+14	; 0x0e
    1742:	20 e0       	ldi	r18, 0x00	; 0
    1744:	30 e0       	ldi	r19, 0x00	; 0
    1746:	4a ef       	ldi	r20, 0xFA	; 250
    1748:	54 e4       	ldi	r21, 0x44	; 68
    174a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    174e:	dc 01       	movw	r26, r24
    1750:	cb 01       	movw	r24, r22
    1752:	8f 83       	std	Y+7, r24	; 0x07
    1754:	98 87       	std	Y+8, r25	; 0x08
    1756:	a9 87       	std	Y+9, r26	; 0x09
    1758:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    175a:	6f 81       	ldd	r22, Y+7	; 0x07
    175c:	78 85       	ldd	r23, Y+8	; 0x08
    175e:	89 85       	ldd	r24, Y+9	; 0x09
    1760:	9a 85       	ldd	r25, Y+10	; 0x0a
    1762:	20 e0       	ldi	r18, 0x00	; 0
    1764:	30 e0       	ldi	r19, 0x00	; 0
    1766:	40 e8       	ldi	r20, 0x80	; 128
    1768:	5f e3       	ldi	r21, 0x3F	; 63
    176a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    176e:	88 23       	and	r24, r24
    1770:	2c f4       	brge	.+10     	; 0x177c <Motor_function+0x114>
		__ticks = 1;
    1772:	81 e0       	ldi	r24, 0x01	; 1
    1774:	90 e0       	ldi	r25, 0x00	; 0
    1776:	9e 83       	std	Y+6, r25	; 0x06
    1778:	8d 83       	std	Y+5, r24	; 0x05
    177a:	3f c0       	rjmp	.+126    	; 0x17fa <Motor_function+0x192>
	else if (__tmp > 65535)
    177c:	6f 81       	ldd	r22, Y+7	; 0x07
    177e:	78 85       	ldd	r23, Y+8	; 0x08
    1780:	89 85       	ldd	r24, Y+9	; 0x09
    1782:	9a 85       	ldd	r25, Y+10	; 0x0a
    1784:	20 e0       	ldi	r18, 0x00	; 0
    1786:	3f ef       	ldi	r19, 0xFF	; 255
    1788:	4f e7       	ldi	r20, 0x7F	; 127
    178a:	57 e4       	ldi	r21, 0x47	; 71
    178c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1790:	18 16       	cp	r1, r24
    1792:	4c f5       	brge	.+82     	; 0x17e6 <Motor_function+0x17e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1794:	6b 85       	ldd	r22, Y+11	; 0x0b
    1796:	7c 85       	ldd	r23, Y+12	; 0x0c
    1798:	8d 85       	ldd	r24, Y+13	; 0x0d
    179a:	9e 85       	ldd	r25, Y+14	; 0x0e
    179c:	20 e0       	ldi	r18, 0x00	; 0
    179e:	30 e0       	ldi	r19, 0x00	; 0
    17a0:	40 e2       	ldi	r20, 0x20	; 32
    17a2:	51 e4       	ldi	r21, 0x41	; 65
    17a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17a8:	dc 01       	movw	r26, r24
    17aa:	cb 01       	movw	r24, r22
    17ac:	bc 01       	movw	r22, r24
    17ae:	cd 01       	movw	r24, r26
    17b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17b4:	dc 01       	movw	r26, r24
    17b6:	cb 01       	movw	r24, r22
    17b8:	9e 83       	std	Y+6, r25	; 0x06
    17ba:	8d 83       	std	Y+5, r24	; 0x05
    17bc:	0f c0       	rjmp	.+30     	; 0x17dc <Motor_function+0x174>
    17be:	88 ec       	ldi	r24, 0xC8	; 200
    17c0:	90 e0       	ldi	r25, 0x00	; 0
    17c2:	9c 83       	std	Y+4, r25	; 0x04
    17c4:	8b 83       	std	Y+3, r24	; 0x03
    17c6:	8b 81       	ldd	r24, Y+3	; 0x03
    17c8:	9c 81       	ldd	r25, Y+4	; 0x04
    17ca:	01 97       	sbiw	r24, 0x01	; 1
    17cc:	f1 f7       	brne	.-4      	; 0x17ca <Motor_function+0x162>
    17ce:	9c 83       	std	Y+4, r25	; 0x04
    17d0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17d2:	8d 81       	ldd	r24, Y+5	; 0x05
    17d4:	9e 81       	ldd	r25, Y+6	; 0x06
    17d6:	01 97       	sbiw	r24, 0x01	; 1
    17d8:	9e 83       	std	Y+6, r25	; 0x06
    17da:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17dc:	8d 81       	ldd	r24, Y+5	; 0x05
    17de:	9e 81       	ldd	r25, Y+6	; 0x06
    17e0:	00 97       	sbiw	r24, 0x00	; 0
    17e2:	69 f7       	brne	.-38     	; 0x17be <Motor_function+0x156>
    17e4:	14 c0       	rjmp	.+40     	; 0x180e <Motor_function+0x1a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17e6:	6f 81       	ldd	r22, Y+7	; 0x07
    17e8:	78 85       	ldd	r23, Y+8	; 0x08
    17ea:	89 85       	ldd	r24, Y+9	; 0x09
    17ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    17ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17f2:	dc 01       	movw	r26, r24
    17f4:	cb 01       	movw	r24, r22
    17f6:	9e 83       	std	Y+6, r25	; 0x06
    17f8:	8d 83       	std	Y+5, r24	; 0x05
    17fa:	8d 81       	ldd	r24, Y+5	; 0x05
    17fc:	9e 81       	ldd	r25, Y+6	; 0x06
    17fe:	9a 83       	std	Y+2, r25	; 0x02
    1800:	89 83       	std	Y+1, r24	; 0x01
    1802:	89 81       	ldd	r24, Y+1	; 0x01
    1804:	9a 81       	ldd	r25, Y+2	; 0x02
    1806:	01 97       	sbiw	r24, 0x01	; 1
    1808:	f1 f7       	brne	.-4      	; 0x1806 <Motor_function+0x19e>
    180a:	9a 83       	std	Y+2, r25	; 0x02
    180c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
	/*The LCD will always display the main system options*/
	LCD_clearScreen();
    180e:	0e 94 fe 15 	call	0x2bfc	; 0x2bfc <LCD_clearScreen>
	Display_Main_Options();
    1812:	0e 94 1c 08 	call	0x1038	; 0x1038 <Display_Main_Options>
}
    1816:	2e 96       	adiw	r28, 0x0e	; 14
    1818:	0f b6       	in	r0, 0x3f	; 63
    181a:	f8 94       	cli
    181c:	de bf       	out	0x3e, r29	; 62
    181e:	0f be       	out	0x3f, r0	; 63
    1820:	cd bf       	out	0x3d, r28	; 61
    1822:	cf 91       	pop	r28
    1824:	df 91       	pop	r29
    1826:	08 95       	ret

00001828 <GPIO_setupPinDirection>:
 *             		  If the input port number or pin number are not correct, The function will not handle the request.
 *[ARGUMENTS]		: unit8 (port_num, pin_num) ,
 *		              GPIO_PinDirectionType Enum(direction)
 *[RETURNS]			: void
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction){
    1828:	df 93       	push	r29
    182a:	cf 93       	push	r28
    182c:	00 d0       	rcall	.+0      	; 0x182e <GPIO_setupPinDirection+0x6>
    182e:	00 d0       	rcall	.+0      	; 0x1830 <GPIO_setupPinDirection+0x8>
    1830:	0f 92       	push	r0
    1832:	cd b7       	in	r28, 0x3d	; 61
    1834:	de b7       	in	r29, 0x3e	; 62
    1836:	89 83       	std	Y+1, r24	; 0x01
    1838:	6a 83       	std	Y+2, r22	; 0x02
    183a:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    183c:	8a 81       	ldd	r24, Y+2	; 0x02
    183e:	88 30       	cpi	r24, 0x08	; 8
    1840:	08 f0       	brcs	.+2      	; 0x1844 <GPIO_setupPinDirection+0x1c>
    1842:	d5 c0       	rjmp	.+426    	; 0x19ee <GPIO_setupPinDirection+0x1c6>
    1844:	89 81       	ldd	r24, Y+1	; 0x01
    1846:	84 30       	cpi	r24, 0x04	; 4
    1848:	08 f0       	brcs	.+2      	; 0x184c <GPIO_setupPinDirection+0x24>
    184a:	d1 c0       	rjmp	.+418    	; 0x19ee <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		//switch on port number
		switch(port_num){
    184c:	89 81       	ldd	r24, Y+1	; 0x01
    184e:	28 2f       	mov	r18, r24
    1850:	30 e0       	ldi	r19, 0x00	; 0
    1852:	3d 83       	std	Y+5, r19	; 0x05
    1854:	2c 83       	std	Y+4, r18	; 0x04
    1856:	8c 81       	ldd	r24, Y+4	; 0x04
    1858:	9d 81       	ldd	r25, Y+5	; 0x05
    185a:	81 30       	cpi	r24, 0x01	; 1
    185c:	91 05       	cpc	r25, r1
    185e:	09 f4       	brne	.+2      	; 0x1862 <GPIO_setupPinDirection+0x3a>
    1860:	43 c0       	rjmp	.+134    	; 0x18e8 <GPIO_setupPinDirection+0xc0>
    1862:	2c 81       	ldd	r18, Y+4	; 0x04
    1864:	3d 81       	ldd	r19, Y+5	; 0x05
    1866:	22 30       	cpi	r18, 0x02	; 2
    1868:	31 05       	cpc	r19, r1
    186a:	2c f4       	brge	.+10     	; 0x1876 <GPIO_setupPinDirection+0x4e>
    186c:	8c 81       	ldd	r24, Y+4	; 0x04
    186e:	9d 81       	ldd	r25, Y+5	; 0x05
    1870:	00 97       	sbiw	r24, 0x00	; 0
    1872:	71 f0       	breq	.+28     	; 0x1890 <GPIO_setupPinDirection+0x68>
    1874:	bc c0       	rjmp	.+376    	; 0x19ee <GPIO_setupPinDirection+0x1c6>
    1876:	2c 81       	ldd	r18, Y+4	; 0x04
    1878:	3d 81       	ldd	r19, Y+5	; 0x05
    187a:	22 30       	cpi	r18, 0x02	; 2
    187c:	31 05       	cpc	r19, r1
    187e:	09 f4       	brne	.+2      	; 0x1882 <GPIO_setupPinDirection+0x5a>
    1880:	5f c0       	rjmp	.+190    	; 0x1940 <GPIO_setupPinDirection+0x118>
    1882:	8c 81       	ldd	r24, Y+4	; 0x04
    1884:	9d 81       	ldd	r25, Y+5	; 0x05
    1886:	83 30       	cpi	r24, 0x03	; 3
    1888:	91 05       	cpc	r25, r1
    188a:	09 f4       	brne	.+2      	; 0x188e <GPIO_setupPinDirection+0x66>
    188c:	85 c0       	rjmp	.+266    	; 0x1998 <GPIO_setupPinDirection+0x170>
    188e:	af c0       	rjmp	.+350    	; 0x19ee <GPIO_setupPinDirection+0x1c6>

		//If pin is input clear DDRA with chosen pin number and if not set Pin in DDRA
		case PORTA_ID:
			if(direction == PIN_INPUT){
    1890:	8b 81       	ldd	r24, Y+3	; 0x03
    1892:	88 23       	and	r24, r24
    1894:	a9 f4       	brne	.+42     	; 0x18c0 <GPIO_setupPinDirection+0x98>
				CLEAR_BIT(DDRA,pin_num);
    1896:	aa e3       	ldi	r26, 0x3A	; 58
    1898:	b0 e0       	ldi	r27, 0x00	; 0
    189a:	ea e3       	ldi	r30, 0x3A	; 58
    189c:	f0 e0       	ldi	r31, 0x00	; 0
    189e:	80 81       	ld	r24, Z
    18a0:	48 2f       	mov	r20, r24
    18a2:	8a 81       	ldd	r24, Y+2	; 0x02
    18a4:	28 2f       	mov	r18, r24
    18a6:	30 e0       	ldi	r19, 0x00	; 0
    18a8:	81 e0       	ldi	r24, 0x01	; 1
    18aa:	90 e0       	ldi	r25, 0x00	; 0
    18ac:	02 2e       	mov	r0, r18
    18ae:	02 c0       	rjmp	.+4      	; 0x18b4 <GPIO_setupPinDirection+0x8c>
    18b0:	88 0f       	add	r24, r24
    18b2:	99 1f       	adc	r25, r25
    18b4:	0a 94       	dec	r0
    18b6:	e2 f7       	brpl	.-8      	; 0x18b0 <GPIO_setupPinDirection+0x88>
    18b8:	80 95       	com	r24
    18ba:	84 23       	and	r24, r20
    18bc:	8c 93       	st	X, r24
    18be:	97 c0       	rjmp	.+302    	; 0x19ee <GPIO_setupPinDirection+0x1c6>
			}
			else{
				SET_BIT(DDRA,pin_num);
    18c0:	aa e3       	ldi	r26, 0x3A	; 58
    18c2:	b0 e0       	ldi	r27, 0x00	; 0
    18c4:	ea e3       	ldi	r30, 0x3A	; 58
    18c6:	f0 e0       	ldi	r31, 0x00	; 0
    18c8:	80 81       	ld	r24, Z
    18ca:	48 2f       	mov	r20, r24
    18cc:	8a 81       	ldd	r24, Y+2	; 0x02
    18ce:	28 2f       	mov	r18, r24
    18d0:	30 e0       	ldi	r19, 0x00	; 0
    18d2:	81 e0       	ldi	r24, 0x01	; 1
    18d4:	90 e0       	ldi	r25, 0x00	; 0
    18d6:	02 2e       	mov	r0, r18
    18d8:	02 c0       	rjmp	.+4      	; 0x18de <GPIO_setupPinDirection+0xb6>
    18da:	88 0f       	add	r24, r24
    18dc:	99 1f       	adc	r25, r25
    18de:	0a 94       	dec	r0
    18e0:	e2 f7       	brpl	.-8      	; 0x18da <GPIO_setupPinDirection+0xb2>
    18e2:	84 2b       	or	r24, r20
    18e4:	8c 93       	st	X, r24
    18e6:	83 c0       	rjmp	.+262    	; 0x19ee <GPIO_setupPinDirection+0x1c6>
			}
			break;

			//If pin is input clear DDRB with chosen pin number and if not set Pin in DDRB
		case PORTB_ID:
			if(direction == PIN_INPUT){
    18e8:	8b 81       	ldd	r24, Y+3	; 0x03
    18ea:	88 23       	and	r24, r24
    18ec:	a9 f4       	brne	.+42     	; 0x1918 <GPIO_setupPinDirection+0xf0>
				CLEAR_BIT(DDRB,pin_num);
    18ee:	a7 e3       	ldi	r26, 0x37	; 55
    18f0:	b0 e0       	ldi	r27, 0x00	; 0
    18f2:	e7 e3       	ldi	r30, 0x37	; 55
    18f4:	f0 e0       	ldi	r31, 0x00	; 0
    18f6:	80 81       	ld	r24, Z
    18f8:	48 2f       	mov	r20, r24
    18fa:	8a 81       	ldd	r24, Y+2	; 0x02
    18fc:	28 2f       	mov	r18, r24
    18fe:	30 e0       	ldi	r19, 0x00	; 0
    1900:	81 e0       	ldi	r24, 0x01	; 1
    1902:	90 e0       	ldi	r25, 0x00	; 0
    1904:	02 2e       	mov	r0, r18
    1906:	02 c0       	rjmp	.+4      	; 0x190c <GPIO_setupPinDirection+0xe4>
    1908:	88 0f       	add	r24, r24
    190a:	99 1f       	adc	r25, r25
    190c:	0a 94       	dec	r0
    190e:	e2 f7       	brpl	.-8      	; 0x1908 <GPIO_setupPinDirection+0xe0>
    1910:	80 95       	com	r24
    1912:	84 23       	and	r24, r20
    1914:	8c 93       	st	X, r24
    1916:	6b c0       	rjmp	.+214    	; 0x19ee <GPIO_setupPinDirection+0x1c6>
			}
			else{
				SET_BIT(DDRB,pin_num);
    1918:	a7 e3       	ldi	r26, 0x37	; 55
    191a:	b0 e0       	ldi	r27, 0x00	; 0
    191c:	e7 e3       	ldi	r30, 0x37	; 55
    191e:	f0 e0       	ldi	r31, 0x00	; 0
    1920:	80 81       	ld	r24, Z
    1922:	48 2f       	mov	r20, r24
    1924:	8a 81       	ldd	r24, Y+2	; 0x02
    1926:	28 2f       	mov	r18, r24
    1928:	30 e0       	ldi	r19, 0x00	; 0
    192a:	81 e0       	ldi	r24, 0x01	; 1
    192c:	90 e0       	ldi	r25, 0x00	; 0
    192e:	02 2e       	mov	r0, r18
    1930:	02 c0       	rjmp	.+4      	; 0x1936 <GPIO_setupPinDirection+0x10e>
    1932:	88 0f       	add	r24, r24
    1934:	99 1f       	adc	r25, r25
    1936:	0a 94       	dec	r0
    1938:	e2 f7       	brpl	.-8      	; 0x1932 <GPIO_setupPinDirection+0x10a>
    193a:	84 2b       	or	r24, r20
    193c:	8c 93       	st	X, r24
    193e:	57 c0       	rjmp	.+174    	; 0x19ee <GPIO_setupPinDirection+0x1c6>
			}
			break;

			//If pin is input clear DDRC with chosen pin number and if not set Pin in DDRC
		case PORTC_ID:
			if(direction == PIN_INPUT){
    1940:	8b 81       	ldd	r24, Y+3	; 0x03
    1942:	88 23       	and	r24, r24
    1944:	a9 f4       	brne	.+42     	; 0x1970 <GPIO_setupPinDirection+0x148>
				CLEAR_BIT(DDRC,pin_num);
    1946:	a4 e3       	ldi	r26, 0x34	; 52
    1948:	b0 e0       	ldi	r27, 0x00	; 0
    194a:	e4 e3       	ldi	r30, 0x34	; 52
    194c:	f0 e0       	ldi	r31, 0x00	; 0
    194e:	80 81       	ld	r24, Z
    1950:	48 2f       	mov	r20, r24
    1952:	8a 81       	ldd	r24, Y+2	; 0x02
    1954:	28 2f       	mov	r18, r24
    1956:	30 e0       	ldi	r19, 0x00	; 0
    1958:	81 e0       	ldi	r24, 0x01	; 1
    195a:	90 e0       	ldi	r25, 0x00	; 0
    195c:	02 2e       	mov	r0, r18
    195e:	02 c0       	rjmp	.+4      	; 0x1964 <GPIO_setupPinDirection+0x13c>
    1960:	88 0f       	add	r24, r24
    1962:	99 1f       	adc	r25, r25
    1964:	0a 94       	dec	r0
    1966:	e2 f7       	brpl	.-8      	; 0x1960 <GPIO_setupPinDirection+0x138>
    1968:	80 95       	com	r24
    196a:	84 23       	and	r24, r20
    196c:	8c 93       	st	X, r24
    196e:	3f c0       	rjmp	.+126    	; 0x19ee <GPIO_setupPinDirection+0x1c6>
			}
			else{
				SET_BIT(DDRC,pin_num);
    1970:	a4 e3       	ldi	r26, 0x34	; 52
    1972:	b0 e0       	ldi	r27, 0x00	; 0
    1974:	e4 e3       	ldi	r30, 0x34	; 52
    1976:	f0 e0       	ldi	r31, 0x00	; 0
    1978:	80 81       	ld	r24, Z
    197a:	48 2f       	mov	r20, r24
    197c:	8a 81       	ldd	r24, Y+2	; 0x02
    197e:	28 2f       	mov	r18, r24
    1980:	30 e0       	ldi	r19, 0x00	; 0
    1982:	81 e0       	ldi	r24, 0x01	; 1
    1984:	90 e0       	ldi	r25, 0x00	; 0
    1986:	02 2e       	mov	r0, r18
    1988:	02 c0       	rjmp	.+4      	; 0x198e <GPIO_setupPinDirection+0x166>
    198a:	88 0f       	add	r24, r24
    198c:	99 1f       	adc	r25, r25
    198e:	0a 94       	dec	r0
    1990:	e2 f7       	brpl	.-8      	; 0x198a <GPIO_setupPinDirection+0x162>
    1992:	84 2b       	or	r24, r20
    1994:	8c 93       	st	X, r24
    1996:	2b c0       	rjmp	.+86     	; 0x19ee <GPIO_setupPinDirection+0x1c6>
			}
			break;

			//If pin is input clear DDRD with chosen pin number and if not set Pin in DDRD
		case PORTD_ID:
			if(direction == PIN_INPUT){
    1998:	8b 81       	ldd	r24, Y+3	; 0x03
    199a:	88 23       	and	r24, r24
    199c:	a9 f4       	brne	.+42     	; 0x19c8 <GPIO_setupPinDirection+0x1a0>
				CLEAR_BIT(DDRD,pin_num);
    199e:	a1 e3       	ldi	r26, 0x31	; 49
    19a0:	b0 e0       	ldi	r27, 0x00	; 0
    19a2:	e1 e3       	ldi	r30, 0x31	; 49
    19a4:	f0 e0       	ldi	r31, 0x00	; 0
    19a6:	80 81       	ld	r24, Z
    19a8:	48 2f       	mov	r20, r24
    19aa:	8a 81       	ldd	r24, Y+2	; 0x02
    19ac:	28 2f       	mov	r18, r24
    19ae:	30 e0       	ldi	r19, 0x00	; 0
    19b0:	81 e0       	ldi	r24, 0x01	; 1
    19b2:	90 e0       	ldi	r25, 0x00	; 0
    19b4:	02 2e       	mov	r0, r18
    19b6:	02 c0       	rjmp	.+4      	; 0x19bc <GPIO_setupPinDirection+0x194>
    19b8:	88 0f       	add	r24, r24
    19ba:	99 1f       	adc	r25, r25
    19bc:	0a 94       	dec	r0
    19be:	e2 f7       	brpl	.-8      	; 0x19b8 <GPIO_setupPinDirection+0x190>
    19c0:	80 95       	com	r24
    19c2:	84 23       	and	r24, r20
    19c4:	8c 93       	st	X, r24
    19c6:	13 c0       	rjmp	.+38     	; 0x19ee <GPIO_setupPinDirection+0x1c6>
			}
			else{
				SET_BIT(DDRD,pin_num);
    19c8:	a1 e3       	ldi	r26, 0x31	; 49
    19ca:	b0 e0       	ldi	r27, 0x00	; 0
    19cc:	e1 e3       	ldi	r30, 0x31	; 49
    19ce:	f0 e0       	ldi	r31, 0x00	; 0
    19d0:	80 81       	ld	r24, Z
    19d2:	48 2f       	mov	r20, r24
    19d4:	8a 81       	ldd	r24, Y+2	; 0x02
    19d6:	28 2f       	mov	r18, r24
    19d8:	30 e0       	ldi	r19, 0x00	; 0
    19da:	81 e0       	ldi	r24, 0x01	; 1
    19dc:	90 e0       	ldi	r25, 0x00	; 0
    19de:	02 2e       	mov	r0, r18
    19e0:	02 c0       	rjmp	.+4      	; 0x19e6 <GPIO_setupPinDirection+0x1be>
    19e2:	88 0f       	add	r24, r24
    19e4:	99 1f       	adc	r25, r25
    19e6:	0a 94       	dec	r0
    19e8:	e2 f7       	brpl	.-8      	; 0x19e2 <GPIO_setupPinDirection+0x1ba>
    19ea:	84 2b       	or	r24, r20
    19ec:	8c 93       	st	X, r24

			break;
		}

	}
}
    19ee:	0f 90       	pop	r0
    19f0:	0f 90       	pop	r0
    19f2:	0f 90       	pop	r0
    19f4:	0f 90       	pop	r0
    19f6:	0f 90       	pop	r0
    19f8:	cf 91       	pop	r28
    19fa:	df 91       	pop	r29
    19fc:	08 95       	ret

000019fe <GPIO_writePin>:
 *                    If the input port number or pin number are not correct, The function will not handle the request.
 *                    If the pin is input, this function will enable/disable the internal pull-up resistor.
 *[ARGUMENTS]		: unit8 (port_num, pin_num, value)
 *[RETURNS]			: void
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value){
    19fe:	df 93       	push	r29
    1a00:	cf 93       	push	r28
    1a02:	00 d0       	rcall	.+0      	; 0x1a04 <GPIO_writePin+0x6>
    1a04:	00 d0       	rcall	.+0      	; 0x1a06 <GPIO_writePin+0x8>
    1a06:	0f 92       	push	r0
    1a08:	cd b7       	in	r28, 0x3d	; 61
    1a0a:	de b7       	in	r29, 0x3e	; 62
    1a0c:	89 83       	std	Y+1, r24	; 0x01
    1a0e:	6a 83       	std	Y+2, r22	; 0x02
    1a10:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1a12:	8a 81       	ldd	r24, Y+2	; 0x02
    1a14:	88 30       	cpi	r24, 0x08	; 8
    1a16:	08 f0       	brcs	.+2      	; 0x1a1a <GPIO_writePin+0x1c>
    1a18:	d5 c0       	rjmp	.+426    	; 0x1bc4 <GPIO_writePin+0x1c6>
    1a1a:	89 81       	ldd	r24, Y+1	; 0x01
    1a1c:	84 30       	cpi	r24, 0x04	; 4
    1a1e:	08 f0       	brcs	.+2      	; 0x1a22 <GPIO_writePin+0x24>
    1a20:	d1 c0       	rjmp	.+418    	; 0x1bc4 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		//switch on port number
		switch(port_num){
    1a22:	89 81       	ldd	r24, Y+1	; 0x01
    1a24:	28 2f       	mov	r18, r24
    1a26:	30 e0       	ldi	r19, 0x00	; 0
    1a28:	3d 83       	std	Y+5, r19	; 0x05
    1a2a:	2c 83       	std	Y+4, r18	; 0x04
    1a2c:	8c 81       	ldd	r24, Y+4	; 0x04
    1a2e:	9d 81       	ldd	r25, Y+5	; 0x05
    1a30:	81 30       	cpi	r24, 0x01	; 1
    1a32:	91 05       	cpc	r25, r1
    1a34:	09 f4       	brne	.+2      	; 0x1a38 <GPIO_writePin+0x3a>
    1a36:	43 c0       	rjmp	.+134    	; 0x1abe <GPIO_writePin+0xc0>
    1a38:	2c 81       	ldd	r18, Y+4	; 0x04
    1a3a:	3d 81       	ldd	r19, Y+5	; 0x05
    1a3c:	22 30       	cpi	r18, 0x02	; 2
    1a3e:	31 05       	cpc	r19, r1
    1a40:	2c f4       	brge	.+10     	; 0x1a4c <GPIO_writePin+0x4e>
    1a42:	8c 81       	ldd	r24, Y+4	; 0x04
    1a44:	9d 81       	ldd	r25, Y+5	; 0x05
    1a46:	00 97       	sbiw	r24, 0x00	; 0
    1a48:	71 f0       	breq	.+28     	; 0x1a66 <GPIO_writePin+0x68>
    1a4a:	bc c0       	rjmp	.+376    	; 0x1bc4 <GPIO_writePin+0x1c6>
    1a4c:	2c 81       	ldd	r18, Y+4	; 0x04
    1a4e:	3d 81       	ldd	r19, Y+5	; 0x05
    1a50:	22 30       	cpi	r18, 0x02	; 2
    1a52:	31 05       	cpc	r19, r1
    1a54:	09 f4       	brne	.+2      	; 0x1a58 <GPIO_writePin+0x5a>
    1a56:	5f c0       	rjmp	.+190    	; 0x1b16 <GPIO_writePin+0x118>
    1a58:	8c 81       	ldd	r24, Y+4	; 0x04
    1a5a:	9d 81       	ldd	r25, Y+5	; 0x05
    1a5c:	83 30       	cpi	r24, 0x03	; 3
    1a5e:	91 05       	cpc	r25, r1
    1a60:	09 f4       	brne	.+2      	; 0x1a64 <GPIO_writePin+0x66>
    1a62:	85 c0       	rjmp	.+266    	; 0x1b6e <GPIO_writePin+0x170>
    1a64:	af c0       	rjmp	.+350    	; 0x1bc4 <GPIO_writePin+0x1c6>

		//If value required is logic low clear chosen bit in PORTA and if not set bit in PORTA
		case PORTA_ID:
			if(value == LOGIC_LOW){
    1a66:	8b 81       	ldd	r24, Y+3	; 0x03
    1a68:	88 23       	and	r24, r24
    1a6a:	a9 f4       	brne	.+42     	; 0x1a96 <GPIO_writePin+0x98>
				CLEAR_BIT(PORTA,pin_num);
    1a6c:	ab e3       	ldi	r26, 0x3B	; 59
    1a6e:	b0 e0       	ldi	r27, 0x00	; 0
    1a70:	eb e3       	ldi	r30, 0x3B	; 59
    1a72:	f0 e0       	ldi	r31, 0x00	; 0
    1a74:	80 81       	ld	r24, Z
    1a76:	48 2f       	mov	r20, r24
    1a78:	8a 81       	ldd	r24, Y+2	; 0x02
    1a7a:	28 2f       	mov	r18, r24
    1a7c:	30 e0       	ldi	r19, 0x00	; 0
    1a7e:	81 e0       	ldi	r24, 0x01	; 1
    1a80:	90 e0       	ldi	r25, 0x00	; 0
    1a82:	02 2e       	mov	r0, r18
    1a84:	02 c0       	rjmp	.+4      	; 0x1a8a <GPIO_writePin+0x8c>
    1a86:	88 0f       	add	r24, r24
    1a88:	99 1f       	adc	r25, r25
    1a8a:	0a 94       	dec	r0
    1a8c:	e2 f7       	brpl	.-8      	; 0x1a86 <GPIO_writePin+0x88>
    1a8e:	80 95       	com	r24
    1a90:	84 23       	and	r24, r20
    1a92:	8c 93       	st	X, r24
    1a94:	97 c0       	rjmp	.+302    	; 0x1bc4 <GPIO_writePin+0x1c6>
			}
			else{
				SET_BIT(PORTA,pin_num);
    1a96:	ab e3       	ldi	r26, 0x3B	; 59
    1a98:	b0 e0       	ldi	r27, 0x00	; 0
    1a9a:	eb e3       	ldi	r30, 0x3B	; 59
    1a9c:	f0 e0       	ldi	r31, 0x00	; 0
    1a9e:	80 81       	ld	r24, Z
    1aa0:	48 2f       	mov	r20, r24
    1aa2:	8a 81       	ldd	r24, Y+2	; 0x02
    1aa4:	28 2f       	mov	r18, r24
    1aa6:	30 e0       	ldi	r19, 0x00	; 0
    1aa8:	81 e0       	ldi	r24, 0x01	; 1
    1aaa:	90 e0       	ldi	r25, 0x00	; 0
    1aac:	02 2e       	mov	r0, r18
    1aae:	02 c0       	rjmp	.+4      	; 0x1ab4 <GPIO_writePin+0xb6>
    1ab0:	88 0f       	add	r24, r24
    1ab2:	99 1f       	adc	r25, r25
    1ab4:	0a 94       	dec	r0
    1ab6:	e2 f7       	brpl	.-8      	; 0x1ab0 <GPIO_writePin+0xb2>
    1ab8:	84 2b       	or	r24, r20
    1aba:	8c 93       	st	X, r24
    1abc:	83 c0       	rjmp	.+262    	; 0x1bc4 <GPIO_writePin+0x1c6>
			}
			break;

			//If value required is logic low clear chosen bit in PORTB and if not set bit in PORTB
		case PORTB_ID:
			if(value == LOGIC_LOW){
    1abe:	8b 81       	ldd	r24, Y+3	; 0x03
    1ac0:	88 23       	and	r24, r24
    1ac2:	a9 f4       	brne	.+42     	; 0x1aee <GPIO_writePin+0xf0>
				CLEAR_BIT(PORTB,pin_num);
    1ac4:	a8 e3       	ldi	r26, 0x38	; 56
    1ac6:	b0 e0       	ldi	r27, 0x00	; 0
    1ac8:	e8 e3       	ldi	r30, 0x38	; 56
    1aca:	f0 e0       	ldi	r31, 0x00	; 0
    1acc:	80 81       	ld	r24, Z
    1ace:	48 2f       	mov	r20, r24
    1ad0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ad2:	28 2f       	mov	r18, r24
    1ad4:	30 e0       	ldi	r19, 0x00	; 0
    1ad6:	81 e0       	ldi	r24, 0x01	; 1
    1ad8:	90 e0       	ldi	r25, 0x00	; 0
    1ada:	02 2e       	mov	r0, r18
    1adc:	02 c0       	rjmp	.+4      	; 0x1ae2 <GPIO_writePin+0xe4>
    1ade:	88 0f       	add	r24, r24
    1ae0:	99 1f       	adc	r25, r25
    1ae2:	0a 94       	dec	r0
    1ae4:	e2 f7       	brpl	.-8      	; 0x1ade <GPIO_writePin+0xe0>
    1ae6:	80 95       	com	r24
    1ae8:	84 23       	and	r24, r20
    1aea:	8c 93       	st	X, r24
    1aec:	6b c0       	rjmp	.+214    	; 0x1bc4 <GPIO_writePin+0x1c6>
			}
			else{
				SET_BIT(PORTB,pin_num);
    1aee:	a8 e3       	ldi	r26, 0x38	; 56
    1af0:	b0 e0       	ldi	r27, 0x00	; 0
    1af2:	e8 e3       	ldi	r30, 0x38	; 56
    1af4:	f0 e0       	ldi	r31, 0x00	; 0
    1af6:	80 81       	ld	r24, Z
    1af8:	48 2f       	mov	r20, r24
    1afa:	8a 81       	ldd	r24, Y+2	; 0x02
    1afc:	28 2f       	mov	r18, r24
    1afe:	30 e0       	ldi	r19, 0x00	; 0
    1b00:	81 e0       	ldi	r24, 0x01	; 1
    1b02:	90 e0       	ldi	r25, 0x00	; 0
    1b04:	02 2e       	mov	r0, r18
    1b06:	02 c0       	rjmp	.+4      	; 0x1b0c <GPIO_writePin+0x10e>
    1b08:	88 0f       	add	r24, r24
    1b0a:	99 1f       	adc	r25, r25
    1b0c:	0a 94       	dec	r0
    1b0e:	e2 f7       	brpl	.-8      	; 0x1b08 <GPIO_writePin+0x10a>
    1b10:	84 2b       	or	r24, r20
    1b12:	8c 93       	st	X, r24
    1b14:	57 c0       	rjmp	.+174    	; 0x1bc4 <GPIO_writePin+0x1c6>
			}
			break;

			//If value required is logic low clear chosen bit in PORTC and if not set bit in PORTC
		case PORTC_ID:
			if(value == LOGIC_LOW){
    1b16:	8b 81       	ldd	r24, Y+3	; 0x03
    1b18:	88 23       	and	r24, r24
    1b1a:	a9 f4       	brne	.+42     	; 0x1b46 <GPIO_writePin+0x148>
				CLEAR_BIT(PORTC,pin_num);
    1b1c:	a5 e3       	ldi	r26, 0x35	; 53
    1b1e:	b0 e0       	ldi	r27, 0x00	; 0
    1b20:	e5 e3       	ldi	r30, 0x35	; 53
    1b22:	f0 e0       	ldi	r31, 0x00	; 0
    1b24:	80 81       	ld	r24, Z
    1b26:	48 2f       	mov	r20, r24
    1b28:	8a 81       	ldd	r24, Y+2	; 0x02
    1b2a:	28 2f       	mov	r18, r24
    1b2c:	30 e0       	ldi	r19, 0x00	; 0
    1b2e:	81 e0       	ldi	r24, 0x01	; 1
    1b30:	90 e0       	ldi	r25, 0x00	; 0
    1b32:	02 2e       	mov	r0, r18
    1b34:	02 c0       	rjmp	.+4      	; 0x1b3a <GPIO_writePin+0x13c>
    1b36:	88 0f       	add	r24, r24
    1b38:	99 1f       	adc	r25, r25
    1b3a:	0a 94       	dec	r0
    1b3c:	e2 f7       	brpl	.-8      	; 0x1b36 <GPIO_writePin+0x138>
    1b3e:	80 95       	com	r24
    1b40:	84 23       	and	r24, r20
    1b42:	8c 93       	st	X, r24
    1b44:	3f c0       	rjmp	.+126    	; 0x1bc4 <GPIO_writePin+0x1c6>
			}
			else{
				SET_BIT(PORTC,pin_num);
    1b46:	a5 e3       	ldi	r26, 0x35	; 53
    1b48:	b0 e0       	ldi	r27, 0x00	; 0
    1b4a:	e5 e3       	ldi	r30, 0x35	; 53
    1b4c:	f0 e0       	ldi	r31, 0x00	; 0
    1b4e:	80 81       	ld	r24, Z
    1b50:	48 2f       	mov	r20, r24
    1b52:	8a 81       	ldd	r24, Y+2	; 0x02
    1b54:	28 2f       	mov	r18, r24
    1b56:	30 e0       	ldi	r19, 0x00	; 0
    1b58:	81 e0       	ldi	r24, 0x01	; 1
    1b5a:	90 e0       	ldi	r25, 0x00	; 0
    1b5c:	02 2e       	mov	r0, r18
    1b5e:	02 c0       	rjmp	.+4      	; 0x1b64 <GPIO_writePin+0x166>
    1b60:	88 0f       	add	r24, r24
    1b62:	99 1f       	adc	r25, r25
    1b64:	0a 94       	dec	r0
    1b66:	e2 f7       	brpl	.-8      	; 0x1b60 <GPIO_writePin+0x162>
    1b68:	84 2b       	or	r24, r20
    1b6a:	8c 93       	st	X, r24
    1b6c:	2b c0       	rjmp	.+86     	; 0x1bc4 <GPIO_writePin+0x1c6>
			}
			break;

			//If value required is logic low clear chosen bit in PORTD and if not set bit in PORTD
		case PORTD_ID:
			if(value == LOGIC_LOW){
    1b6e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b70:	88 23       	and	r24, r24
    1b72:	a9 f4       	brne	.+42     	; 0x1b9e <GPIO_writePin+0x1a0>
				CLEAR_BIT(PORTD,pin_num);
    1b74:	a2 e3       	ldi	r26, 0x32	; 50
    1b76:	b0 e0       	ldi	r27, 0x00	; 0
    1b78:	e2 e3       	ldi	r30, 0x32	; 50
    1b7a:	f0 e0       	ldi	r31, 0x00	; 0
    1b7c:	80 81       	ld	r24, Z
    1b7e:	48 2f       	mov	r20, r24
    1b80:	8a 81       	ldd	r24, Y+2	; 0x02
    1b82:	28 2f       	mov	r18, r24
    1b84:	30 e0       	ldi	r19, 0x00	; 0
    1b86:	81 e0       	ldi	r24, 0x01	; 1
    1b88:	90 e0       	ldi	r25, 0x00	; 0
    1b8a:	02 2e       	mov	r0, r18
    1b8c:	02 c0       	rjmp	.+4      	; 0x1b92 <GPIO_writePin+0x194>
    1b8e:	88 0f       	add	r24, r24
    1b90:	99 1f       	adc	r25, r25
    1b92:	0a 94       	dec	r0
    1b94:	e2 f7       	brpl	.-8      	; 0x1b8e <GPIO_writePin+0x190>
    1b96:	80 95       	com	r24
    1b98:	84 23       	and	r24, r20
    1b9a:	8c 93       	st	X, r24
    1b9c:	13 c0       	rjmp	.+38     	; 0x1bc4 <GPIO_writePin+0x1c6>
			}
			else{
				SET_BIT(PORTD,pin_num);
    1b9e:	a2 e3       	ldi	r26, 0x32	; 50
    1ba0:	b0 e0       	ldi	r27, 0x00	; 0
    1ba2:	e2 e3       	ldi	r30, 0x32	; 50
    1ba4:	f0 e0       	ldi	r31, 0x00	; 0
    1ba6:	80 81       	ld	r24, Z
    1ba8:	48 2f       	mov	r20, r24
    1baa:	8a 81       	ldd	r24, Y+2	; 0x02
    1bac:	28 2f       	mov	r18, r24
    1bae:	30 e0       	ldi	r19, 0x00	; 0
    1bb0:	81 e0       	ldi	r24, 0x01	; 1
    1bb2:	90 e0       	ldi	r25, 0x00	; 0
    1bb4:	02 2e       	mov	r0, r18
    1bb6:	02 c0       	rjmp	.+4      	; 0x1bbc <GPIO_writePin+0x1be>
    1bb8:	88 0f       	add	r24, r24
    1bba:	99 1f       	adc	r25, r25
    1bbc:	0a 94       	dec	r0
    1bbe:	e2 f7       	brpl	.-8      	; 0x1bb8 <GPIO_writePin+0x1ba>
    1bc0:	84 2b       	or	r24, r20
    1bc2:	8c 93       	st	X, r24

			break;

		}
	}
}
    1bc4:	0f 90       	pop	r0
    1bc6:	0f 90       	pop	r0
    1bc8:	0f 90       	pop	r0
    1bca:	0f 90       	pop	r0
    1bcc:	0f 90       	pop	r0
    1bce:	cf 91       	pop	r28
    1bd0:	df 91       	pop	r29
    1bd2:	08 95       	ret

00001bd4 <GPIO_readPin>:
 *                    If the input port number or pin number are not correct,
 *                    The function will return Logic Low.
 *[ARGUMENTS]		: unit8 (port_num, pin_num)
 *[RETURNS]			: unit8  "unsigned char"
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num){
    1bd4:	df 93       	push	r29
    1bd6:	cf 93       	push	r28
    1bd8:	00 d0       	rcall	.+0      	; 0x1bda <GPIO_readPin+0x6>
    1bda:	00 d0       	rcall	.+0      	; 0x1bdc <GPIO_readPin+0x8>
    1bdc:	0f 92       	push	r0
    1bde:	cd b7       	in	r28, 0x3d	; 61
    1be0:	de b7       	in	r29, 0x3e	; 62
    1be2:	8a 83       	std	Y+2, r24	; 0x02
    1be4:	6b 83       	std	Y+3, r22	; 0x03

	//set variable with logic low value (0)
	uint8 pin_value = LOGIC_LOW;
    1be6:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1be8:	8b 81       	ldd	r24, Y+3	; 0x03
    1bea:	88 30       	cpi	r24, 0x08	; 8
    1bec:	08 f0       	brcs	.+2      	; 0x1bf0 <GPIO_readPin+0x1c>
    1bee:	84 c0       	rjmp	.+264    	; 0x1cf8 <GPIO_readPin+0x124>
    1bf0:	8a 81       	ldd	r24, Y+2	; 0x02
    1bf2:	84 30       	cpi	r24, 0x04	; 4
    1bf4:	08 f0       	brcs	.+2      	; 0x1bf8 <GPIO_readPin+0x24>
    1bf6:	80 c0       	rjmp	.+256    	; 0x1cf8 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		//switch on port number
		switch(port_num){
    1bf8:	8a 81       	ldd	r24, Y+2	; 0x02
    1bfa:	28 2f       	mov	r18, r24
    1bfc:	30 e0       	ldi	r19, 0x00	; 0
    1bfe:	3d 83       	std	Y+5, r19	; 0x05
    1c00:	2c 83       	std	Y+4, r18	; 0x04
    1c02:	4c 81       	ldd	r20, Y+4	; 0x04
    1c04:	5d 81       	ldd	r21, Y+5	; 0x05
    1c06:	41 30       	cpi	r20, 0x01	; 1
    1c08:	51 05       	cpc	r21, r1
    1c0a:	79 f1       	breq	.+94     	; 0x1c6a <GPIO_readPin+0x96>
    1c0c:	8c 81       	ldd	r24, Y+4	; 0x04
    1c0e:	9d 81       	ldd	r25, Y+5	; 0x05
    1c10:	82 30       	cpi	r24, 0x02	; 2
    1c12:	91 05       	cpc	r25, r1
    1c14:	34 f4       	brge	.+12     	; 0x1c22 <GPIO_readPin+0x4e>
    1c16:	2c 81       	ldd	r18, Y+4	; 0x04
    1c18:	3d 81       	ldd	r19, Y+5	; 0x05
    1c1a:	21 15       	cp	r18, r1
    1c1c:	31 05       	cpc	r19, r1
    1c1e:	69 f0       	breq	.+26     	; 0x1c3a <GPIO_readPin+0x66>
    1c20:	6b c0       	rjmp	.+214    	; 0x1cf8 <GPIO_readPin+0x124>
    1c22:	4c 81       	ldd	r20, Y+4	; 0x04
    1c24:	5d 81       	ldd	r21, Y+5	; 0x05
    1c26:	42 30       	cpi	r20, 0x02	; 2
    1c28:	51 05       	cpc	r21, r1
    1c2a:	b9 f1       	breq	.+110    	; 0x1c9a <GPIO_readPin+0xc6>
    1c2c:	8c 81       	ldd	r24, Y+4	; 0x04
    1c2e:	9d 81       	ldd	r25, Y+5	; 0x05
    1c30:	83 30       	cpi	r24, 0x03	; 3
    1c32:	91 05       	cpc	r25, r1
    1c34:	09 f4       	brne	.+2      	; 0x1c38 <GPIO_readPin+0x64>
    1c36:	49 c0       	rjmp	.+146    	; 0x1cca <GPIO_readPin+0xf6>
    1c38:	5f c0       	rjmp	.+190    	; 0x1cf8 <GPIO_readPin+0x124>

		//check on chosen pin number in PORTA ,If high return pin value = 1 else pin value = 0
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num)){
    1c3a:	e9 e3       	ldi	r30, 0x39	; 57
    1c3c:	f0 e0       	ldi	r31, 0x00	; 0
    1c3e:	80 81       	ld	r24, Z
    1c40:	28 2f       	mov	r18, r24
    1c42:	30 e0       	ldi	r19, 0x00	; 0
    1c44:	8b 81       	ldd	r24, Y+3	; 0x03
    1c46:	88 2f       	mov	r24, r24
    1c48:	90 e0       	ldi	r25, 0x00	; 0
    1c4a:	a9 01       	movw	r20, r18
    1c4c:	02 c0       	rjmp	.+4      	; 0x1c52 <GPIO_readPin+0x7e>
    1c4e:	55 95       	asr	r21
    1c50:	47 95       	ror	r20
    1c52:	8a 95       	dec	r24
    1c54:	e2 f7       	brpl	.-8      	; 0x1c4e <GPIO_readPin+0x7a>
    1c56:	ca 01       	movw	r24, r20
    1c58:	81 70       	andi	r24, 0x01	; 1
    1c5a:	90 70       	andi	r25, 0x00	; 0
    1c5c:	88 23       	and	r24, r24
    1c5e:	19 f0       	breq	.+6      	; 0x1c66 <GPIO_readPin+0x92>
				pin_value = LOGIC_HIGH;
    1c60:	81 e0       	ldi	r24, 0x01	; 1
    1c62:	89 83       	std	Y+1, r24	; 0x01
    1c64:	49 c0       	rjmp	.+146    	; 0x1cf8 <GPIO_readPin+0x124>
			}
			else{
				pin_value = LOGIC_LOW;
    1c66:	19 82       	std	Y+1, r1	; 0x01
    1c68:	47 c0       	rjmp	.+142    	; 0x1cf8 <GPIO_readPin+0x124>
			}
			break;

			//check on chosen pin number in PORTB ,If high return pin value = 1 else pin value = 0
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num)){
    1c6a:	e6 e3       	ldi	r30, 0x36	; 54
    1c6c:	f0 e0       	ldi	r31, 0x00	; 0
    1c6e:	80 81       	ld	r24, Z
    1c70:	28 2f       	mov	r18, r24
    1c72:	30 e0       	ldi	r19, 0x00	; 0
    1c74:	8b 81       	ldd	r24, Y+3	; 0x03
    1c76:	88 2f       	mov	r24, r24
    1c78:	90 e0       	ldi	r25, 0x00	; 0
    1c7a:	a9 01       	movw	r20, r18
    1c7c:	02 c0       	rjmp	.+4      	; 0x1c82 <GPIO_readPin+0xae>
    1c7e:	55 95       	asr	r21
    1c80:	47 95       	ror	r20
    1c82:	8a 95       	dec	r24
    1c84:	e2 f7       	brpl	.-8      	; 0x1c7e <GPIO_readPin+0xaa>
    1c86:	ca 01       	movw	r24, r20
    1c88:	81 70       	andi	r24, 0x01	; 1
    1c8a:	90 70       	andi	r25, 0x00	; 0
    1c8c:	88 23       	and	r24, r24
    1c8e:	19 f0       	breq	.+6      	; 0x1c96 <GPIO_readPin+0xc2>
				pin_value = LOGIC_HIGH;
    1c90:	81 e0       	ldi	r24, 0x01	; 1
    1c92:	89 83       	std	Y+1, r24	; 0x01
    1c94:	31 c0       	rjmp	.+98     	; 0x1cf8 <GPIO_readPin+0x124>
			}
			else{
				pin_value = LOGIC_LOW;
    1c96:	19 82       	std	Y+1, r1	; 0x01
    1c98:	2f c0       	rjmp	.+94     	; 0x1cf8 <GPIO_readPin+0x124>
			}
			break;

			//check on chosen pin number in PORTC ,If high return pin value = 1 else pin value = 0
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num)){
    1c9a:	e3 e3       	ldi	r30, 0x33	; 51
    1c9c:	f0 e0       	ldi	r31, 0x00	; 0
    1c9e:	80 81       	ld	r24, Z
    1ca0:	28 2f       	mov	r18, r24
    1ca2:	30 e0       	ldi	r19, 0x00	; 0
    1ca4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ca6:	88 2f       	mov	r24, r24
    1ca8:	90 e0       	ldi	r25, 0x00	; 0
    1caa:	a9 01       	movw	r20, r18
    1cac:	02 c0       	rjmp	.+4      	; 0x1cb2 <GPIO_readPin+0xde>
    1cae:	55 95       	asr	r21
    1cb0:	47 95       	ror	r20
    1cb2:	8a 95       	dec	r24
    1cb4:	e2 f7       	brpl	.-8      	; 0x1cae <GPIO_readPin+0xda>
    1cb6:	ca 01       	movw	r24, r20
    1cb8:	81 70       	andi	r24, 0x01	; 1
    1cba:	90 70       	andi	r25, 0x00	; 0
    1cbc:	88 23       	and	r24, r24
    1cbe:	19 f0       	breq	.+6      	; 0x1cc6 <GPIO_readPin+0xf2>
				pin_value = LOGIC_HIGH;
    1cc0:	81 e0       	ldi	r24, 0x01	; 1
    1cc2:	89 83       	std	Y+1, r24	; 0x01
    1cc4:	19 c0       	rjmp	.+50     	; 0x1cf8 <GPIO_readPin+0x124>
			}
			else{
				pin_value = LOGIC_LOW;
    1cc6:	19 82       	std	Y+1, r1	; 0x01
    1cc8:	17 c0       	rjmp	.+46     	; 0x1cf8 <GPIO_readPin+0x124>
			}
			break;

			//check on chosen pin number in PORTD ,If high return pin value = 1 else pin value = 0
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num)){
    1cca:	e0 e3       	ldi	r30, 0x30	; 48
    1ccc:	f0 e0       	ldi	r31, 0x00	; 0
    1cce:	80 81       	ld	r24, Z
    1cd0:	28 2f       	mov	r18, r24
    1cd2:	30 e0       	ldi	r19, 0x00	; 0
    1cd4:	8b 81       	ldd	r24, Y+3	; 0x03
    1cd6:	88 2f       	mov	r24, r24
    1cd8:	90 e0       	ldi	r25, 0x00	; 0
    1cda:	a9 01       	movw	r20, r18
    1cdc:	02 c0       	rjmp	.+4      	; 0x1ce2 <GPIO_readPin+0x10e>
    1cde:	55 95       	asr	r21
    1ce0:	47 95       	ror	r20
    1ce2:	8a 95       	dec	r24
    1ce4:	e2 f7       	brpl	.-8      	; 0x1cde <GPIO_readPin+0x10a>
    1ce6:	ca 01       	movw	r24, r20
    1ce8:	81 70       	andi	r24, 0x01	; 1
    1cea:	90 70       	andi	r25, 0x00	; 0
    1cec:	88 23       	and	r24, r24
    1cee:	19 f0       	breq	.+6      	; 0x1cf6 <GPIO_readPin+0x122>
				pin_value = LOGIC_HIGH;
    1cf0:	81 e0       	ldi	r24, 0x01	; 1
    1cf2:	89 83       	std	Y+1, r24	; 0x01
    1cf4:	01 c0       	rjmp	.+2      	; 0x1cf8 <GPIO_readPin+0x124>
			}
			else{
				pin_value = LOGIC_LOW;
    1cf6:	19 82       	std	Y+1, r1	; 0x01
			}

			break;
		}
	}
	return pin_value;
    1cf8:	89 81       	ldd	r24, Y+1	; 0x01
}
    1cfa:	0f 90       	pop	r0
    1cfc:	0f 90       	pop	r0
    1cfe:	0f 90       	pop	r0
    1d00:	0f 90       	pop	r0
    1d02:	0f 90       	pop	r0
    1d04:	cf 91       	pop	r28
    1d06:	df 91       	pop	r29
    1d08:	08 95       	ret

00001d0a <GPIO_setupPortDirection>:
 *                    If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 *                    If the input port number is not correct, The function will not handle the request.
 *[ARGUMENTS]		: unit8 (port_num, direction)
 *[RETURNS]			: void
 */
void GPIO_setupPortDirection(uint8 port_num, uint8 direction){
    1d0a:	df 93       	push	r29
    1d0c:	cf 93       	push	r28
    1d0e:	00 d0       	rcall	.+0      	; 0x1d10 <GPIO_setupPortDirection+0x6>
    1d10:	00 d0       	rcall	.+0      	; 0x1d12 <GPIO_setupPortDirection+0x8>
    1d12:	cd b7       	in	r28, 0x3d	; 61
    1d14:	de b7       	in	r29, 0x3e	; 62
    1d16:	89 83       	std	Y+1, r24	; 0x01
    1d18:	6a 83       	std	Y+2, r22	; 0x02

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1d1a:	89 81       	ldd	r24, Y+1	; 0x01
    1d1c:	84 30       	cpi	r24, 0x04	; 4
    1d1e:	90 f5       	brcc	.+100    	; 0x1d84 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		//switch on port number
		switch(port_num){
    1d20:	89 81       	ldd	r24, Y+1	; 0x01
    1d22:	28 2f       	mov	r18, r24
    1d24:	30 e0       	ldi	r19, 0x00	; 0
    1d26:	3c 83       	std	Y+4, r19	; 0x04
    1d28:	2b 83       	std	Y+3, r18	; 0x03
    1d2a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d2c:	9c 81       	ldd	r25, Y+4	; 0x04
    1d2e:	81 30       	cpi	r24, 0x01	; 1
    1d30:	91 05       	cpc	r25, r1
    1d32:	d1 f0       	breq	.+52     	; 0x1d68 <GPIO_setupPortDirection+0x5e>
    1d34:	2b 81       	ldd	r18, Y+3	; 0x03
    1d36:	3c 81       	ldd	r19, Y+4	; 0x04
    1d38:	22 30       	cpi	r18, 0x02	; 2
    1d3a:	31 05       	cpc	r19, r1
    1d3c:	2c f4       	brge	.+10     	; 0x1d48 <GPIO_setupPortDirection+0x3e>
    1d3e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d40:	9c 81       	ldd	r25, Y+4	; 0x04
    1d42:	00 97       	sbiw	r24, 0x00	; 0
    1d44:	61 f0       	breq	.+24     	; 0x1d5e <GPIO_setupPortDirection+0x54>
    1d46:	1e c0       	rjmp	.+60     	; 0x1d84 <GPIO_setupPortDirection+0x7a>
    1d48:	2b 81       	ldd	r18, Y+3	; 0x03
    1d4a:	3c 81       	ldd	r19, Y+4	; 0x04
    1d4c:	22 30       	cpi	r18, 0x02	; 2
    1d4e:	31 05       	cpc	r19, r1
    1d50:	81 f0       	breq	.+32     	; 0x1d72 <GPIO_setupPortDirection+0x68>
    1d52:	8b 81       	ldd	r24, Y+3	; 0x03
    1d54:	9c 81       	ldd	r25, Y+4	; 0x04
    1d56:	83 30       	cpi	r24, 0x03	; 3
    1d58:	91 05       	cpc	r25, r1
    1d5a:	81 f0       	breq	.+32     	; 0x1d7c <GPIO_setupPortDirection+0x72>
    1d5c:	13 c0       	rjmp	.+38     	; 0x1d84 <GPIO_setupPortDirection+0x7a>

		//SET direction of PORTA directly from REG: DDRA
		case PORTA_ID:
			DDRA = direction;
    1d5e:	ea e3       	ldi	r30, 0x3A	; 58
    1d60:	f0 e0       	ldi	r31, 0x00	; 0
    1d62:	8a 81       	ldd	r24, Y+2	; 0x02
    1d64:	80 83       	st	Z, r24
    1d66:	0e c0       	rjmp	.+28     	; 0x1d84 <GPIO_setupPortDirection+0x7a>
			break;

			//SET direction of PORTB directly from REG: DDRB
		case PORTB_ID:
			DDRB = direction;
    1d68:	e7 e3       	ldi	r30, 0x37	; 55
    1d6a:	f0 e0       	ldi	r31, 0x00	; 0
    1d6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d6e:	80 83       	st	Z, r24
    1d70:	09 c0       	rjmp	.+18     	; 0x1d84 <GPIO_setupPortDirection+0x7a>
			break;

			//SET direction of PORTC directly from REG: DDRC
		case PORTC_ID:
			DDRC = direction;
    1d72:	e4 e3       	ldi	r30, 0x34	; 52
    1d74:	f0 e0       	ldi	r31, 0x00	; 0
    1d76:	8a 81       	ldd	r24, Y+2	; 0x02
    1d78:	80 83       	st	Z, r24
    1d7a:	04 c0       	rjmp	.+8      	; 0x1d84 <GPIO_setupPortDirection+0x7a>
			break;

			//SET direction of PORTD directly from REG: DDRD
		case PORTD_ID:
			DDRD = direction;
    1d7c:	e1 e3       	ldi	r30, 0x31	; 49
    1d7e:	f0 e0       	ldi	r31, 0x00	; 0
    1d80:	8a 81       	ldd	r24, Y+2	; 0x02
    1d82:	80 83       	st	Z, r24
			break;

		}
	}
}
    1d84:	0f 90       	pop	r0
    1d86:	0f 90       	pop	r0
    1d88:	0f 90       	pop	r0
    1d8a:	0f 90       	pop	r0
    1d8c:	cf 91       	pop	r28
    1d8e:	df 91       	pop	r29
    1d90:	08 95       	ret

00001d92 <GPIO_writePort>:
 *                    If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 *                    If the input port number is not correct, The function will not handle the request.
 *[ARGUMENTS]		: unit8 (port_num, value)
 *[RETURNS]			: void
 */
void GPIO_writePort(uint8 port_num, uint8 value){
    1d92:	df 93       	push	r29
    1d94:	cf 93       	push	r28
    1d96:	00 d0       	rcall	.+0      	; 0x1d98 <GPIO_writePort+0x6>
    1d98:	00 d0       	rcall	.+0      	; 0x1d9a <GPIO_writePort+0x8>
    1d9a:	cd b7       	in	r28, 0x3d	; 61
    1d9c:	de b7       	in	r29, 0x3e	; 62
    1d9e:	89 83       	std	Y+1, r24	; 0x01
    1da0:	6a 83       	std	Y+2, r22	; 0x02

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1da2:	89 81       	ldd	r24, Y+1	; 0x01
    1da4:	84 30       	cpi	r24, 0x04	; 4
    1da6:	90 f5       	brcc	.+100    	; 0x1e0c <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		//switch on port number
		switch(port_num){
    1da8:	89 81       	ldd	r24, Y+1	; 0x01
    1daa:	28 2f       	mov	r18, r24
    1dac:	30 e0       	ldi	r19, 0x00	; 0
    1dae:	3c 83       	std	Y+4, r19	; 0x04
    1db0:	2b 83       	std	Y+3, r18	; 0x03
    1db2:	8b 81       	ldd	r24, Y+3	; 0x03
    1db4:	9c 81       	ldd	r25, Y+4	; 0x04
    1db6:	81 30       	cpi	r24, 0x01	; 1
    1db8:	91 05       	cpc	r25, r1
    1dba:	d1 f0       	breq	.+52     	; 0x1df0 <GPIO_writePort+0x5e>
    1dbc:	2b 81       	ldd	r18, Y+3	; 0x03
    1dbe:	3c 81       	ldd	r19, Y+4	; 0x04
    1dc0:	22 30       	cpi	r18, 0x02	; 2
    1dc2:	31 05       	cpc	r19, r1
    1dc4:	2c f4       	brge	.+10     	; 0x1dd0 <GPIO_writePort+0x3e>
    1dc6:	8b 81       	ldd	r24, Y+3	; 0x03
    1dc8:	9c 81       	ldd	r25, Y+4	; 0x04
    1dca:	00 97       	sbiw	r24, 0x00	; 0
    1dcc:	61 f0       	breq	.+24     	; 0x1de6 <GPIO_writePort+0x54>
    1dce:	1e c0       	rjmp	.+60     	; 0x1e0c <GPIO_writePort+0x7a>
    1dd0:	2b 81       	ldd	r18, Y+3	; 0x03
    1dd2:	3c 81       	ldd	r19, Y+4	; 0x04
    1dd4:	22 30       	cpi	r18, 0x02	; 2
    1dd6:	31 05       	cpc	r19, r1
    1dd8:	81 f0       	breq	.+32     	; 0x1dfa <GPIO_writePort+0x68>
    1dda:	8b 81       	ldd	r24, Y+3	; 0x03
    1ddc:	9c 81       	ldd	r25, Y+4	; 0x04
    1dde:	83 30       	cpi	r24, 0x03	; 3
    1de0:	91 05       	cpc	r25, r1
    1de2:	81 f0       	breq	.+32     	; 0x1e04 <GPIO_writePort+0x72>
    1de4:	13 c0       	rjmp	.+38     	; 0x1e0c <GPIO_writePort+0x7a>

		//Write value in PORTA
		case PORTA_ID:
			PORTA = value;
    1de6:	eb e3       	ldi	r30, 0x3B	; 59
    1de8:	f0 e0       	ldi	r31, 0x00	; 0
    1dea:	8a 81       	ldd	r24, Y+2	; 0x02
    1dec:	80 83       	st	Z, r24
    1dee:	0e c0       	rjmp	.+28     	; 0x1e0c <GPIO_writePort+0x7a>
			break;

			//Write value in PORTB
		case PORTB_ID:
			PORTB = value;
    1df0:	e8 e3       	ldi	r30, 0x38	; 56
    1df2:	f0 e0       	ldi	r31, 0x00	; 0
    1df4:	8a 81       	ldd	r24, Y+2	; 0x02
    1df6:	80 83       	st	Z, r24
    1df8:	09 c0       	rjmp	.+18     	; 0x1e0c <GPIO_writePort+0x7a>
			break;

			//Write value in PORTC
		case PORTC_ID:
			PORTC = value;
    1dfa:	e5 e3       	ldi	r30, 0x35	; 53
    1dfc:	f0 e0       	ldi	r31, 0x00	; 0
    1dfe:	8a 81       	ldd	r24, Y+2	; 0x02
    1e00:	80 83       	st	Z, r24
    1e02:	04 c0       	rjmp	.+8      	; 0x1e0c <GPIO_writePort+0x7a>
			break;

			//Write value in PORTD
		case PORTD_ID:
			PORTD = value;
    1e04:	e2 e3       	ldi	r30, 0x32	; 50
    1e06:	f0 e0       	ldi	r31, 0x00	; 0
    1e08:	8a 81       	ldd	r24, Y+2	; 0x02
    1e0a:	80 83       	st	Z, r24
			break;

		}
	}

}
    1e0c:	0f 90       	pop	r0
    1e0e:	0f 90       	pop	r0
    1e10:	0f 90       	pop	r0
    1e12:	0f 90       	pop	r0
    1e14:	cf 91       	pop	r28
    1e16:	df 91       	pop	r29
    1e18:	08 95       	ret

00001e1a <GPIO_readPort>:
 *[DESCRIPTION]		: Read and return the value of the required port.
 *                    If the input port number is not correct, The function will return ZERO value.
 *[ARGUMENTS]		: unit8 (port_num)
 *[RETURNS]			: unit8  "unsigned char"
 */
uint8 GPIO_readPort(uint8 port_num){
    1e1a:	df 93       	push	r29
    1e1c:	cf 93       	push	r28
    1e1e:	00 d0       	rcall	.+0      	; 0x1e20 <GPIO_readPort+0x6>
    1e20:	00 d0       	rcall	.+0      	; 0x1e22 <GPIO_readPort+0x8>
    1e22:	cd b7       	in	r28, 0x3d	; 61
    1e24:	de b7       	in	r29, 0x3e	; 62
    1e26:	8a 83       	std	Y+2, r24	; 0x02
	//set variable with logic low value (0)
	uint8 port_value = LOGIC_LOW;
    1e28:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1e2a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e2c:	84 30       	cpi	r24, 0x04	; 4
    1e2e:	90 f5       	brcc	.+100    	; 0x1e94 <GPIO_readPort+0x7a>
	}
	else
	{

		//switch on port number
		switch(port_num){
    1e30:	8a 81       	ldd	r24, Y+2	; 0x02
    1e32:	28 2f       	mov	r18, r24
    1e34:	30 e0       	ldi	r19, 0x00	; 0
    1e36:	3c 83       	std	Y+4, r19	; 0x04
    1e38:	2b 83       	std	Y+3, r18	; 0x03
    1e3a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e3c:	9c 81       	ldd	r25, Y+4	; 0x04
    1e3e:	81 30       	cpi	r24, 0x01	; 1
    1e40:	91 05       	cpc	r25, r1
    1e42:	d1 f0       	breq	.+52     	; 0x1e78 <GPIO_readPort+0x5e>
    1e44:	2b 81       	ldd	r18, Y+3	; 0x03
    1e46:	3c 81       	ldd	r19, Y+4	; 0x04
    1e48:	22 30       	cpi	r18, 0x02	; 2
    1e4a:	31 05       	cpc	r19, r1
    1e4c:	2c f4       	brge	.+10     	; 0x1e58 <GPIO_readPort+0x3e>
    1e4e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e50:	9c 81       	ldd	r25, Y+4	; 0x04
    1e52:	00 97       	sbiw	r24, 0x00	; 0
    1e54:	61 f0       	breq	.+24     	; 0x1e6e <GPIO_readPort+0x54>
    1e56:	1e c0       	rjmp	.+60     	; 0x1e94 <GPIO_readPort+0x7a>
    1e58:	2b 81       	ldd	r18, Y+3	; 0x03
    1e5a:	3c 81       	ldd	r19, Y+4	; 0x04
    1e5c:	22 30       	cpi	r18, 0x02	; 2
    1e5e:	31 05       	cpc	r19, r1
    1e60:	81 f0       	breq	.+32     	; 0x1e82 <GPIO_readPort+0x68>
    1e62:	8b 81       	ldd	r24, Y+3	; 0x03
    1e64:	9c 81       	ldd	r25, Y+4	; 0x04
    1e66:	83 30       	cpi	r24, 0x03	; 3
    1e68:	91 05       	cpc	r25, r1
    1e6a:	81 f0       	breq	.+32     	; 0x1e8c <GPIO_readPort+0x72>
    1e6c:	13 c0       	rjmp	.+38     	; 0x1e94 <GPIO_readPort+0x7a>

		//check on PORTA value from PINA REG.
		case PORTA_ID:
			port_value = PINA;
    1e6e:	e9 e3       	ldi	r30, 0x39	; 57
    1e70:	f0 e0       	ldi	r31, 0x00	; 0
    1e72:	80 81       	ld	r24, Z
    1e74:	89 83       	std	Y+1, r24	; 0x01
    1e76:	0e c0       	rjmp	.+28     	; 0x1e94 <GPIO_readPort+0x7a>
			break;

			//check on PORTB value from PINB REG.
		case PORTB_ID:
			port_value = PINB;
    1e78:	e6 e3       	ldi	r30, 0x36	; 54
    1e7a:	f0 e0       	ldi	r31, 0x00	; 0
    1e7c:	80 81       	ld	r24, Z
    1e7e:	89 83       	std	Y+1, r24	; 0x01
    1e80:	09 c0       	rjmp	.+18     	; 0x1e94 <GPIO_readPort+0x7a>
			break;

			//check on PORTC value from PINC REG.
		case PORTC_ID:
			port_value = PINC;
    1e82:	e3 e3       	ldi	r30, 0x33	; 51
    1e84:	f0 e0       	ldi	r31, 0x00	; 0
    1e86:	80 81       	ld	r24, Z
    1e88:	89 83       	std	Y+1, r24	; 0x01
    1e8a:	04 c0       	rjmp	.+8      	; 0x1e94 <GPIO_readPort+0x7a>
			break;

			//check on PORTD value from PIND REG.
		case PORTD_ID:
			port_value = PIND;
    1e8c:	e0 e3       	ldi	r30, 0x30	; 48
    1e8e:	f0 e0       	ldi	r31, 0x00	; 0
    1e90:	80 81       	ld	r24, Z
    1e92:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}
	return port_value;
    1e94:	89 81       	ldd	r24, Y+1	; 0x01

}
    1e96:	0f 90       	pop	r0
    1e98:	0f 90       	pop	r0
    1e9a:	0f 90       	pop	r0
    1e9c:	0f 90       	pop	r0
    1e9e:	cf 91       	pop	r28
    1ea0:	df 91       	pop	r29
    1ea2:	08 95       	ret

00001ea4 <KEYPAD_getPressedKey>:
#endif

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KEYPAD_getPressedKey(void){
    1ea4:	df 93       	push	r29
    1ea6:	cf 93       	push	r28
    1ea8:	cd b7       	in	r28, 0x3d	; 61
    1eaa:	de b7       	in	r29, 0x3e	; 62
    1eac:	60 97       	sbiw	r28, 0x10	; 16
    1eae:	0f b6       	in	r0, 0x3f	; 63
    1eb0:	f8 94       	cli
    1eb2:	de bf       	out	0x3e, r29	; 62
    1eb4:	0f be       	out	0x3f, r0	; 63
    1eb6:	cd bf       	out	0x3d, r28	; 61
	uint8 col,row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID, PIN_INPUT);
    1eb8:	81 e0       	ldi	r24, 0x01	; 1
    1eba:	60 e0       	ldi	r22, 0x00	; 0
    1ebc:	40 e0       	ldi	r20, 0x00	; 0
    1ebe:	0e 94 14 0c 	call	0x1828	; 0x1828 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
    1ec2:	81 e0       	ldi	r24, 0x01	; 1
    1ec4:	61 e0       	ldi	r22, 0x01	; 1
    1ec6:	40 e0       	ldi	r20, 0x00	; 0
    1ec8:	0e 94 14 0c 	call	0x1828	; 0x1828 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
    1ecc:	81 e0       	ldi	r24, 0x01	; 1
    1ece:	62 e0       	ldi	r22, 0x02	; 2
    1ed0:	40 e0       	ldi	r20, 0x00	; 0
    1ed2:	0e 94 14 0c 	call	0x1828	; 0x1828 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
    1ed6:	81 e0       	ldi	r24, 0x01	; 1
    1ed8:	63 e0       	ldi	r22, 0x03	; 3
    1eda:	40 e0       	ldi	r20, 0x00	; 0
    1edc:	0e 94 14 0c 	call	0x1828	; 0x1828 <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    1ee0:	81 e0       	ldi	r24, 0x01	; 1
    1ee2:	64 e0       	ldi	r22, 0x04	; 4
    1ee4:	40 e0       	ldi	r20, 0x00	; 0
    1ee6:	0e 94 14 0c 	call	0x1828	; 0x1828 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    1eea:	81 e0       	ldi	r24, 0x01	; 1
    1eec:	65 e0       	ldi	r22, 0x05	; 5
    1eee:	40 e0       	ldi	r20, 0x00	; 0
    1ef0:	0e 94 14 0c 	call	0x1828	; 0x1828 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    1ef4:	81 e0       	ldi	r24, 0x01	; 1
    1ef6:	66 e0       	ldi	r22, 0x06	; 6
    1ef8:	40 e0       	ldi	r20, 0x00	; 0
    1efa:	0e 94 14 0c 	call	0x1828	; 0x1828 <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
    1efe:	81 e0       	ldi	r24, 0x01	; 1
    1f00:	67 e0       	ldi	r22, 0x07	; 7
    1f02:	40 e0       	ldi	r20, 0x00	; 0
    1f04:	0e 94 14 0c 	call	0x1828	; 0x1828 <GPIO_setupPinDirection>
#endif
	while(1){
		/* loop on ROWS */
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++)
    1f08:	1f 86       	std	Y+15, r1	; 0x0f
    1f0a:	ab c0       	rjmp	.+342    	; 0x2062 <KEYPAD_getPressedKey+0x1be>
		{
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row, PIN_OUTPUT);
    1f0c:	81 e0       	ldi	r24, 0x01	; 1
    1f0e:	6f 85       	ldd	r22, Y+15	; 0x0f
    1f10:	41 e0       	ldi	r20, 0x01	; 1
    1f12:	0e 94 14 0c 	call	0x1828	; 0x1828 <GPIO_setupPinDirection>

			GPIO_writePin(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    1f16:	81 e0       	ldi	r24, 0x01	; 1
    1f18:	6f 85       	ldd	r22, Y+15	; 0x0f
    1f1a:	40 e0       	ldi	r20, 0x00	; 0
    1f1c:	0e 94 ff 0c 	call	0x19fe	; 0x19fe <GPIO_writePin>

			/*LOOP ON COL*/
			for(col=0 ; col<KEYPAD_NUM_COLS ; col++)
    1f20:	18 8a       	std	Y+16, r1	; 0x10
    1f22:	22 c0       	rjmp	.+68     	; 0x1f68 <KEYPAD_getPressedKey+0xc4>
			{
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    1f24:	88 89       	ldd	r24, Y+16	; 0x10
    1f26:	98 2f       	mov	r25, r24
    1f28:	9c 5f       	subi	r25, 0xFC	; 252
    1f2a:	81 e0       	ldi	r24, 0x01	; 1
    1f2c:	69 2f       	mov	r22, r25
    1f2e:	0e 94 ea 0d 	call	0x1bd4	; 0x1bd4 <GPIO_readPin>
    1f32:	88 23       	and	r24, r24
    1f34:	b1 f4       	brne	.+44     	; 0x1f62 <KEYPAD_getPressedKey+0xbe>
#endif
#elif (KEYPAD_NUM_COLS == 4)
#ifdef STANDARD_KEYPAD
					return ((row*KEYPAD_NUM_COLS)+col+1);
#else
					return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    1f36:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f38:	88 2f       	mov	r24, r24
    1f3a:	90 e0       	ldi	r25, 0x00	; 0
    1f3c:	88 0f       	add	r24, r24
    1f3e:	99 1f       	adc	r25, r25
    1f40:	88 0f       	add	r24, r24
    1f42:	99 1f       	adc	r25, r25
    1f44:	98 2f       	mov	r25, r24
    1f46:	88 89       	ldd	r24, Y+16	; 0x10
    1f48:	89 0f       	add	r24, r25
    1f4a:	8f 5f       	subi	r24, 0xFF	; 255
    1f4c:	0e 94 36 10 	call	0x206c	; 0x206c <KEYPAD_4x4_adjustKeyNumber>
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
			_delay_ms(60); /* Add small delay FOR proteus */
		}
	}
}
    1f50:	60 96       	adiw	r28, 0x10	; 16
    1f52:	0f b6       	in	r0, 0x3f	; 63
    1f54:	f8 94       	cli
    1f56:	de bf       	out	0x3e, r29	; 62
    1f58:	0f be       	out	0x3f, r0	; 63
    1f5a:	cd bf       	out	0x3d, r28	; 61
    1f5c:	cf 91       	pop	r28
    1f5e:	df 91       	pop	r29
    1f60:	08 95       	ret
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row, PIN_OUTPUT);

			GPIO_writePin(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			/*LOOP ON COL*/
			for(col=0 ; col<KEYPAD_NUM_COLS ; col++)
    1f62:	88 89       	ldd	r24, Y+16	; 0x10
    1f64:	8f 5f       	subi	r24, 0xFF	; 255
    1f66:	88 8b       	std	Y+16, r24	; 0x10
    1f68:	88 89       	ldd	r24, Y+16	; 0x10
    1f6a:	84 30       	cpi	r24, 0x04	; 4
    1f6c:	d8 f2       	brcs	.-74     	; 0x1f24 <KEYPAD_getPressedKey+0x80>
#endif
#endif

				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
    1f6e:	81 e0       	ldi	r24, 0x01	; 1
    1f70:	6f 85       	ldd	r22, Y+15	; 0x0f
    1f72:	40 e0       	ldi	r20, 0x00	; 0
    1f74:	0e 94 14 0c 	call	0x1828	; 0x1828 <GPIO_setupPinDirection>
    1f78:	80 e0       	ldi	r24, 0x00	; 0
    1f7a:	90 e0       	ldi	r25, 0x00	; 0
    1f7c:	a0 e7       	ldi	r26, 0x70	; 112
    1f7e:	b2 e4       	ldi	r27, 0x42	; 66
    1f80:	8b 87       	std	Y+11, r24	; 0x0b
    1f82:	9c 87       	std	Y+12, r25	; 0x0c
    1f84:	ad 87       	std	Y+13, r26	; 0x0d
    1f86:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f88:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f8a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f8c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f8e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f90:	20 e0       	ldi	r18, 0x00	; 0
    1f92:	30 e0       	ldi	r19, 0x00	; 0
    1f94:	4a ef       	ldi	r20, 0xFA	; 250
    1f96:	54 e4       	ldi	r21, 0x44	; 68
    1f98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f9c:	dc 01       	movw	r26, r24
    1f9e:	cb 01       	movw	r24, r22
    1fa0:	8f 83       	std	Y+7, r24	; 0x07
    1fa2:	98 87       	std	Y+8, r25	; 0x08
    1fa4:	a9 87       	std	Y+9, r26	; 0x09
    1fa6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1fa8:	6f 81       	ldd	r22, Y+7	; 0x07
    1faa:	78 85       	ldd	r23, Y+8	; 0x08
    1fac:	89 85       	ldd	r24, Y+9	; 0x09
    1fae:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fb0:	20 e0       	ldi	r18, 0x00	; 0
    1fb2:	30 e0       	ldi	r19, 0x00	; 0
    1fb4:	40 e8       	ldi	r20, 0x80	; 128
    1fb6:	5f e3       	ldi	r21, 0x3F	; 63
    1fb8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1fbc:	88 23       	and	r24, r24
    1fbe:	2c f4       	brge	.+10     	; 0x1fca <KEYPAD_getPressedKey+0x126>
		__ticks = 1;
    1fc0:	81 e0       	ldi	r24, 0x01	; 1
    1fc2:	90 e0       	ldi	r25, 0x00	; 0
    1fc4:	9e 83       	std	Y+6, r25	; 0x06
    1fc6:	8d 83       	std	Y+5, r24	; 0x05
    1fc8:	3f c0       	rjmp	.+126    	; 0x2048 <KEYPAD_getPressedKey+0x1a4>
	else if (__tmp > 65535)
    1fca:	6f 81       	ldd	r22, Y+7	; 0x07
    1fcc:	78 85       	ldd	r23, Y+8	; 0x08
    1fce:	89 85       	ldd	r24, Y+9	; 0x09
    1fd0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fd2:	20 e0       	ldi	r18, 0x00	; 0
    1fd4:	3f ef       	ldi	r19, 0xFF	; 255
    1fd6:	4f e7       	ldi	r20, 0x7F	; 127
    1fd8:	57 e4       	ldi	r21, 0x47	; 71
    1fda:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1fde:	18 16       	cp	r1, r24
    1fe0:	4c f5       	brge	.+82     	; 0x2034 <KEYPAD_getPressedKey+0x190>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fe2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fe4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fe6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fe8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fea:	20 e0       	ldi	r18, 0x00	; 0
    1fec:	30 e0       	ldi	r19, 0x00	; 0
    1fee:	40 e2       	ldi	r20, 0x20	; 32
    1ff0:	51 e4       	ldi	r21, 0x41	; 65
    1ff2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ff6:	dc 01       	movw	r26, r24
    1ff8:	cb 01       	movw	r24, r22
    1ffa:	bc 01       	movw	r22, r24
    1ffc:	cd 01       	movw	r24, r26
    1ffe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2002:	dc 01       	movw	r26, r24
    2004:	cb 01       	movw	r24, r22
    2006:	9e 83       	std	Y+6, r25	; 0x06
    2008:	8d 83       	std	Y+5, r24	; 0x05
    200a:	0f c0       	rjmp	.+30     	; 0x202a <KEYPAD_getPressedKey+0x186>
    200c:	88 ec       	ldi	r24, 0xC8	; 200
    200e:	90 e0       	ldi	r25, 0x00	; 0
    2010:	9c 83       	std	Y+4, r25	; 0x04
    2012:	8b 83       	std	Y+3, r24	; 0x03
    2014:	8b 81       	ldd	r24, Y+3	; 0x03
    2016:	9c 81       	ldd	r25, Y+4	; 0x04
    2018:	01 97       	sbiw	r24, 0x01	; 1
    201a:	f1 f7       	brne	.-4      	; 0x2018 <KEYPAD_getPressedKey+0x174>
    201c:	9c 83       	std	Y+4, r25	; 0x04
    201e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2020:	8d 81       	ldd	r24, Y+5	; 0x05
    2022:	9e 81       	ldd	r25, Y+6	; 0x06
    2024:	01 97       	sbiw	r24, 0x01	; 1
    2026:	9e 83       	std	Y+6, r25	; 0x06
    2028:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    202a:	8d 81       	ldd	r24, Y+5	; 0x05
    202c:	9e 81       	ldd	r25, Y+6	; 0x06
    202e:	00 97       	sbiw	r24, 0x00	; 0
    2030:	69 f7       	brne	.-38     	; 0x200c <KEYPAD_getPressedKey+0x168>
    2032:	14 c0       	rjmp	.+40     	; 0x205c <KEYPAD_getPressedKey+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2034:	6f 81       	ldd	r22, Y+7	; 0x07
    2036:	78 85       	ldd	r23, Y+8	; 0x08
    2038:	89 85       	ldd	r24, Y+9	; 0x09
    203a:	9a 85       	ldd	r25, Y+10	; 0x0a
    203c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2040:	dc 01       	movw	r26, r24
    2042:	cb 01       	movw	r24, r22
    2044:	9e 83       	std	Y+6, r25	; 0x06
    2046:	8d 83       	std	Y+5, r24	; 0x05
    2048:	8d 81       	ldd	r24, Y+5	; 0x05
    204a:	9e 81       	ldd	r25, Y+6	; 0x06
    204c:	9a 83       	std	Y+2, r25	; 0x02
    204e:	89 83       	std	Y+1, r24	; 0x01
    2050:	89 81       	ldd	r24, Y+1	; 0x01
    2052:	9a 81       	ldd	r25, Y+2	; 0x02
    2054:	01 97       	sbiw	r24, 0x01	; 1
    2056:	f1 f7       	brne	.-4      	; 0x2054 <KEYPAD_getPressedKey+0x1b0>
    2058:	9a 83       	std	Y+2, r25	; 0x02
    205a:	89 83       	std	Y+1, r24	; 0x01
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
	while(1){
		/* loop on ROWS */
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++)
    205c:	8f 85       	ldd	r24, Y+15	; 0x0f
    205e:	8f 5f       	subi	r24, 0xFF	; 255
    2060:	8f 87       	std	Y+15, r24	; 0x0f
    2062:	8f 85       	ldd	r24, Y+15	; 0x0f
    2064:	84 30       	cpi	r24, 0x04	; 4
    2066:	08 f4       	brcc	.+2      	; 0x206a <KEYPAD_getPressedKey+0x1c6>
    2068:	51 cf       	rjmp	.-350    	; 0x1f0c <KEYPAD_getPressedKey+0x68>
    206a:	4e cf       	rjmp	.-356    	; 0x1f08 <KEYPAD_getPressedKey+0x64>

0000206c <KEYPAD_4x4_adjustKeyNumber>:
	return Keypad_button;
}

#elif (KEYPAD_NUM_COLS == 4)
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    206c:	df 93       	push	r29
    206e:	cf 93       	push	r28
    2070:	00 d0       	rcall	.+0      	; 0x2072 <KEYPAD_4x4_adjustKeyNumber+0x6>
    2072:	00 d0       	rcall	.+0      	; 0x2074 <KEYPAD_4x4_adjustKeyNumber+0x8>
    2074:	cd b7       	in	r28, 0x3d	; 61
    2076:	de b7       	in	r29, 0x3e	; 62
    2078:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    207a:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    207c:	8a 81       	ldd	r24, Y+2	; 0x02
    207e:	28 2f       	mov	r18, r24
    2080:	30 e0       	ldi	r19, 0x00	; 0
    2082:	3c 83       	std	Y+4, r19	; 0x04
    2084:	2b 83       	std	Y+3, r18	; 0x03
    2086:	8b 81       	ldd	r24, Y+3	; 0x03
    2088:	9c 81       	ldd	r25, Y+4	; 0x04
    208a:	88 30       	cpi	r24, 0x08	; 8
    208c:	91 05       	cpc	r25, r1
    208e:	09 f4       	brne	.+2      	; 0x2092 <KEYPAD_4x4_adjustKeyNumber+0x26>
    2090:	70 c0       	rjmp	.+224    	; 0x2172 <KEYPAD_4x4_adjustKeyNumber+0x106>
    2092:	2b 81       	ldd	r18, Y+3	; 0x03
    2094:	3c 81       	ldd	r19, Y+4	; 0x04
    2096:	29 30       	cpi	r18, 0x09	; 9
    2098:	31 05       	cpc	r19, r1
    209a:	5c f5       	brge	.+86     	; 0x20f2 <KEYPAD_4x4_adjustKeyNumber+0x86>
    209c:	8b 81       	ldd	r24, Y+3	; 0x03
    209e:	9c 81       	ldd	r25, Y+4	; 0x04
    20a0:	84 30       	cpi	r24, 0x04	; 4
    20a2:	91 05       	cpc	r25, r1
    20a4:	09 f4       	brne	.+2      	; 0x20a8 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    20a6:	59 c0       	rjmp	.+178    	; 0x215a <KEYPAD_4x4_adjustKeyNumber+0xee>
    20a8:	2b 81       	ldd	r18, Y+3	; 0x03
    20aa:	3c 81       	ldd	r19, Y+4	; 0x04
    20ac:	25 30       	cpi	r18, 0x05	; 5
    20ae:	31 05       	cpc	r19, r1
    20b0:	9c f4       	brge	.+38     	; 0x20d8 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    20b2:	8b 81       	ldd	r24, Y+3	; 0x03
    20b4:	9c 81       	ldd	r25, Y+4	; 0x04
    20b6:	82 30       	cpi	r24, 0x02	; 2
    20b8:	91 05       	cpc	r25, r1
    20ba:	09 f4       	brne	.+2      	; 0x20be <KEYPAD_4x4_adjustKeyNumber+0x52>
    20bc:	48 c0       	rjmp	.+144    	; 0x214e <KEYPAD_4x4_adjustKeyNumber+0xe2>
    20be:	2b 81       	ldd	r18, Y+3	; 0x03
    20c0:	3c 81       	ldd	r19, Y+4	; 0x04
    20c2:	23 30       	cpi	r18, 0x03	; 3
    20c4:	31 05       	cpc	r19, r1
    20c6:	0c f0       	brlt	.+2      	; 0x20ca <KEYPAD_4x4_adjustKeyNumber+0x5e>
    20c8:	45 c0       	rjmp	.+138    	; 0x2154 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    20ca:	8b 81       	ldd	r24, Y+3	; 0x03
    20cc:	9c 81       	ldd	r25, Y+4	; 0x04
    20ce:	81 30       	cpi	r24, 0x01	; 1
    20d0:	91 05       	cpc	r25, r1
    20d2:	09 f4       	brne	.+2      	; 0x20d6 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    20d4:	39 c0       	rjmp	.+114    	; 0x2148 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    20d6:	67 c0       	rjmp	.+206    	; 0x21a6 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    20d8:	2b 81       	ldd	r18, Y+3	; 0x03
    20da:	3c 81       	ldd	r19, Y+4	; 0x04
    20dc:	26 30       	cpi	r18, 0x06	; 6
    20de:	31 05       	cpc	r19, r1
    20e0:	09 f4       	brne	.+2      	; 0x20e4 <KEYPAD_4x4_adjustKeyNumber+0x78>
    20e2:	41 c0       	rjmp	.+130    	; 0x2166 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    20e4:	8b 81       	ldd	r24, Y+3	; 0x03
    20e6:	9c 81       	ldd	r25, Y+4	; 0x04
    20e8:	87 30       	cpi	r24, 0x07	; 7
    20ea:	91 05       	cpc	r25, r1
    20ec:	0c f0       	brlt	.+2      	; 0x20f0 <KEYPAD_4x4_adjustKeyNumber+0x84>
    20ee:	3e c0       	rjmp	.+124    	; 0x216c <KEYPAD_4x4_adjustKeyNumber+0x100>
    20f0:	37 c0       	rjmp	.+110    	; 0x2160 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    20f2:	2b 81       	ldd	r18, Y+3	; 0x03
    20f4:	3c 81       	ldd	r19, Y+4	; 0x04
    20f6:	2c 30       	cpi	r18, 0x0C	; 12
    20f8:	31 05       	cpc	r19, r1
    20fa:	09 f4       	brne	.+2      	; 0x20fe <KEYPAD_4x4_adjustKeyNumber+0x92>
    20fc:	46 c0       	rjmp	.+140    	; 0x218a <KEYPAD_4x4_adjustKeyNumber+0x11e>
    20fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2100:	9c 81       	ldd	r25, Y+4	; 0x04
    2102:	8d 30       	cpi	r24, 0x0D	; 13
    2104:	91 05       	cpc	r25, r1
    2106:	5c f4       	brge	.+22     	; 0x211e <KEYPAD_4x4_adjustKeyNumber+0xb2>
    2108:	2b 81       	ldd	r18, Y+3	; 0x03
    210a:	3c 81       	ldd	r19, Y+4	; 0x04
    210c:	2a 30       	cpi	r18, 0x0A	; 10
    210e:	31 05       	cpc	r19, r1
    2110:	b1 f1       	breq	.+108    	; 0x217e <KEYPAD_4x4_adjustKeyNumber+0x112>
    2112:	8b 81       	ldd	r24, Y+3	; 0x03
    2114:	9c 81       	ldd	r25, Y+4	; 0x04
    2116:	8b 30       	cpi	r24, 0x0B	; 11
    2118:	91 05       	cpc	r25, r1
    211a:	a4 f5       	brge	.+104    	; 0x2184 <KEYPAD_4x4_adjustKeyNumber+0x118>
    211c:	2d c0       	rjmp	.+90     	; 0x2178 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    211e:	2b 81       	ldd	r18, Y+3	; 0x03
    2120:	3c 81       	ldd	r19, Y+4	; 0x04
    2122:	2e 30       	cpi	r18, 0x0E	; 14
    2124:	31 05       	cpc	r19, r1
    2126:	b9 f1       	breq	.+110    	; 0x2196 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    2128:	8b 81       	ldd	r24, Y+3	; 0x03
    212a:	9c 81       	ldd	r25, Y+4	; 0x04
    212c:	8e 30       	cpi	r24, 0x0E	; 14
    212e:	91 05       	cpc	r25, r1
    2130:	7c f1       	brlt	.+94     	; 0x2190 <KEYPAD_4x4_adjustKeyNumber+0x124>
    2132:	2b 81       	ldd	r18, Y+3	; 0x03
    2134:	3c 81       	ldd	r19, Y+4	; 0x04
    2136:	2f 30       	cpi	r18, 0x0F	; 15
    2138:	31 05       	cpc	r19, r1
    213a:	79 f1       	breq	.+94     	; 0x219a <KEYPAD_4x4_adjustKeyNumber+0x12e>
    213c:	8b 81       	ldd	r24, Y+3	; 0x03
    213e:	9c 81       	ldd	r25, Y+4	; 0x04
    2140:	80 31       	cpi	r24, 0x10	; 16
    2142:	91 05       	cpc	r25, r1
    2144:	69 f1       	breq	.+90     	; 0x21a0 <KEYPAD_4x4_adjustKeyNumber+0x134>
    2146:	2f c0       	rjmp	.+94     	; 0x21a6 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    2148:	87 e0       	ldi	r24, 0x07	; 7
    214a:	89 83       	std	Y+1, r24	; 0x01
    214c:	2e c0       	rjmp	.+92     	; 0x21aa <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    214e:	88 e0       	ldi	r24, 0x08	; 8
    2150:	89 83       	std	Y+1, r24	; 0x01
    2152:	2b c0       	rjmp	.+86     	; 0x21aa <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    2154:	89 e0       	ldi	r24, 0x09	; 9
    2156:	89 83       	std	Y+1, r24	; 0x01
    2158:	28 c0       	rjmp	.+80     	; 0x21aa <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    215a:	85 e2       	ldi	r24, 0x25	; 37
    215c:	89 83       	std	Y+1, r24	; 0x01
    215e:	25 c0       	rjmp	.+74     	; 0x21aa <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    2160:	84 e0       	ldi	r24, 0x04	; 4
    2162:	89 83       	std	Y+1, r24	; 0x01
    2164:	22 c0       	rjmp	.+68     	; 0x21aa <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    2166:	85 e0       	ldi	r24, 0x05	; 5
    2168:	89 83       	std	Y+1, r24	; 0x01
    216a:	1f c0       	rjmp	.+62     	; 0x21aa <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    216c:	86 e0       	ldi	r24, 0x06	; 6
    216e:	89 83       	std	Y+1, r24	; 0x01
    2170:	1c c0       	rjmp	.+56     	; 0x21aa <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    2172:	8a e2       	ldi	r24, 0x2A	; 42
    2174:	89 83       	std	Y+1, r24	; 0x01
    2176:	19 c0       	rjmp	.+50     	; 0x21aa <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 9: keypad_button = 1;
    2178:	81 e0       	ldi	r24, 0x01	; 1
    217a:	89 83       	std	Y+1, r24	; 0x01
    217c:	16 c0       	rjmp	.+44     	; 0x21aa <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    217e:	82 e0       	ldi	r24, 0x02	; 2
    2180:	89 83       	std	Y+1, r24	; 0x01
    2182:	13 c0       	rjmp	.+38     	; 0x21aa <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    2184:	83 e0       	ldi	r24, 0x03	; 3
    2186:	89 83       	std	Y+1, r24	; 0x01
    2188:	10 c0       	rjmp	.+32     	; 0x21aa <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    218a:	8d e2       	ldi	r24, 0x2D	; 45
    218c:	89 83       	std	Y+1, r24	; 0x01
    218e:	0d c0       	rjmp	.+26     	; 0x21aa <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    2190:	8d e0       	ldi	r24, 0x0D	; 13
    2192:	89 83       	std	Y+1, r24	; 0x01
    2194:	0a c0       	rjmp	.+20     	; 0x21aa <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 14: keypad_button = 0;
    2196:	19 82       	std	Y+1, r1	; 0x01
    2198:	08 c0       	rjmp	.+16     	; 0x21aa <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    219a:	8d e3       	ldi	r24, 0x3D	; 61
    219c:	89 83       	std	Y+1, r24	; 0x01
    219e:	05 c0       	rjmp	.+10     	; 0x21aa <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    21a0:	8b e2       	ldi	r24, 0x2B	; 43
    21a2:	89 83       	std	Y+1, r24	; 0x01
    21a4:	02 c0       	rjmp	.+4      	; 0x21aa <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    21a6:	8a 81       	ldd	r24, Y+2	; 0x02
    21a8:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    21aa:	89 81       	ldd	r24, Y+1	; 0x01
}
    21ac:	0f 90       	pop	r0
    21ae:	0f 90       	pop	r0
    21b0:	0f 90       	pop	r0
    21b2:	0f 90       	pop	r0
    21b4:	cf 91       	pop	r28
    21b6:	df 91       	pop	r29
    21b8:	08 95       	ret

000021ba <LCD_init>:
/*[FUNCTION NAME]	: LCD_init
 *[DESCRIPTION]		: Initialize the LCD
 *[ARGUMENTS]		: void
 *[RETURNS]			: void
 */
void LCD_init(void){
    21ba:	df 93       	push	r29
    21bc:	cf 93       	push	r28
    21be:	cd b7       	in	r28, 0x3d	; 61
    21c0:	de b7       	in	r29, 0x3e	; 62
    21c2:	2e 97       	sbiw	r28, 0x0e	; 14
    21c4:	0f b6       	in	r0, 0x3f	; 63
    21c6:	f8 94       	cli
    21c8:	de bf       	out	0x3e, r29	; 62
    21ca:	0f be       	out	0x3f, r0	; 63
    21cc:	cd bf       	out	0x3d, r28	; 61

	/*RS and enable is o/p */
	GPIO_setupPinDirection(LCD_RS_PORT_ID, LCD_RS_PIN_ID, PIN_OUTPUT);
    21ce:	80 e0       	ldi	r24, 0x00	; 0
    21d0:	60 e0       	ldi	r22, 0x00	; 0
    21d2:	41 e0       	ldi	r20, 0x01	; 1
    21d4:	0e 94 14 0c 	call	0x1828	; 0x1828 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID, LCD_E_PIN_ID, PIN_OUTPUT);
    21d8:	80 e0       	ldi	r24, 0x00	; 0
    21da:	61 e0       	ldi	r22, 0x01	; 1
    21dc:	41 e0       	ldi	r20, 0x01	; 1
    21de:	0e 94 14 0c 	call	0x1828	; 0x1828 <GPIO_setupPinDirection>
    21e2:	80 e0       	ldi	r24, 0x00	; 0
    21e4:	90 e0       	ldi	r25, 0x00	; 0
    21e6:	a0 ea       	ldi	r26, 0xA0	; 160
    21e8:	b1 e4       	ldi	r27, 0x41	; 65
    21ea:	8b 87       	std	Y+11, r24	; 0x0b
    21ec:	9c 87       	std	Y+12, r25	; 0x0c
    21ee:	ad 87       	std	Y+13, r26	; 0x0d
    21f0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21f2:	6b 85       	ldd	r22, Y+11	; 0x0b
    21f4:	7c 85       	ldd	r23, Y+12	; 0x0c
    21f6:	8d 85       	ldd	r24, Y+13	; 0x0d
    21f8:	9e 85       	ldd	r25, Y+14	; 0x0e
    21fa:	20 e0       	ldi	r18, 0x00	; 0
    21fc:	30 e0       	ldi	r19, 0x00	; 0
    21fe:	4a ef       	ldi	r20, 0xFA	; 250
    2200:	54 e4       	ldi	r21, 0x44	; 68
    2202:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2206:	dc 01       	movw	r26, r24
    2208:	cb 01       	movw	r24, r22
    220a:	8f 83       	std	Y+7, r24	; 0x07
    220c:	98 87       	std	Y+8, r25	; 0x08
    220e:	a9 87       	std	Y+9, r26	; 0x09
    2210:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2212:	6f 81       	ldd	r22, Y+7	; 0x07
    2214:	78 85       	ldd	r23, Y+8	; 0x08
    2216:	89 85       	ldd	r24, Y+9	; 0x09
    2218:	9a 85       	ldd	r25, Y+10	; 0x0a
    221a:	20 e0       	ldi	r18, 0x00	; 0
    221c:	30 e0       	ldi	r19, 0x00	; 0
    221e:	40 e8       	ldi	r20, 0x80	; 128
    2220:	5f e3       	ldi	r21, 0x3F	; 63
    2222:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2226:	88 23       	and	r24, r24
    2228:	2c f4       	brge	.+10     	; 0x2234 <LCD_init+0x7a>
		__ticks = 1;
    222a:	81 e0       	ldi	r24, 0x01	; 1
    222c:	90 e0       	ldi	r25, 0x00	; 0
    222e:	9e 83       	std	Y+6, r25	; 0x06
    2230:	8d 83       	std	Y+5, r24	; 0x05
    2232:	3f c0       	rjmp	.+126    	; 0x22b2 <LCD_init+0xf8>
	else if (__tmp > 65535)
    2234:	6f 81       	ldd	r22, Y+7	; 0x07
    2236:	78 85       	ldd	r23, Y+8	; 0x08
    2238:	89 85       	ldd	r24, Y+9	; 0x09
    223a:	9a 85       	ldd	r25, Y+10	; 0x0a
    223c:	20 e0       	ldi	r18, 0x00	; 0
    223e:	3f ef       	ldi	r19, 0xFF	; 255
    2240:	4f e7       	ldi	r20, 0x7F	; 127
    2242:	57 e4       	ldi	r21, 0x47	; 71
    2244:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2248:	18 16       	cp	r1, r24
    224a:	4c f5       	brge	.+82     	; 0x229e <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    224c:	6b 85       	ldd	r22, Y+11	; 0x0b
    224e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2250:	8d 85       	ldd	r24, Y+13	; 0x0d
    2252:	9e 85       	ldd	r25, Y+14	; 0x0e
    2254:	20 e0       	ldi	r18, 0x00	; 0
    2256:	30 e0       	ldi	r19, 0x00	; 0
    2258:	40 e2       	ldi	r20, 0x20	; 32
    225a:	51 e4       	ldi	r21, 0x41	; 65
    225c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2260:	dc 01       	movw	r26, r24
    2262:	cb 01       	movw	r24, r22
    2264:	bc 01       	movw	r22, r24
    2266:	cd 01       	movw	r24, r26
    2268:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    226c:	dc 01       	movw	r26, r24
    226e:	cb 01       	movw	r24, r22
    2270:	9e 83       	std	Y+6, r25	; 0x06
    2272:	8d 83       	std	Y+5, r24	; 0x05
    2274:	0f c0       	rjmp	.+30     	; 0x2294 <LCD_init+0xda>
    2276:	88 ec       	ldi	r24, 0xC8	; 200
    2278:	90 e0       	ldi	r25, 0x00	; 0
    227a:	9c 83       	std	Y+4, r25	; 0x04
    227c:	8b 83       	std	Y+3, r24	; 0x03
    227e:	8b 81       	ldd	r24, Y+3	; 0x03
    2280:	9c 81       	ldd	r25, Y+4	; 0x04
    2282:	01 97       	sbiw	r24, 0x01	; 1
    2284:	f1 f7       	brne	.-4      	; 0x2282 <LCD_init+0xc8>
    2286:	9c 83       	std	Y+4, r25	; 0x04
    2288:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    228a:	8d 81       	ldd	r24, Y+5	; 0x05
    228c:	9e 81       	ldd	r25, Y+6	; 0x06
    228e:	01 97       	sbiw	r24, 0x01	; 1
    2290:	9e 83       	std	Y+6, r25	; 0x06
    2292:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2294:	8d 81       	ldd	r24, Y+5	; 0x05
    2296:	9e 81       	ldd	r25, Y+6	; 0x06
    2298:	00 97       	sbiw	r24, 0x00	; 0
    229a:	69 f7       	brne	.-38     	; 0x2276 <LCD_init+0xbc>
    229c:	14 c0       	rjmp	.+40     	; 0x22c6 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    229e:	6f 81       	ldd	r22, Y+7	; 0x07
    22a0:	78 85       	ldd	r23, Y+8	; 0x08
    22a2:	89 85       	ldd	r24, Y+9	; 0x09
    22a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    22a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22aa:	dc 01       	movw	r26, r24
    22ac:	cb 01       	movw	r24, r22
    22ae:	9e 83       	std	Y+6, r25	; 0x06
    22b0:	8d 83       	std	Y+5, r24	; 0x05
    22b2:	8d 81       	ldd	r24, Y+5	; 0x05
    22b4:	9e 81       	ldd	r25, Y+6	; 0x06
    22b6:	9a 83       	std	Y+2, r25	; 0x02
    22b8:	89 83       	std	Y+1, r24	; 0x01
    22ba:	89 81       	ldd	r24, Y+1	; 0x01
    22bc:	9a 81       	ldd	r25, Y+2	; 0x02
    22be:	01 97       	sbiw	r24, 0x01	; 1
    22c0:	f1 f7       	brne	.-4      	; 0x22be <LCD_init+0x104>
    22c2:	9a 83       	std	Y+2, r25	; 0x02
    22c4:	89 83       	std	Y+1, r24	; 0x01
	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif (LCD_DATA_BITS_MODE == 8)
	/*set data port direction o/p*/
	GPIO_setupPortDirection(LCD_DATA_PORT_ID, PORT_OUTPUT);
    22c6:	82 e0       	ldi	r24, 0x02	; 2
    22c8:	6f ef       	ldi	r22, 0xFF	; 255
    22ca:	0e 94 85 0e 	call	0x1d0a	; 0x1d0a <GPIO_setupPortDirection>

	/*2 lines and 8 bit*/
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    22ce:	88 e3       	ldi	r24, 0x38	; 56
    22d0:	0e 94 79 11 	call	0x22f2	; 0x22f2 <LCD_sendCommand>
#endif

	/*cursor off*/
	LCD_sendCommand(LCD_CURSOR_OFF);
    22d4:	8c e0       	ldi	r24, 0x0C	; 12
    22d6:	0e 94 79 11 	call	0x22f2	; 0x22f2 <LCD_sendCommand>

	/*clear screen*/
	LCD_sendCommand(LCD_CLEAR_COMMAND);
    22da:	81 e0       	ldi	r24, 0x01	; 1
    22dc:	0e 94 79 11 	call	0x22f2	; 0x22f2 <LCD_sendCommand>

}
    22e0:	2e 96       	adiw	r28, 0x0e	; 14
    22e2:	0f b6       	in	r0, 0x3f	; 63
    22e4:	f8 94       	cli
    22e6:	de bf       	out	0x3e, r29	; 62
    22e8:	0f be       	out	0x3f, r0	; 63
    22ea:	cd bf       	out	0x3d, r28	; 61
    22ec:	cf 91       	pop	r28
    22ee:	df 91       	pop	r29
    22f0:	08 95       	ret

000022f2 <LCD_sendCommand>:
/*[FUNCTION NAME]	: LCD_sendCommand
 *[DESCRIPTION]		: Send the required command to the screen
 *[ARGUMENTS]		: uint8 command
 *[RETURNS]			: void
 */
void LCD_sendCommand(uint8 command){
    22f2:	df 93       	push	r29
    22f4:	cf 93       	push	r28
    22f6:	cd b7       	in	r28, 0x3d	; 61
    22f8:	de b7       	in	r29, 0x3e	; 62
    22fa:	e9 97       	sbiw	r28, 0x39	; 57
    22fc:	0f b6       	in	r0, 0x3f	; 63
    22fe:	f8 94       	cli
    2300:	de bf       	out	0x3e, r29	; 62
    2302:	0f be       	out	0x3f, r0	; 63
    2304:	cd bf       	out	0x3d, r28	; 61
    2306:	89 af       	std	Y+57, r24	; 0x39

	/* RS = 0 */
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW);
    2308:	80 e0       	ldi	r24, 0x00	; 0
    230a:	60 e0       	ldi	r22, 0x00	; 0
    230c:	40 e0       	ldi	r20, 0x00	; 0
    230e:	0e 94 ff 0c 	call	0x19fe	; 0x19fe <GPIO_writePin>
    2312:	80 e0       	ldi	r24, 0x00	; 0
    2314:	90 e0       	ldi	r25, 0x00	; 0
    2316:	a0 e8       	ldi	r26, 0x80	; 128
    2318:	bf e3       	ldi	r27, 0x3F	; 63
    231a:	8d ab       	std	Y+53, r24	; 0x35
    231c:	9e ab       	std	Y+54, r25	; 0x36
    231e:	af ab       	std	Y+55, r26	; 0x37
    2320:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2322:	6d a9       	ldd	r22, Y+53	; 0x35
    2324:	7e a9       	ldd	r23, Y+54	; 0x36
    2326:	8f a9       	ldd	r24, Y+55	; 0x37
    2328:	98 ad       	ldd	r25, Y+56	; 0x38
    232a:	20 e0       	ldi	r18, 0x00	; 0
    232c:	30 e0       	ldi	r19, 0x00	; 0
    232e:	4a ef       	ldi	r20, 0xFA	; 250
    2330:	54 e4       	ldi	r21, 0x44	; 68
    2332:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2336:	dc 01       	movw	r26, r24
    2338:	cb 01       	movw	r24, r22
    233a:	89 ab       	std	Y+49, r24	; 0x31
    233c:	9a ab       	std	Y+50, r25	; 0x32
    233e:	ab ab       	std	Y+51, r26	; 0x33
    2340:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2342:	69 a9       	ldd	r22, Y+49	; 0x31
    2344:	7a a9       	ldd	r23, Y+50	; 0x32
    2346:	8b a9       	ldd	r24, Y+51	; 0x33
    2348:	9c a9       	ldd	r25, Y+52	; 0x34
    234a:	20 e0       	ldi	r18, 0x00	; 0
    234c:	30 e0       	ldi	r19, 0x00	; 0
    234e:	40 e8       	ldi	r20, 0x80	; 128
    2350:	5f e3       	ldi	r21, 0x3F	; 63
    2352:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2356:	88 23       	and	r24, r24
    2358:	2c f4       	brge	.+10     	; 0x2364 <LCD_sendCommand+0x72>
		__ticks = 1;
    235a:	81 e0       	ldi	r24, 0x01	; 1
    235c:	90 e0       	ldi	r25, 0x00	; 0
    235e:	98 ab       	std	Y+48, r25	; 0x30
    2360:	8f a7       	std	Y+47, r24	; 0x2f
    2362:	3f c0       	rjmp	.+126    	; 0x23e2 <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    2364:	69 a9       	ldd	r22, Y+49	; 0x31
    2366:	7a a9       	ldd	r23, Y+50	; 0x32
    2368:	8b a9       	ldd	r24, Y+51	; 0x33
    236a:	9c a9       	ldd	r25, Y+52	; 0x34
    236c:	20 e0       	ldi	r18, 0x00	; 0
    236e:	3f ef       	ldi	r19, 0xFF	; 255
    2370:	4f e7       	ldi	r20, 0x7F	; 127
    2372:	57 e4       	ldi	r21, 0x47	; 71
    2374:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2378:	18 16       	cp	r1, r24
    237a:	4c f5       	brge	.+82     	; 0x23ce <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    237c:	6d a9       	ldd	r22, Y+53	; 0x35
    237e:	7e a9       	ldd	r23, Y+54	; 0x36
    2380:	8f a9       	ldd	r24, Y+55	; 0x37
    2382:	98 ad       	ldd	r25, Y+56	; 0x38
    2384:	20 e0       	ldi	r18, 0x00	; 0
    2386:	30 e0       	ldi	r19, 0x00	; 0
    2388:	40 e2       	ldi	r20, 0x20	; 32
    238a:	51 e4       	ldi	r21, 0x41	; 65
    238c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2390:	dc 01       	movw	r26, r24
    2392:	cb 01       	movw	r24, r22
    2394:	bc 01       	movw	r22, r24
    2396:	cd 01       	movw	r24, r26
    2398:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    239c:	dc 01       	movw	r26, r24
    239e:	cb 01       	movw	r24, r22
    23a0:	98 ab       	std	Y+48, r25	; 0x30
    23a2:	8f a7       	std	Y+47, r24	; 0x2f
    23a4:	0f c0       	rjmp	.+30     	; 0x23c4 <LCD_sendCommand+0xd2>
    23a6:	88 ec       	ldi	r24, 0xC8	; 200
    23a8:	90 e0       	ldi	r25, 0x00	; 0
    23aa:	9e a7       	std	Y+46, r25	; 0x2e
    23ac:	8d a7       	std	Y+45, r24	; 0x2d
    23ae:	8d a5       	ldd	r24, Y+45	; 0x2d
    23b0:	9e a5       	ldd	r25, Y+46	; 0x2e
    23b2:	01 97       	sbiw	r24, 0x01	; 1
    23b4:	f1 f7       	brne	.-4      	; 0x23b2 <LCD_sendCommand+0xc0>
    23b6:	9e a7       	std	Y+46, r25	; 0x2e
    23b8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23ba:	8f a5       	ldd	r24, Y+47	; 0x2f
    23bc:	98 a9       	ldd	r25, Y+48	; 0x30
    23be:	01 97       	sbiw	r24, 0x01	; 1
    23c0:	98 ab       	std	Y+48, r25	; 0x30
    23c2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23c4:	8f a5       	ldd	r24, Y+47	; 0x2f
    23c6:	98 a9       	ldd	r25, Y+48	; 0x30
    23c8:	00 97       	sbiw	r24, 0x00	; 0
    23ca:	69 f7       	brne	.-38     	; 0x23a6 <LCD_sendCommand+0xb4>
    23cc:	14 c0       	rjmp	.+40     	; 0x23f6 <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23ce:	69 a9       	ldd	r22, Y+49	; 0x31
    23d0:	7a a9       	ldd	r23, Y+50	; 0x32
    23d2:	8b a9       	ldd	r24, Y+51	; 0x33
    23d4:	9c a9       	ldd	r25, Y+52	; 0x34
    23d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23da:	dc 01       	movw	r26, r24
    23dc:	cb 01       	movw	r24, r22
    23de:	98 ab       	std	Y+48, r25	; 0x30
    23e0:	8f a7       	std	Y+47, r24	; 0x2f
    23e2:	8f a5       	ldd	r24, Y+47	; 0x2f
    23e4:	98 a9       	ldd	r25, Y+48	; 0x30
    23e6:	9c a7       	std	Y+44, r25	; 0x2c
    23e8:	8b a7       	std	Y+43, r24	; 0x2b
    23ea:	8b a5       	ldd	r24, Y+43	; 0x2b
    23ec:	9c a5       	ldd	r25, Y+44	; 0x2c
    23ee:	01 97       	sbiw	r24, 0x01	; 1
    23f0:	f1 f7       	brne	.-4      	; 0x23ee <LCD_sendCommand+0xfc>
    23f2:	9c a7       	std	Y+44, r25	; 0x2c
    23f4:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);

	/* Enable = 1 */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH);
    23f6:	80 e0       	ldi	r24, 0x00	; 0
    23f8:	61 e0       	ldi	r22, 0x01	; 1
    23fa:	41 e0       	ldi	r20, 0x01	; 1
    23fc:	0e 94 ff 0c 	call	0x19fe	; 0x19fe <GPIO_writePin>
    2400:	80 e0       	ldi	r24, 0x00	; 0
    2402:	90 e0       	ldi	r25, 0x00	; 0
    2404:	a0 e8       	ldi	r26, 0x80	; 128
    2406:	bf e3       	ldi	r27, 0x3F	; 63
    2408:	8f a3       	std	Y+39, r24	; 0x27
    240a:	98 a7       	std	Y+40, r25	; 0x28
    240c:	a9 a7       	std	Y+41, r26	; 0x29
    240e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2410:	6f a1       	ldd	r22, Y+39	; 0x27
    2412:	78 a5       	ldd	r23, Y+40	; 0x28
    2414:	89 a5       	ldd	r24, Y+41	; 0x29
    2416:	9a a5       	ldd	r25, Y+42	; 0x2a
    2418:	20 e0       	ldi	r18, 0x00	; 0
    241a:	30 e0       	ldi	r19, 0x00	; 0
    241c:	4a ef       	ldi	r20, 0xFA	; 250
    241e:	54 e4       	ldi	r21, 0x44	; 68
    2420:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2424:	dc 01       	movw	r26, r24
    2426:	cb 01       	movw	r24, r22
    2428:	8b a3       	std	Y+35, r24	; 0x23
    242a:	9c a3       	std	Y+36, r25	; 0x24
    242c:	ad a3       	std	Y+37, r26	; 0x25
    242e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2430:	6b a1       	ldd	r22, Y+35	; 0x23
    2432:	7c a1       	ldd	r23, Y+36	; 0x24
    2434:	8d a1       	ldd	r24, Y+37	; 0x25
    2436:	9e a1       	ldd	r25, Y+38	; 0x26
    2438:	20 e0       	ldi	r18, 0x00	; 0
    243a:	30 e0       	ldi	r19, 0x00	; 0
    243c:	40 e8       	ldi	r20, 0x80	; 128
    243e:	5f e3       	ldi	r21, 0x3F	; 63
    2440:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2444:	88 23       	and	r24, r24
    2446:	2c f4       	brge	.+10     	; 0x2452 <LCD_sendCommand+0x160>
		__ticks = 1;
    2448:	81 e0       	ldi	r24, 0x01	; 1
    244a:	90 e0       	ldi	r25, 0x00	; 0
    244c:	9a a3       	std	Y+34, r25	; 0x22
    244e:	89 a3       	std	Y+33, r24	; 0x21
    2450:	3f c0       	rjmp	.+126    	; 0x24d0 <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    2452:	6b a1       	ldd	r22, Y+35	; 0x23
    2454:	7c a1       	ldd	r23, Y+36	; 0x24
    2456:	8d a1       	ldd	r24, Y+37	; 0x25
    2458:	9e a1       	ldd	r25, Y+38	; 0x26
    245a:	20 e0       	ldi	r18, 0x00	; 0
    245c:	3f ef       	ldi	r19, 0xFF	; 255
    245e:	4f e7       	ldi	r20, 0x7F	; 127
    2460:	57 e4       	ldi	r21, 0x47	; 71
    2462:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2466:	18 16       	cp	r1, r24
    2468:	4c f5       	brge	.+82     	; 0x24bc <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    246a:	6f a1       	ldd	r22, Y+39	; 0x27
    246c:	78 a5       	ldd	r23, Y+40	; 0x28
    246e:	89 a5       	ldd	r24, Y+41	; 0x29
    2470:	9a a5       	ldd	r25, Y+42	; 0x2a
    2472:	20 e0       	ldi	r18, 0x00	; 0
    2474:	30 e0       	ldi	r19, 0x00	; 0
    2476:	40 e2       	ldi	r20, 0x20	; 32
    2478:	51 e4       	ldi	r21, 0x41	; 65
    247a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    247e:	dc 01       	movw	r26, r24
    2480:	cb 01       	movw	r24, r22
    2482:	bc 01       	movw	r22, r24
    2484:	cd 01       	movw	r24, r26
    2486:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    248a:	dc 01       	movw	r26, r24
    248c:	cb 01       	movw	r24, r22
    248e:	9a a3       	std	Y+34, r25	; 0x22
    2490:	89 a3       	std	Y+33, r24	; 0x21
    2492:	0f c0       	rjmp	.+30     	; 0x24b2 <LCD_sendCommand+0x1c0>
    2494:	88 ec       	ldi	r24, 0xC8	; 200
    2496:	90 e0       	ldi	r25, 0x00	; 0
    2498:	98 a3       	std	Y+32, r25	; 0x20
    249a:	8f 8f       	std	Y+31, r24	; 0x1f
    249c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    249e:	98 a1       	ldd	r25, Y+32	; 0x20
    24a0:	01 97       	sbiw	r24, 0x01	; 1
    24a2:	f1 f7       	brne	.-4      	; 0x24a0 <LCD_sendCommand+0x1ae>
    24a4:	98 a3       	std	Y+32, r25	; 0x20
    24a6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24a8:	89 a1       	ldd	r24, Y+33	; 0x21
    24aa:	9a a1       	ldd	r25, Y+34	; 0x22
    24ac:	01 97       	sbiw	r24, 0x01	; 1
    24ae:	9a a3       	std	Y+34, r25	; 0x22
    24b0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24b2:	89 a1       	ldd	r24, Y+33	; 0x21
    24b4:	9a a1       	ldd	r25, Y+34	; 0x22
    24b6:	00 97       	sbiw	r24, 0x00	; 0
    24b8:	69 f7       	brne	.-38     	; 0x2494 <LCD_sendCommand+0x1a2>
    24ba:	14 c0       	rjmp	.+40     	; 0x24e4 <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24bc:	6b a1       	ldd	r22, Y+35	; 0x23
    24be:	7c a1       	ldd	r23, Y+36	; 0x24
    24c0:	8d a1       	ldd	r24, Y+37	; 0x25
    24c2:	9e a1       	ldd	r25, Y+38	; 0x26
    24c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24c8:	dc 01       	movw	r26, r24
    24ca:	cb 01       	movw	r24, r22
    24cc:	9a a3       	std	Y+34, r25	; 0x22
    24ce:	89 a3       	std	Y+33, r24	; 0x21
    24d0:	89 a1       	ldd	r24, Y+33	; 0x21
    24d2:	9a a1       	ldd	r25, Y+34	; 0x22
    24d4:	9e 8f       	std	Y+30, r25	; 0x1e
    24d6:	8d 8f       	std	Y+29, r24	; 0x1d
    24d8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    24da:	9e 8d       	ldd	r25, Y+30	; 0x1e
    24dc:	01 97       	sbiw	r24, 0x01	; 1
    24de:	f1 f7       	brne	.-4      	; 0x24dc <LCD_sendCommand+0x1ea>
    24e0:	9e 8f       	std	Y+30, r25	; 0x1e
    24e2:	8d 8f       	std	Y+29, r24	; 0x1d
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif (LCD_DATA_BITS_MODE == 8)
	/* send command */
	GPIO_writePort(LCD_DATA_PORT_ID, command);
    24e4:	82 e0       	ldi	r24, 0x02	; 2
    24e6:	69 ad       	ldd	r22, Y+57	; 0x39
    24e8:	0e 94 c9 0e 	call	0x1d92	; 0x1d92 <GPIO_writePort>
    24ec:	80 e0       	ldi	r24, 0x00	; 0
    24ee:	90 e0       	ldi	r25, 0x00	; 0
    24f0:	a0 e8       	ldi	r26, 0x80	; 128
    24f2:	bf e3       	ldi	r27, 0x3F	; 63
    24f4:	89 8f       	std	Y+25, r24	; 0x19
    24f6:	9a 8f       	std	Y+26, r25	; 0x1a
    24f8:	ab 8f       	std	Y+27, r26	; 0x1b
    24fa:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24fc:	69 8d       	ldd	r22, Y+25	; 0x19
    24fe:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2500:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2502:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2504:	20 e0       	ldi	r18, 0x00	; 0
    2506:	30 e0       	ldi	r19, 0x00	; 0
    2508:	4a ef       	ldi	r20, 0xFA	; 250
    250a:	54 e4       	ldi	r21, 0x44	; 68
    250c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2510:	dc 01       	movw	r26, r24
    2512:	cb 01       	movw	r24, r22
    2514:	8d 8b       	std	Y+21, r24	; 0x15
    2516:	9e 8b       	std	Y+22, r25	; 0x16
    2518:	af 8b       	std	Y+23, r26	; 0x17
    251a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    251c:	6d 89       	ldd	r22, Y+21	; 0x15
    251e:	7e 89       	ldd	r23, Y+22	; 0x16
    2520:	8f 89       	ldd	r24, Y+23	; 0x17
    2522:	98 8d       	ldd	r25, Y+24	; 0x18
    2524:	20 e0       	ldi	r18, 0x00	; 0
    2526:	30 e0       	ldi	r19, 0x00	; 0
    2528:	40 e8       	ldi	r20, 0x80	; 128
    252a:	5f e3       	ldi	r21, 0x3F	; 63
    252c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2530:	88 23       	and	r24, r24
    2532:	2c f4       	brge	.+10     	; 0x253e <LCD_sendCommand+0x24c>
		__ticks = 1;
    2534:	81 e0       	ldi	r24, 0x01	; 1
    2536:	90 e0       	ldi	r25, 0x00	; 0
    2538:	9c 8b       	std	Y+20, r25	; 0x14
    253a:	8b 8b       	std	Y+19, r24	; 0x13
    253c:	3f c0       	rjmp	.+126    	; 0x25bc <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    253e:	6d 89       	ldd	r22, Y+21	; 0x15
    2540:	7e 89       	ldd	r23, Y+22	; 0x16
    2542:	8f 89       	ldd	r24, Y+23	; 0x17
    2544:	98 8d       	ldd	r25, Y+24	; 0x18
    2546:	20 e0       	ldi	r18, 0x00	; 0
    2548:	3f ef       	ldi	r19, 0xFF	; 255
    254a:	4f e7       	ldi	r20, 0x7F	; 127
    254c:	57 e4       	ldi	r21, 0x47	; 71
    254e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2552:	18 16       	cp	r1, r24
    2554:	4c f5       	brge	.+82     	; 0x25a8 <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2556:	69 8d       	ldd	r22, Y+25	; 0x19
    2558:	7a 8d       	ldd	r23, Y+26	; 0x1a
    255a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    255c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    255e:	20 e0       	ldi	r18, 0x00	; 0
    2560:	30 e0       	ldi	r19, 0x00	; 0
    2562:	40 e2       	ldi	r20, 0x20	; 32
    2564:	51 e4       	ldi	r21, 0x41	; 65
    2566:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    256a:	dc 01       	movw	r26, r24
    256c:	cb 01       	movw	r24, r22
    256e:	bc 01       	movw	r22, r24
    2570:	cd 01       	movw	r24, r26
    2572:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2576:	dc 01       	movw	r26, r24
    2578:	cb 01       	movw	r24, r22
    257a:	9c 8b       	std	Y+20, r25	; 0x14
    257c:	8b 8b       	std	Y+19, r24	; 0x13
    257e:	0f c0       	rjmp	.+30     	; 0x259e <LCD_sendCommand+0x2ac>
    2580:	88 ec       	ldi	r24, 0xC8	; 200
    2582:	90 e0       	ldi	r25, 0x00	; 0
    2584:	9a 8b       	std	Y+18, r25	; 0x12
    2586:	89 8b       	std	Y+17, r24	; 0x11
    2588:	89 89       	ldd	r24, Y+17	; 0x11
    258a:	9a 89       	ldd	r25, Y+18	; 0x12
    258c:	01 97       	sbiw	r24, 0x01	; 1
    258e:	f1 f7       	brne	.-4      	; 0x258c <LCD_sendCommand+0x29a>
    2590:	9a 8b       	std	Y+18, r25	; 0x12
    2592:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2594:	8b 89       	ldd	r24, Y+19	; 0x13
    2596:	9c 89       	ldd	r25, Y+20	; 0x14
    2598:	01 97       	sbiw	r24, 0x01	; 1
    259a:	9c 8b       	std	Y+20, r25	; 0x14
    259c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    259e:	8b 89       	ldd	r24, Y+19	; 0x13
    25a0:	9c 89       	ldd	r25, Y+20	; 0x14
    25a2:	00 97       	sbiw	r24, 0x00	; 0
    25a4:	69 f7       	brne	.-38     	; 0x2580 <LCD_sendCommand+0x28e>
    25a6:	14 c0       	rjmp	.+40     	; 0x25d0 <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25a8:	6d 89       	ldd	r22, Y+21	; 0x15
    25aa:	7e 89       	ldd	r23, Y+22	; 0x16
    25ac:	8f 89       	ldd	r24, Y+23	; 0x17
    25ae:	98 8d       	ldd	r25, Y+24	; 0x18
    25b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25b4:	dc 01       	movw	r26, r24
    25b6:	cb 01       	movw	r24, r22
    25b8:	9c 8b       	std	Y+20, r25	; 0x14
    25ba:	8b 8b       	std	Y+19, r24	; 0x13
    25bc:	8b 89       	ldd	r24, Y+19	; 0x13
    25be:	9c 89       	ldd	r25, Y+20	; 0x14
    25c0:	98 8b       	std	Y+16, r25	; 0x10
    25c2:	8f 87       	std	Y+15, r24	; 0x0f
    25c4:	8f 85       	ldd	r24, Y+15	; 0x0f
    25c6:	98 89       	ldd	r25, Y+16	; 0x10
    25c8:	01 97       	sbiw	r24, 0x01	; 1
    25ca:	f1 f7       	brne	.-4      	; 0x25c8 <LCD_sendCommand+0x2d6>
    25cc:	98 8b       	std	Y+16, r25	; 0x10
    25ce:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);

	/* Enable = 0 */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW);
    25d0:	80 e0       	ldi	r24, 0x00	; 0
    25d2:	61 e0       	ldi	r22, 0x01	; 1
    25d4:	40 e0       	ldi	r20, 0x00	; 0
    25d6:	0e 94 ff 0c 	call	0x19fe	; 0x19fe <GPIO_writePin>
    25da:	80 e0       	ldi	r24, 0x00	; 0
    25dc:	90 e0       	ldi	r25, 0x00	; 0
    25de:	a0 e8       	ldi	r26, 0x80	; 128
    25e0:	bf e3       	ldi	r27, 0x3F	; 63
    25e2:	8b 87       	std	Y+11, r24	; 0x0b
    25e4:	9c 87       	std	Y+12, r25	; 0x0c
    25e6:	ad 87       	std	Y+13, r26	; 0x0d
    25e8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25ea:	6b 85       	ldd	r22, Y+11	; 0x0b
    25ec:	7c 85       	ldd	r23, Y+12	; 0x0c
    25ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    25f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    25f2:	20 e0       	ldi	r18, 0x00	; 0
    25f4:	30 e0       	ldi	r19, 0x00	; 0
    25f6:	4a ef       	ldi	r20, 0xFA	; 250
    25f8:	54 e4       	ldi	r21, 0x44	; 68
    25fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25fe:	dc 01       	movw	r26, r24
    2600:	cb 01       	movw	r24, r22
    2602:	8f 83       	std	Y+7, r24	; 0x07
    2604:	98 87       	std	Y+8, r25	; 0x08
    2606:	a9 87       	std	Y+9, r26	; 0x09
    2608:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    260a:	6f 81       	ldd	r22, Y+7	; 0x07
    260c:	78 85       	ldd	r23, Y+8	; 0x08
    260e:	89 85       	ldd	r24, Y+9	; 0x09
    2610:	9a 85       	ldd	r25, Y+10	; 0x0a
    2612:	20 e0       	ldi	r18, 0x00	; 0
    2614:	30 e0       	ldi	r19, 0x00	; 0
    2616:	40 e8       	ldi	r20, 0x80	; 128
    2618:	5f e3       	ldi	r21, 0x3F	; 63
    261a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    261e:	88 23       	and	r24, r24
    2620:	2c f4       	brge	.+10     	; 0x262c <LCD_sendCommand+0x33a>
		__ticks = 1;
    2622:	81 e0       	ldi	r24, 0x01	; 1
    2624:	90 e0       	ldi	r25, 0x00	; 0
    2626:	9e 83       	std	Y+6, r25	; 0x06
    2628:	8d 83       	std	Y+5, r24	; 0x05
    262a:	3f c0       	rjmp	.+126    	; 0x26aa <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    262c:	6f 81       	ldd	r22, Y+7	; 0x07
    262e:	78 85       	ldd	r23, Y+8	; 0x08
    2630:	89 85       	ldd	r24, Y+9	; 0x09
    2632:	9a 85       	ldd	r25, Y+10	; 0x0a
    2634:	20 e0       	ldi	r18, 0x00	; 0
    2636:	3f ef       	ldi	r19, 0xFF	; 255
    2638:	4f e7       	ldi	r20, 0x7F	; 127
    263a:	57 e4       	ldi	r21, 0x47	; 71
    263c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2640:	18 16       	cp	r1, r24
    2642:	4c f5       	brge	.+82     	; 0x2696 <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2644:	6b 85       	ldd	r22, Y+11	; 0x0b
    2646:	7c 85       	ldd	r23, Y+12	; 0x0c
    2648:	8d 85       	ldd	r24, Y+13	; 0x0d
    264a:	9e 85       	ldd	r25, Y+14	; 0x0e
    264c:	20 e0       	ldi	r18, 0x00	; 0
    264e:	30 e0       	ldi	r19, 0x00	; 0
    2650:	40 e2       	ldi	r20, 0x20	; 32
    2652:	51 e4       	ldi	r21, 0x41	; 65
    2654:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2658:	dc 01       	movw	r26, r24
    265a:	cb 01       	movw	r24, r22
    265c:	bc 01       	movw	r22, r24
    265e:	cd 01       	movw	r24, r26
    2660:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2664:	dc 01       	movw	r26, r24
    2666:	cb 01       	movw	r24, r22
    2668:	9e 83       	std	Y+6, r25	; 0x06
    266a:	8d 83       	std	Y+5, r24	; 0x05
    266c:	0f c0       	rjmp	.+30     	; 0x268c <LCD_sendCommand+0x39a>
    266e:	88 ec       	ldi	r24, 0xC8	; 200
    2670:	90 e0       	ldi	r25, 0x00	; 0
    2672:	9c 83       	std	Y+4, r25	; 0x04
    2674:	8b 83       	std	Y+3, r24	; 0x03
    2676:	8b 81       	ldd	r24, Y+3	; 0x03
    2678:	9c 81       	ldd	r25, Y+4	; 0x04
    267a:	01 97       	sbiw	r24, 0x01	; 1
    267c:	f1 f7       	brne	.-4      	; 0x267a <LCD_sendCommand+0x388>
    267e:	9c 83       	std	Y+4, r25	; 0x04
    2680:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2682:	8d 81       	ldd	r24, Y+5	; 0x05
    2684:	9e 81       	ldd	r25, Y+6	; 0x06
    2686:	01 97       	sbiw	r24, 0x01	; 1
    2688:	9e 83       	std	Y+6, r25	; 0x06
    268a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    268c:	8d 81       	ldd	r24, Y+5	; 0x05
    268e:	9e 81       	ldd	r25, Y+6	; 0x06
    2690:	00 97       	sbiw	r24, 0x00	; 0
    2692:	69 f7       	brne	.-38     	; 0x266e <LCD_sendCommand+0x37c>
    2694:	14 c0       	rjmp	.+40     	; 0x26be <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2696:	6f 81       	ldd	r22, Y+7	; 0x07
    2698:	78 85       	ldd	r23, Y+8	; 0x08
    269a:	89 85       	ldd	r24, Y+9	; 0x09
    269c:	9a 85       	ldd	r25, Y+10	; 0x0a
    269e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26a2:	dc 01       	movw	r26, r24
    26a4:	cb 01       	movw	r24, r22
    26a6:	9e 83       	std	Y+6, r25	; 0x06
    26a8:	8d 83       	std	Y+5, r24	; 0x05
    26aa:	8d 81       	ldd	r24, Y+5	; 0x05
    26ac:	9e 81       	ldd	r25, Y+6	; 0x06
    26ae:	9a 83       	std	Y+2, r25	; 0x02
    26b0:	89 83       	std	Y+1, r24	; 0x01
    26b2:	89 81       	ldd	r24, Y+1	; 0x01
    26b4:	9a 81       	ldd	r25, Y+2	; 0x02
    26b6:	01 97       	sbiw	r24, 0x01	; 1
    26b8:	f1 f7       	brne	.-4      	; 0x26b6 <LCD_sendCommand+0x3c4>
    26ba:	9a 83       	std	Y+2, r25	; 0x02
    26bc:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
#endif

}
    26be:	e9 96       	adiw	r28, 0x39	; 57
    26c0:	0f b6       	in	r0, 0x3f	; 63
    26c2:	f8 94       	cli
    26c4:	de bf       	out	0x3e, r29	; 62
    26c6:	0f be       	out	0x3f, r0	; 63
    26c8:	cd bf       	out	0x3d, r28	; 61
    26ca:	cf 91       	pop	r28
    26cc:	df 91       	pop	r29
    26ce:	08 95       	ret

000026d0 <LCD_displayCharacter>:
/*[FUNCTION NAME]	: LCD_displayCharacter
 *[DESCRIPTION]		: Display the required character on the screen
 *[ARGUMENTS]		: uint8 Data
 *[RETURNS]			: void
 */
void LCD_displayCharacter(uint8 data){
    26d0:	df 93       	push	r29
    26d2:	cf 93       	push	r28
    26d4:	cd b7       	in	r28, 0x3d	; 61
    26d6:	de b7       	in	r29, 0x3e	; 62
    26d8:	e9 97       	sbiw	r28, 0x39	; 57
    26da:	0f b6       	in	r0, 0x3f	; 63
    26dc:	f8 94       	cli
    26de:	de bf       	out	0x3e, r29	; 62
    26e0:	0f be       	out	0x3f, r0	; 63
    26e2:	cd bf       	out	0x3d, r28	; 61
    26e4:	89 af       	std	Y+57, r24	; 0x39
	/* RS = 0 */
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH);
    26e6:	80 e0       	ldi	r24, 0x00	; 0
    26e8:	60 e0       	ldi	r22, 0x00	; 0
    26ea:	41 e0       	ldi	r20, 0x01	; 1
    26ec:	0e 94 ff 0c 	call	0x19fe	; 0x19fe <GPIO_writePin>
    26f0:	80 e0       	ldi	r24, 0x00	; 0
    26f2:	90 e0       	ldi	r25, 0x00	; 0
    26f4:	a0 e8       	ldi	r26, 0x80	; 128
    26f6:	bf e3       	ldi	r27, 0x3F	; 63
    26f8:	8d ab       	std	Y+53, r24	; 0x35
    26fa:	9e ab       	std	Y+54, r25	; 0x36
    26fc:	af ab       	std	Y+55, r26	; 0x37
    26fe:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2700:	6d a9       	ldd	r22, Y+53	; 0x35
    2702:	7e a9       	ldd	r23, Y+54	; 0x36
    2704:	8f a9       	ldd	r24, Y+55	; 0x37
    2706:	98 ad       	ldd	r25, Y+56	; 0x38
    2708:	20 e0       	ldi	r18, 0x00	; 0
    270a:	30 e0       	ldi	r19, 0x00	; 0
    270c:	4a ef       	ldi	r20, 0xFA	; 250
    270e:	54 e4       	ldi	r21, 0x44	; 68
    2710:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2714:	dc 01       	movw	r26, r24
    2716:	cb 01       	movw	r24, r22
    2718:	89 ab       	std	Y+49, r24	; 0x31
    271a:	9a ab       	std	Y+50, r25	; 0x32
    271c:	ab ab       	std	Y+51, r26	; 0x33
    271e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2720:	69 a9       	ldd	r22, Y+49	; 0x31
    2722:	7a a9       	ldd	r23, Y+50	; 0x32
    2724:	8b a9       	ldd	r24, Y+51	; 0x33
    2726:	9c a9       	ldd	r25, Y+52	; 0x34
    2728:	20 e0       	ldi	r18, 0x00	; 0
    272a:	30 e0       	ldi	r19, 0x00	; 0
    272c:	40 e8       	ldi	r20, 0x80	; 128
    272e:	5f e3       	ldi	r21, 0x3F	; 63
    2730:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2734:	88 23       	and	r24, r24
    2736:	2c f4       	brge	.+10     	; 0x2742 <LCD_displayCharacter+0x72>
		__ticks = 1;
    2738:	81 e0       	ldi	r24, 0x01	; 1
    273a:	90 e0       	ldi	r25, 0x00	; 0
    273c:	98 ab       	std	Y+48, r25	; 0x30
    273e:	8f a7       	std	Y+47, r24	; 0x2f
    2740:	3f c0       	rjmp	.+126    	; 0x27c0 <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    2742:	69 a9       	ldd	r22, Y+49	; 0x31
    2744:	7a a9       	ldd	r23, Y+50	; 0x32
    2746:	8b a9       	ldd	r24, Y+51	; 0x33
    2748:	9c a9       	ldd	r25, Y+52	; 0x34
    274a:	20 e0       	ldi	r18, 0x00	; 0
    274c:	3f ef       	ldi	r19, 0xFF	; 255
    274e:	4f e7       	ldi	r20, 0x7F	; 127
    2750:	57 e4       	ldi	r21, 0x47	; 71
    2752:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2756:	18 16       	cp	r1, r24
    2758:	4c f5       	brge	.+82     	; 0x27ac <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    275a:	6d a9       	ldd	r22, Y+53	; 0x35
    275c:	7e a9       	ldd	r23, Y+54	; 0x36
    275e:	8f a9       	ldd	r24, Y+55	; 0x37
    2760:	98 ad       	ldd	r25, Y+56	; 0x38
    2762:	20 e0       	ldi	r18, 0x00	; 0
    2764:	30 e0       	ldi	r19, 0x00	; 0
    2766:	40 e2       	ldi	r20, 0x20	; 32
    2768:	51 e4       	ldi	r21, 0x41	; 65
    276a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    276e:	dc 01       	movw	r26, r24
    2770:	cb 01       	movw	r24, r22
    2772:	bc 01       	movw	r22, r24
    2774:	cd 01       	movw	r24, r26
    2776:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    277a:	dc 01       	movw	r26, r24
    277c:	cb 01       	movw	r24, r22
    277e:	98 ab       	std	Y+48, r25	; 0x30
    2780:	8f a7       	std	Y+47, r24	; 0x2f
    2782:	0f c0       	rjmp	.+30     	; 0x27a2 <LCD_displayCharacter+0xd2>
    2784:	88 ec       	ldi	r24, 0xC8	; 200
    2786:	90 e0       	ldi	r25, 0x00	; 0
    2788:	9e a7       	std	Y+46, r25	; 0x2e
    278a:	8d a7       	std	Y+45, r24	; 0x2d
    278c:	8d a5       	ldd	r24, Y+45	; 0x2d
    278e:	9e a5       	ldd	r25, Y+46	; 0x2e
    2790:	01 97       	sbiw	r24, 0x01	; 1
    2792:	f1 f7       	brne	.-4      	; 0x2790 <LCD_displayCharacter+0xc0>
    2794:	9e a7       	std	Y+46, r25	; 0x2e
    2796:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2798:	8f a5       	ldd	r24, Y+47	; 0x2f
    279a:	98 a9       	ldd	r25, Y+48	; 0x30
    279c:	01 97       	sbiw	r24, 0x01	; 1
    279e:	98 ab       	std	Y+48, r25	; 0x30
    27a0:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27a2:	8f a5       	ldd	r24, Y+47	; 0x2f
    27a4:	98 a9       	ldd	r25, Y+48	; 0x30
    27a6:	00 97       	sbiw	r24, 0x00	; 0
    27a8:	69 f7       	brne	.-38     	; 0x2784 <LCD_displayCharacter+0xb4>
    27aa:	14 c0       	rjmp	.+40     	; 0x27d4 <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27ac:	69 a9       	ldd	r22, Y+49	; 0x31
    27ae:	7a a9       	ldd	r23, Y+50	; 0x32
    27b0:	8b a9       	ldd	r24, Y+51	; 0x33
    27b2:	9c a9       	ldd	r25, Y+52	; 0x34
    27b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27b8:	dc 01       	movw	r26, r24
    27ba:	cb 01       	movw	r24, r22
    27bc:	98 ab       	std	Y+48, r25	; 0x30
    27be:	8f a7       	std	Y+47, r24	; 0x2f
    27c0:	8f a5       	ldd	r24, Y+47	; 0x2f
    27c2:	98 a9       	ldd	r25, Y+48	; 0x30
    27c4:	9c a7       	std	Y+44, r25	; 0x2c
    27c6:	8b a7       	std	Y+43, r24	; 0x2b
    27c8:	8b a5       	ldd	r24, Y+43	; 0x2b
    27ca:	9c a5       	ldd	r25, Y+44	; 0x2c
    27cc:	01 97       	sbiw	r24, 0x01	; 1
    27ce:	f1 f7       	brne	.-4      	; 0x27cc <LCD_displayCharacter+0xfc>
    27d0:	9c a7       	std	Y+44, r25	; 0x2c
    27d2:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);

	/* Enable = 1 */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH);
    27d4:	80 e0       	ldi	r24, 0x00	; 0
    27d6:	61 e0       	ldi	r22, 0x01	; 1
    27d8:	41 e0       	ldi	r20, 0x01	; 1
    27da:	0e 94 ff 0c 	call	0x19fe	; 0x19fe <GPIO_writePin>
    27de:	80 e0       	ldi	r24, 0x00	; 0
    27e0:	90 e0       	ldi	r25, 0x00	; 0
    27e2:	a0 e8       	ldi	r26, 0x80	; 128
    27e4:	bf e3       	ldi	r27, 0x3F	; 63
    27e6:	8f a3       	std	Y+39, r24	; 0x27
    27e8:	98 a7       	std	Y+40, r25	; 0x28
    27ea:	a9 a7       	std	Y+41, r26	; 0x29
    27ec:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27ee:	6f a1       	ldd	r22, Y+39	; 0x27
    27f0:	78 a5       	ldd	r23, Y+40	; 0x28
    27f2:	89 a5       	ldd	r24, Y+41	; 0x29
    27f4:	9a a5       	ldd	r25, Y+42	; 0x2a
    27f6:	20 e0       	ldi	r18, 0x00	; 0
    27f8:	30 e0       	ldi	r19, 0x00	; 0
    27fa:	4a ef       	ldi	r20, 0xFA	; 250
    27fc:	54 e4       	ldi	r21, 0x44	; 68
    27fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2802:	dc 01       	movw	r26, r24
    2804:	cb 01       	movw	r24, r22
    2806:	8b a3       	std	Y+35, r24	; 0x23
    2808:	9c a3       	std	Y+36, r25	; 0x24
    280a:	ad a3       	std	Y+37, r26	; 0x25
    280c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    280e:	6b a1       	ldd	r22, Y+35	; 0x23
    2810:	7c a1       	ldd	r23, Y+36	; 0x24
    2812:	8d a1       	ldd	r24, Y+37	; 0x25
    2814:	9e a1       	ldd	r25, Y+38	; 0x26
    2816:	20 e0       	ldi	r18, 0x00	; 0
    2818:	30 e0       	ldi	r19, 0x00	; 0
    281a:	40 e8       	ldi	r20, 0x80	; 128
    281c:	5f e3       	ldi	r21, 0x3F	; 63
    281e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2822:	88 23       	and	r24, r24
    2824:	2c f4       	brge	.+10     	; 0x2830 <LCD_displayCharacter+0x160>
		__ticks = 1;
    2826:	81 e0       	ldi	r24, 0x01	; 1
    2828:	90 e0       	ldi	r25, 0x00	; 0
    282a:	9a a3       	std	Y+34, r25	; 0x22
    282c:	89 a3       	std	Y+33, r24	; 0x21
    282e:	3f c0       	rjmp	.+126    	; 0x28ae <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    2830:	6b a1       	ldd	r22, Y+35	; 0x23
    2832:	7c a1       	ldd	r23, Y+36	; 0x24
    2834:	8d a1       	ldd	r24, Y+37	; 0x25
    2836:	9e a1       	ldd	r25, Y+38	; 0x26
    2838:	20 e0       	ldi	r18, 0x00	; 0
    283a:	3f ef       	ldi	r19, 0xFF	; 255
    283c:	4f e7       	ldi	r20, 0x7F	; 127
    283e:	57 e4       	ldi	r21, 0x47	; 71
    2840:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2844:	18 16       	cp	r1, r24
    2846:	4c f5       	brge	.+82     	; 0x289a <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2848:	6f a1       	ldd	r22, Y+39	; 0x27
    284a:	78 a5       	ldd	r23, Y+40	; 0x28
    284c:	89 a5       	ldd	r24, Y+41	; 0x29
    284e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2850:	20 e0       	ldi	r18, 0x00	; 0
    2852:	30 e0       	ldi	r19, 0x00	; 0
    2854:	40 e2       	ldi	r20, 0x20	; 32
    2856:	51 e4       	ldi	r21, 0x41	; 65
    2858:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    285c:	dc 01       	movw	r26, r24
    285e:	cb 01       	movw	r24, r22
    2860:	bc 01       	movw	r22, r24
    2862:	cd 01       	movw	r24, r26
    2864:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2868:	dc 01       	movw	r26, r24
    286a:	cb 01       	movw	r24, r22
    286c:	9a a3       	std	Y+34, r25	; 0x22
    286e:	89 a3       	std	Y+33, r24	; 0x21
    2870:	0f c0       	rjmp	.+30     	; 0x2890 <LCD_displayCharacter+0x1c0>
    2872:	88 ec       	ldi	r24, 0xC8	; 200
    2874:	90 e0       	ldi	r25, 0x00	; 0
    2876:	98 a3       	std	Y+32, r25	; 0x20
    2878:	8f 8f       	std	Y+31, r24	; 0x1f
    287a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    287c:	98 a1       	ldd	r25, Y+32	; 0x20
    287e:	01 97       	sbiw	r24, 0x01	; 1
    2880:	f1 f7       	brne	.-4      	; 0x287e <LCD_displayCharacter+0x1ae>
    2882:	98 a3       	std	Y+32, r25	; 0x20
    2884:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2886:	89 a1       	ldd	r24, Y+33	; 0x21
    2888:	9a a1       	ldd	r25, Y+34	; 0x22
    288a:	01 97       	sbiw	r24, 0x01	; 1
    288c:	9a a3       	std	Y+34, r25	; 0x22
    288e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2890:	89 a1       	ldd	r24, Y+33	; 0x21
    2892:	9a a1       	ldd	r25, Y+34	; 0x22
    2894:	00 97       	sbiw	r24, 0x00	; 0
    2896:	69 f7       	brne	.-38     	; 0x2872 <LCD_displayCharacter+0x1a2>
    2898:	14 c0       	rjmp	.+40     	; 0x28c2 <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    289a:	6b a1       	ldd	r22, Y+35	; 0x23
    289c:	7c a1       	ldd	r23, Y+36	; 0x24
    289e:	8d a1       	ldd	r24, Y+37	; 0x25
    28a0:	9e a1       	ldd	r25, Y+38	; 0x26
    28a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28a6:	dc 01       	movw	r26, r24
    28a8:	cb 01       	movw	r24, r22
    28aa:	9a a3       	std	Y+34, r25	; 0x22
    28ac:	89 a3       	std	Y+33, r24	; 0x21
    28ae:	89 a1       	ldd	r24, Y+33	; 0x21
    28b0:	9a a1       	ldd	r25, Y+34	; 0x22
    28b2:	9e 8f       	std	Y+30, r25	; 0x1e
    28b4:	8d 8f       	std	Y+29, r24	; 0x1d
    28b6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    28b8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    28ba:	01 97       	sbiw	r24, 0x01	; 1
    28bc:	f1 f7       	brne	.-4      	; 0x28ba <LCD_displayCharacter+0x1ea>
    28be:	9e 8f       	std	Y+30, r25	; 0x1e
    28c0:	8d 8f       	std	Y+29, r24	; 0x1d
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif (LCD_DATA_BITS_MODE == 8)
	/* send command */
	GPIO_writePort(LCD_DATA_PORT_ID, data);
    28c2:	82 e0       	ldi	r24, 0x02	; 2
    28c4:	69 ad       	ldd	r22, Y+57	; 0x39
    28c6:	0e 94 c9 0e 	call	0x1d92	; 0x1d92 <GPIO_writePort>
    28ca:	80 e0       	ldi	r24, 0x00	; 0
    28cc:	90 e0       	ldi	r25, 0x00	; 0
    28ce:	a0 e8       	ldi	r26, 0x80	; 128
    28d0:	bf e3       	ldi	r27, 0x3F	; 63
    28d2:	89 8f       	std	Y+25, r24	; 0x19
    28d4:	9a 8f       	std	Y+26, r25	; 0x1a
    28d6:	ab 8f       	std	Y+27, r26	; 0x1b
    28d8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28da:	69 8d       	ldd	r22, Y+25	; 0x19
    28dc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    28de:	8b 8d       	ldd	r24, Y+27	; 0x1b
    28e0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    28e2:	20 e0       	ldi	r18, 0x00	; 0
    28e4:	30 e0       	ldi	r19, 0x00	; 0
    28e6:	4a ef       	ldi	r20, 0xFA	; 250
    28e8:	54 e4       	ldi	r21, 0x44	; 68
    28ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28ee:	dc 01       	movw	r26, r24
    28f0:	cb 01       	movw	r24, r22
    28f2:	8d 8b       	std	Y+21, r24	; 0x15
    28f4:	9e 8b       	std	Y+22, r25	; 0x16
    28f6:	af 8b       	std	Y+23, r26	; 0x17
    28f8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    28fa:	6d 89       	ldd	r22, Y+21	; 0x15
    28fc:	7e 89       	ldd	r23, Y+22	; 0x16
    28fe:	8f 89       	ldd	r24, Y+23	; 0x17
    2900:	98 8d       	ldd	r25, Y+24	; 0x18
    2902:	20 e0       	ldi	r18, 0x00	; 0
    2904:	30 e0       	ldi	r19, 0x00	; 0
    2906:	40 e8       	ldi	r20, 0x80	; 128
    2908:	5f e3       	ldi	r21, 0x3F	; 63
    290a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    290e:	88 23       	and	r24, r24
    2910:	2c f4       	brge	.+10     	; 0x291c <LCD_displayCharacter+0x24c>
		__ticks = 1;
    2912:	81 e0       	ldi	r24, 0x01	; 1
    2914:	90 e0       	ldi	r25, 0x00	; 0
    2916:	9c 8b       	std	Y+20, r25	; 0x14
    2918:	8b 8b       	std	Y+19, r24	; 0x13
    291a:	3f c0       	rjmp	.+126    	; 0x299a <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    291c:	6d 89       	ldd	r22, Y+21	; 0x15
    291e:	7e 89       	ldd	r23, Y+22	; 0x16
    2920:	8f 89       	ldd	r24, Y+23	; 0x17
    2922:	98 8d       	ldd	r25, Y+24	; 0x18
    2924:	20 e0       	ldi	r18, 0x00	; 0
    2926:	3f ef       	ldi	r19, 0xFF	; 255
    2928:	4f e7       	ldi	r20, 0x7F	; 127
    292a:	57 e4       	ldi	r21, 0x47	; 71
    292c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2930:	18 16       	cp	r1, r24
    2932:	4c f5       	brge	.+82     	; 0x2986 <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2934:	69 8d       	ldd	r22, Y+25	; 0x19
    2936:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2938:	8b 8d       	ldd	r24, Y+27	; 0x1b
    293a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    293c:	20 e0       	ldi	r18, 0x00	; 0
    293e:	30 e0       	ldi	r19, 0x00	; 0
    2940:	40 e2       	ldi	r20, 0x20	; 32
    2942:	51 e4       	ldi	r21, 0x41	; 65
    2944:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2948:	dc 01       	movw	r26, r24
    294a:	cb 01       	movw	r24, r22
    294c:	bc 01       	movw	r22, r24
    294e:	cd 01       	movw	r24, r26
    2950:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2954:	dc 01       	movw	r26, r24
    2956:	cb 01       	movw	r24, r22
    2958:	9c 8b       	std	Y+20, r25	; 0x14
    295a:	8b 8b       	std	Y+19, r24	; 0x13
    295c:	0f c0       	rjmp	.+30     	; 0x297c <LCD_displayCharacter+0x2ac>
    295e:	88 ec       	ldi	r24, 0xC8	; 200
    2960:	90 e0       	ldi	r25, 0x00	; 0
    2962:	9a 8b       	std	Y+18, r25	; 0x12
    2964:	89 8b       	std	Y+17, r24	; 0x11
    2966:	89 89       	ldd	r24, Y+17	; 0x11
    2968:	9a 89       	ldd	r25, Y+18	; 0x12
    296a:	01 97       	sbiw	r24, 0x01	; 1
    296c:	f1 f7       	brne	.-4      	; 0x296a <LCD_displayCharacter+0x29a>
    296e:	9a 8b       	std	Y+18, r25	; 0x12
    2970:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2972:	8b 89       	ldd	r24, Y+19	; 0x13
    2974:	9c 89       	ldd	r25, Y+20	; 0x14
    2976:	01 97       	sbiw	r24, 0x01	; 1
    2978:	9c 8b       	std	Y+20, r25	; 0x14
    297a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    297c:	8b 89       	ldd	r24, Y+19	; 0x13
    297e:	9c 89       	ldd	r25, Y+20	; 0x14
    2980:	00 97       	sbiw	r24, 0x00	; 0
    2982:	69 f7       	brne	.-38     	; 0x295e <LCD_displayCharacter+0x28e>
    2984:	14 c0       	rjmp	.+40     	; 0x29ae <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2986:	6d 89       	ldd	r22, Y+21	; 0x15
    2988:	7e 89       	ldd	r23, Y+22	; 0x16
    298a:	8f 89       	ldd	r24, Y+23	; 0x17
    298c:	98 8d       	ldd	r25, Y+24	; 0x18
    298e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2992:	dc 01       	movw	r26, r24
    2994:	cb 01       	movw	r24, r22
    2996:	9c 8b       	std	Y+20, r25	; 0x14
    2998:	8b 8b       	std	Y+19, r24	; 0x13
    299a:	8b 89       	ldd	r24, Y+19	; 0x13
    299c:	9c 89       	ldd	r25, Y+20	; 0x14
    299e:	98 8b       	std	Y+16, r25	; 0x10
    29a0:	8f 87       	std	Y+15, r24	; 0x0f
    29a2:	8f 85       	ldd	r24, Y+15	; 0x0f
    29a4:	98 89       	ldd	r25, Y+16	; 0x10
    29a6:	01 97       	sbiw	r24, 0x01	; 1
    29a8:	f1 f7       	brne	.-4      	; 0x29a6 <LCD_displayCharacter+0x2d6>
    29aa:	98 8b       	std	Y+16, r25	; 0x10
    29ac:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);

	/* Enable = 0 */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW);
    29ae:	80 e0       	ldi	r24, 0x00	; 0
    29b0:	61 e0       	ldi	r22, 0x01	; 1
    29b2:	40 e0       	ldi	r20, 0x00	; 0
    29b4:	0e 94 ff 0c 	call	0x19fe	; 0x19fe <GPIO_writePin>
    29b8:	80 e0       	ldi	r24, 0x00	; 0
    29ba:	90 e0       	ldi	r25, 0x00	; 0
    29bc:	a0 e8       	ldi	r26, 0x80	; 128
    29be:	bf e3       	ldi	r27, 0x3F	; 63
    29c0:	8b 87       	std	Y+11, r24	; 0x0b
    29c2:	9c 87       	std	Y+12, r25	; 0x0c
    29c4:	ad 87       	std	Y+13, r26	; 0x0d
    29c6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29c8:	6b 85       	ldd	r22, Y+11	; 0x0b
    29ca:	7c 85       	ldd	r23, Y+12	; 0x0c
    29cc:	8d 85       	ldd	r24, Y+13	; 0x0d
    29ce:	9e 85       	ldd	r25, Y+14	; 0x0e
    29d0:	20 e0       	ldi	r18, 0x00	; 0
    29d2:	30 e0       	ldi	r19, 0x00	; 0
    29d4:	4a ef       	ldi	r20, 0xFA	; 250
    29d6:	54 e4       	ldi	r21, 0x44	; 68
    29d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29dc:	dc 01       	movw	r26, r24
    29de:	cb 01       	movw	r24, r22
    29e0:	8f 83       	std	Y+7, r24	; 0x07
    29e2:	98 87       	std	Y+8, r25	; 0x08
    29e4:	a9 87       	std	Y+9, r26	; 0x09
    29e6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    29e8:	6f 81       	ldd	r22, Y+7	; 0x07
    29ea:	78 85       	ldd	r23, Y+8	; 0x08
    29ec:	89 85       	ldd	r24, Y+9	; 0x09
    29ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    29f0:	20 e0       	ldi	r18, 0x00	; 0
    29f2:	30 e0       	ldi	r19, 0x00	; 0
    29f4:	40 e8       	ldi	r20, 0x80	; 128
    29f6:	5f e3       	ldi	r21, 0x3F	; 63
    29f8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    29fc:	88 23       	and	r24, r24
    29fe:	2c f4       	brge	.+10     	; 0x2a0a <LCD_displayCharacter+0x33a>
		__ticks = 1;
    2a00:	81 e0       	ldi	r24, 0x01	; 1
    2a02:	90 e0       	ldi	r25, 0x00	; 0
    2a04:	9e 83       	std	Y+6, r25	; 0x06
    2a06:	8d 83       	std	Y+5, r24	; 0x05
    2a08:	3f c0       	rjmp	.+126    	; 0x2a88 <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    2a0a:	6f 81       	ldd	r22, Y+7	; 0x07
    2a0c:	78 85       	ldd	r23, Y+8	; 0x08
    2a0e:	89 85       	ldd	r24, Y+9	; 0x09
    2a10:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a12:	20 e0       	ldi	r18, 0x00	; 0
    2a14:	3f ef       	ldi	r19, 0xFF	; 255
    2a16:	4f e7       	ldi	r20, 0x7F	; 127
    2a18:	57 e4       	ldi	r21, 0x47	; 71
    2a1a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a1e:	18 16       	cp	r1, r24
    2a20:	4c f5       	brge	.+82     	; 0x2a74 <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a22:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a24:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a26:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a28:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a2a:	20 e0       	ldi	r18, 0x00	; 0
    2a2c:	30 e0       	ldi	r19, 0x00	; 0
    2a2e:	40 e2       	ldi	r20, 0x20	; 32
    2a30:	51 e4       	ldi	r21, 0x41	; 65
    2a32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a36:	dc 01       	movw	r26, r24
    2a38:	cb 01       	movw	r24, r22
    2a3a:	bc 01       	movw	r22, r24
    2a3c:	cd 01       	movw	r24, r26
    2a3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a42:	dc 01       	movw	r26, r24
    2a44:	cb 01       	movw	r24, r22
    2a46:	9e 83       	std	Y+6, r25	; 0x06
    2a48:	8d 83       	std	Y+5, r24	; 0x05
    2a4a:	0f c0       	rjmp	.+30     	; 0x2a6a <LCD_displayCharacter+0x39a>
    2a4c:	88 ec       	ldi	r24, 0xC8	; 200
    2a4e:	90 e0       	ldi	r25, 0x00	; 0
    2a50:	9c 83       	std	Y+4, r25	; 0x04
    2a52:	8b 83       	std	Y+3, r24	; 0x03
    2a54:	8b 81       	ldd	r24, Y+3	; 0x03
    2a56:	9c 81       	ldd	r25, Y+4	; 0x04
    2a58:	01 97       	sbiw	r24, 0x01	; 1
    2a5a:	f1 f7       	brne	.-4      	; 0x2a58 <LCD_displayCharacter+0x388>
    2a5c:	9c 83       	std	Y+4, r25	; 0x04
    2a5e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a60:	8d 81       	ldd	r24, Y+5	; 0x05
    2a62:	9e 81       	ldd	r25, Y+6	; 0x06
    2a64:	01 97       	sbiw	r24, 0x01	; 1
    2a66:	9e 83       	std	Y+6, r25	; 0x06
    2a68:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a6a:	8d 81       	ldd	r24, Y+5	; 0x05
    2a6c:	9e 81       	ldd	r25, Y+6	; 0x06
    2a6e:	00 97       	sbiw	r24, 0x00	; 0
    2a70:	69 f7       	brne	.-38     	; 0x2a4c <LCD_displayCharacter+0x37c>
    2a72:	14 c0       	rjmp	.+40     	; 0x2a9c <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a74:	6f 81       	ldd	r22, Y+7	; 0x07
    2a76:	78 85       	ldd	r23, Y+8	; 0x08
    2a78:	89 85       	ldd	r24, Y+9	; 0x09
    2a7a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a80:	dc 01       	movw	r26, r24
    2a82:	cb 01       	movw	r24, r22
    2a84:	9e 83       	std	Y+6, r25	; 0x06
    2a86:	8d 83       	std	Y+5, r24	; 0x05
    2a88:	8d 81       	ldd	r24, Y+5	; 0x05
    2a8a:	9e 81       	ldd	r25, Y+6	; 0x06
    2a8c:	9a 83       	std	Y+2, r25	; 0x02
    2a8e:	89 83       	std	Y+1, r24	; 0x01
    2a90:	89 81       	ldd	r24, Y+1	; 0x01
    2a92:	9a 81       	ldd	r25, Y+2	; 0x02
    2a94:	01 97       	sbiw	r24, 0x01	; 1
    2a96:	f1 f7       	brne	.-4      	; 0x2a94 <LCD_displayCharacter+0x3c4>
    2a98:	9a 83       	std	Y+2, r25	; 0x02
    2a9a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
#endif

}
    2a9c:	e9 96       	adiw	r28, 0x39	; 57
    2a9e:	0f b6       	in	r0, 0x3f	; 63
    2aa0:	f8 94       	cli
    2aa2:	de bf       	out	0x3e, r29	; 62
    2aa4:	0f be       	out	0x3f, r0	; 63
    2aa6:	cd bf       	out	0x3d, r28	; 61
    2aa8:	cf 91       	pop	r28
    2aaa:	df 91       	pop	r29
    2aac:	08 95       	ret

00002aae <LCD_displayString>:
/*[FUNCTION NAME]	: LCD_displayString
 *[DESCRIPTION]		: Display the required string on the screen
 *[ARGUMENTS]		: pointer to char 'string'
 *[RETURNS]			: void
 */
void LCD_displayString(const char *str){
    2aae:	df 93       	push	r29
    2ab0:	cf 93       	push	r28
    2ab2:	00 d0       	rcall	.+0      	; 0x2ab4 <LCD_displayString+0x6>
    2ab4:	0f 92       	push	r0
    2ab6:	cd b7       	in	r28, 0x3d	; 61
    2ab8:	de b7       	in	r29, 0x3e	; 62
    2aba:	9b 83       	std	Y+3, r25	; 0x03
    2abc:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2abe:	19 82       	std	Y+1, r1	; 0x01
    2ac0:	0e c0       	rjmp	.+28     	; 0x2ade <LCD_displayString+0x30>
	while(str[i] != '\0'){
		LCD_displayCharacter(str[i]);
    2ac2:	89 81       	ldd	r24, Y+1	; 0x01
    2ac4:	28 2f       	mov	r18, r24
    2ac6:	30 e0       	ldi	r19, 0x00	; 0
    2ac8:	8a 81       	ldd	r24, Y+2	; 0x02
    2aca:	9b 81       	ldd	r25, Y+3	; 0x03
    2acc:	fc 01       	movw	r30, r24
    2ace:	e2 0f       	add	r30, r18
    2ad0:	f3 1f       	adc	r31, r19
    2ad2:	80 81       	ld	r24, Z
    2ad4:	0e 94 68 13 	call	0x26d0	; 0x26d0 <LCD_displayCharacter>
		i++;
    2ad8:	89 81       	ldd	r24, Y+1	; 0x01
    2ada:	8f 5f       	subi	r24, 0xFF	; 255
    2adc:	89 83       	std	Y+1, r24	; 0x01
 *[ARGUMENTS]		: pointer to char 'string'
 *[RETURNS]			: void
 */
void LCD_displayString(const char *str){
	uint8 i = 0;
	while(str[i] != '\0'){
    2ade:	89 81       	ldd	r24, Y+1	; 0x01
    2ae0:	28 2f       	mov	r18, r24
    2ae2:	30 e0       	ldi	r19, 0x00	; 0
    2ae4:	8a 81       	ldd	r24, Y+2	; 0x02
    2ae6:	9b 81       	ldd	r25, Y+3	; 0x03
    2ae8:	fc 01       	movw	r30, r24
    2aea:	e2 0f       	add	r30, r18
    2aec:	f3 1f       	adc	r31, r19
    2aee:	80 81       	ld	r24, Z
    2af0:	88 23       	and	r24, r24
    2af2:	39 f7       	brne	.-50     	; 0x2ac2 <LCD_displayString+0x14>
		LCD_displayCharacter(str[i]);
		i++;
	}
}
    2af4:	0f 90       	pop	r0
    2af6:	0f 90       	pop	r0
    2af8:	0f 90       	pop	r0
    2afa:	cf 91       	pop	r28
    2afc:	df 91       	pop	r29
    2afe:	08 95       	ret

00002b00 <LCD_moveCursor>:
/*[FUNCTION NAME]	: LCD_moveCursor
 *[DESCRIPTION]		: Move the cursor to a specified row and column index on the screen
 *[ARGUMENTS]		: uint8(row,col)
 *[RETURNS]			: void
 */
void LCD_moveCursor(uint8 row, uint8 col){
    2b00:	df 93       	push	r29
    2b02:	cf 93       	push	r28
    2b04:	00 d0       	rcall	.+0      	; 0x2b06 <LCD_moveCursor+0x6>
    2b06:	00 d0       	rcall	.+0      	; 0x2b08 <LCD_moveCursor+0x8>
    2b08:	0f 92       	push	r0
    2b0a:	cd b7       	in	r28, 0x3d	; 61
    2b0c:	de b7       	in	r29, 0x3e	; 62
    2b0e:	8a 83       	std	Y+2, r24	; 0x02
    2b10:	6b 83       	std	Y+3, r22	; 0x03
	uint8 address;
	switch(row){
    2b12:	8a 81       	ldd	r24, Y+2	; 0x02
    2b14:	28 2f       	mov	r18, r24
    2b16:	30 e0       	ldi	r19, 0x00	; 0
    2b18:	3d 83       	std	Y+5, r19	; 0x05
    2b1a:	2c 83       	std	Y+4, r18	; 0x04
    2b1c:	8c 81       	ldd	r24, Y+4	; 0x04
    2b1e:	9d 81       	ldd	r25, Y+5	; 0x05
    2b20:	81 30       	cpi	r24, 0x01	; 1
    2b22:	91 05       	cpc	r25, r1
    2b24:	c1 f0       	breq	.+48     	; 0x2b56 <LCD_moveCursor+0x56>
    2b26:	2c 81       	ldd	r18, Y+4	; 0x04
    2b28:	3d 81       	ldd	r19, Y+5	; 0x05
    2b2a:	22 30       	cpi	r18, 0x02	; 2
    2b2c:	31 05       	cpc	r19, r1
    2b2e:	2c f4       	brge	.+10     	; 0x2b3a <LCD_moveCursor+0x3a>
    2b30:	8c 81       	ldd	r24, Y+4	; 0x04
    2b32:	9d 81       	ldd	r25, Y+5	; 0x05
    2b34:	00 97       	sbiw	r24, 0x00	; 0
    2b36:	61 f0       	breq	.+24     	; 0x2b50 <LCD_moveCursor+0x50>
    2b38:	19 c0       	rjmp	.+50     	; 0x2b6c <LCD_moveCursor+0x6c>
    2b3a:	2c 81       	ldd	r18, Y+4	; 0x04
    2b3c:	3d 81       	ldd	r19, Y+5	; 0x05
    2b3e:	22 30       	cpi	r18, 0x02	; 2
    2b40:	31 05       	cpc	r19, r1
    2b42:	69 f0       	breq	.+26     	; 0x2b5e <LCD_moveCursor+0x5e>
    2b44:	8c 81       	ldd	r24, Y+4	; 0x04
    2b46:	9d 81       	ldd	r25, Y+5	; 0x05
    2b48:	83 30       	cpi	r24, 0x03	; 3
    2b4a:	91 05       	cpc	r25, r1
    2b4c:	61 f0       	breq	.+24     	; 0x2b66 <LCD_moveCursor+0x66>
    2b4e:	0e c0       	rjmp	.+28     	; 0x2b6c <LCD_moveCursor+0x6c>
	case 0:
		address = col;
    2b50:	8b 81       	ldd	r24, Y+3	; 0x03
    2b52:	89 83       	std	Y+1, r24	; 0x01
    2b54:	0b c0       	rjmp	.+22     	; 0x2b6c <LCD_moveCursor+0x6c>
		break;
	case 1:
		address = col + 0x40;
    2b56:	8b 81       	ldd	r24, Y+3	; 0x03
    2b58:	80 5c       	subi	r24, 0xC0	; 192
    2b5a:	89 83       	std	Y+1, r24	; 0x01
    2b5c:	07 c0       	rjmp	.+14     	; 0x2b6c <LCD_moveCursor+0x6c>
		break;
	case 2:
		address = col + 0x10;
    2b5e:	8b 81       	ldd	r24, Y+3	; 0x03
    2b60:	80 5f       	subi	r24, 0xF0	; 240
    2b62:	89 83       	std	Y+1, r24	; 0x01
    2b64:	03 c0       	rjmp	.+6      	; 0x2b6c <LCD_moveCursor+0x6c>
		break;
	case 3:
		address = col + 0x50;
    2b66:	8b 81       	ldd	r24, Y+3	; 0x03
    2b68:	80 5b       	subi	r24, 0xB0	; 176
    2b6a:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	LCD_sendCommand(address | LCD_SET_CURSOR_LOCATION);
    2b6c:	89 81       	ldd	r24, Y+1	; 0x01
    2b6e:	80 68       	ori	r24, 0x80	; 128
    2b70:	0e 94 79 11 	call	0x22f2	; 0x22f2 <LCD_sendCommand>
}
    2b74:	0f 90       	pop	r0
    2b76:	0f 90       	pop	r0
    2b78:	0f 90       	pop	r0
    2b7a:	0f 90       	pop	r0
    2b7c:	0f 90       	pop	r0
    2b7e:	cf 91       	pop	r28
    2b80:	df 91       	pop	r29
    2b82:	08 95       	ret

00002b84 <LCD_displayStringRowColumn>:
/*[FUNCTION NAME]	: LCD_displayStringRowColumn
 *[DESCRIPTION]		: Display the required string in a specified row and column index on the screen
 *[ARGUMENTS]		: uint8(row,col) and pointer to string
 *[RETURNS]			: void
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *str){
    2b84:	df 93       	push	r29
    2b86:	cf 93       	push	r28
    2b88:	00 d0       	rcall	.+0      	; 0x2b8a <LCD_displayStringRowColumn+0x6>
    2b8a:	00 d0       	rcall	.+0      	; 0x2b8c <LCD_displayStringRowColumn+0x8>
    2b8c:	cd b7       	in	r28, 0x3d	; 61
    2b8e:	de b7       	in	r29, 0x3e	; 62
    2b90:	89 83       	std	Y+1, r24	; 0x01
    2b92:	6a 83       	std	Y+2, r22	; 0x02
    2b94:	5c 83       	std	Y+4, r21	; 0x04
    2b96:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col);
    2b98:	89 81       	ldd	r24, Y+1	; 0x01
    2b9a:	6a 81       	ldd	r22, Y+2	; 0x02
    2b9c:	0e 94 80 15 	call	0x2b00	; 0x2b00 <LCD_moveCursor>
	LCD_displayString(str);
    2ba0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ba2:	9c 81       	ldd	r25, Y+4	; 0x04
    2ba4:	0e 94 57 15 	call	0x2aae	; 0x2aae <LCD_displayString>

}
    2ba8:	0f 90       	pop	r0
    2baa:	0f 90       	pop	r0
    2bac:	0f 90       	pop	r0
    2bae:	0f 90       	pop	r0
    2bb0:	cf 91       	pop	r28
    2bb2:	df 91       	pop	r29
    2bb4:	08 95       	ret

00002bb6 <LCD_integerToString>:
/*[FUNCTION NAME]	: LCD_integerToString
 *[DESCRIPTION]		: Display the required decimal value on the screen
 *[ARGUMENTS]		: int data
 *[RETURNS]			: void
 */
void LCD_integerToString(int data){
    2bb6:	df 93       	push	r29
    2bb8:	cf 93       	push	r28
    2bba:	cd b7       	in	r28, 0x3d	; 61
    2bbc:	de b7       	in	r29, 0x3e	; 62
    2bbe:	62 97       	sbiw	r28, 0x12	; 18
    2bc0:	0f b6       	in	r0, 0x3f	; 63
    2bc2:	f8 94       	cli
    2bc4:	de bf       	out	0x3e, r29	; 62
    2bc6:	0f be       	out	0x3f, r0	; 63
    2bc8:	cd bf       	out	0x3d, r28	; 61
    2bca:	9a 8b       	std	Y+18, r25	; 0x12
    2bcc:	89 8b       	std	Y+17, r24	; 0x11
	char buff[16];
	itoa(data,buff,10);
    2bce:	89 89       	ldd	r24, Y+17	; 0x11
    2bd0:	9a 89       	ldd	r25, Y+18	; 0x12
    2bd2:	9e 01       	movw	r18, r28
    2bd4:	2f 5f       	subi	r18, 0xFF	; 255
    2bd6:	3f 4f       	sbci	r19, 0xFF	; 255
    2bd8:	b9 01       	movw	r22, r18
    2bda:	4a e0       	ldi	r20, 0x0A	; 10
    2bdc:	50 e0       	ldi	r21, 0x00	; 0
    2bde:	0e 94 70 18 	call	0x30e0	; 0x30e0 <itoa>
	LCD_displayString(buff);
    2be2:	ce 01       	movw	r24, r28
    2be4:	01 96       	adiw	r24, 0x01	; 1
    2be6:	0e 94 57 15 	call	0x2aae	; 0x2aae <LCD_displayString>
}
    2bea:	62 96       	adiw	r28, 0x12	; 18
    2bec:	0f b6       	in	r0, 0x3f	; 63
    2bee:	f8 94       	cli
    2bf0:	de bf       	out	0x3e, r29	; 62
    2bf2:	0f be       	out	0x3f, r0	; 63
    2bf4:	cd bf       	out	0x3d, r28	; 61
    2bf6:	cf 91       	pop	r28
    2bf8:	df 91       	pop	r29
    2bfa:	08 95       	ret

00002bfc <LCD_clearScreen>:
 *[DESCRIPTION]		: Send the clear screen command
 *[ARGUMENTS]		: void
 *[RETURNS]			: void
 */
void LCD_clearScreen(void)
{
    2bfc:	df 93       	push	r29
    2bfe:	cf 93       	push	r28
    2c00:	cd b7       	in	r28, 0x3d	; 61
    2c02:	de b7       	in	r29, 0x3e	; 62
	/* Send clear display command */
	LCD_sendCommand(LCD_CLEAR_COMMAND);
    2c04:	81 e0       	ldi	r24, 0x01	; 1
    2c06:	0e 94 79 11 	call	0x22f2	; 0x22f2 <LCD_sendCommand>
}
    2c0a:	cf 91       	pop	r28
    2c0c:	df 91       	pop	r29
    2c0e:	08 95       	ret

00002c10 <__vector_7>:
/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

ISR(TIMER1_COMPA_vect)
{
    2c10:	1f 92       	push	r1
    2c12:	0f 92       	push	r0
    2c14:	0f b6       	in	r0, 0x3f	; 63
    2c16:	0f 92       	push	r0
    2c18:	11 24       	eor	r1, r1
    2c1a:	2f 93       	push	r18
    2c1c:	3f 93       	push	r19
    2c1e:	4f 93       	push	r20
    2c20:	5f 93       	push	r21
    2c22:	6f 93       	push	r22
    2c24:	7f 93       	push	r23
    2c26:	8f 93       	push	r24
    2c28:	9f 93       	push	r25
    2c2a:	af 93       	push	r26
    2c2c:	bf 93       	push	r27
    2c2e:	ef 93       	push	r30
    2c30:	ff 93       	push	r31
    2c32:	df 93       	push	r29
    2c34:	cf 93       	push	r28
    2c36:	cd b7       	in	r28, 0x3d	; 61
    2c38:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR){
    2c3a:	80 91 6c 01 	lds	r24, 0x016C
    2c3e:	90 91 6d 01 	lds	r25, 0x016D
    2c42:	00 97       	sbiw	r24, 0x00	; 0
    2c44:	29 f0       	breq	.+10     	; 0x2c50 <__vector_7+0x40>
		/*call back function in main apllictaion after edge deteced*/
		(*g_callBackPtr)();
    2c46:	e0 91 6c 01 	lds	r30, 0x016C
    2c4a:	f0 91 6d 01 	lds	r31, 0x016D
    2c4e:	09 95       	icall
	}
}
    2c50:	cf 91       	pop	r28
    2c52:	df 91       	pop	r29
    2c54:	ff 91       	pop	r31
    2c56:	ef 91       	pop	r30
    2c58:	bf 91       	pop	r27
    2c5a:	af 91       	pop	r26
    2c5c:	9f 91       	pop	r25
    2c5e:	8f 91       	pop	r24
    2c60:	7f 91       	pop	r23
    2c62:	6f 91       	pop	r22
    2c64:	5f 91       	pop	r21
    2c66:	4f 91       	pop	r20
    2c68:	3f 91       	pop	r19
    2c6a:	2f 91       	pop	r18
    2c6c:	0f 90       	pop	r0
    2c6e:	0f be       	out	0x3f, r0	; 63
    2c70:	0f 90       	pop	r0
    2c72:	1f 90       	pop	r1
    2c74:	18 95       	reti

00002c76 <__vector_9>:

ISR(TIMER1_OVF_vect)
{
    2c76:	1f 92       	push	r1
    2c78:	0f 92       	push	r0
    2c7a:	0f b6       	in	r0, 0x3f	; 63
    2c7c:	0f 92       	push	r0
    2c7e:	11 24       	eor	r1, r1
    2c80:	2f 93       	push	r18
    2c82:	3f 93       	push	r19
    2c84:	4f 93       	push	r20
    2c86:	5f 93       	push	r21
    2c88:	6f 93       	push	r22
    2c8a:	7f 93       	push	r23
    2c8c:	8f 93       	push	r24
    2c8e:	9f 93       	push	r25
    2c90:	af 93       	push	r26
    2c92:	bf 93       	push	r27
    2c94:	ef 93       	push	r30
    2c96:	ff 93       	push	r31
    2c98:	df 93       	push	r29
    2c9a:	cf 93       	push	r28
    2c9c:	cd b7       	in	r28, 0x3d	; 61
    2c9e:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR){
    2ca0:	80 91 6c 01 	lds	r24, 0x016C
    2ca4:	90 91 6d 01 	lds	r25, 0x016D
    2ca8:	00 97       	sbiw	r24, 0x00	; 0
    2caa:	29 f0       	breq	.+10     	; 0x2cb6 <__vector_9+0x40>
		/*call back function in main apllictaion after edge deteced*/
		(*g_callBackPtr)();
    2cac:	e0 91 6c 01 	lds	r30, 0x016C
    2cb0:	f0 91 6d 01 	lds	r31, 0x016D
    2cb4:	09 95       	icall
	}
}
    2cb6:	cf 91       	pop	r28
    2cb8:	df 91       	pop	r29
    2cba:	ff 91       	pop	r31
    2cbc:	ef 91       	pop	r30
    2cbe:	bf 91       	pop	r27
    2cc0:	af 91       	pop	r26
    2cc2:	9f 91       	pop	r25
    2cc4:	8f 91       	pop	r24
    2cc6:	7f 91       	pop	r23
    2cc8:	6f 91       	pop	r22
    2cca:	5f 91       	pop	r21
    2ccc:	4f 91       	pop	r20
    2cce:	3f 91       	pop	r19
    2cd0:	2f 91       	pop	r18
    2cd2:	0f 90       	pop	r0
    2cd4:	0f be       	out	0x3f, r0	; 63
    2cd6:	0f 90       	pop	r0
    2cd8:	1f 90       	pop	r1
    2cda:	18 95       	reti

00002cdc <Timer1_init>:
/*[FUNCTION NAME]	: Timer1_init
 *[DESCRIPTION]		: Function to initialize the Timer driver.
 *[ARGUMENTS]		: pointer to Structure of type Timer1_ConfigType
 *[RETURNS]			: void
 */
void Timer1_init(const Timer1_ConfigType * Config_Ptr){
    2cdc:	df 93       	push	r29
    2cde:	cf 93       	push	r28
    2ce0:	00 d0       	rcall	.+0      	; 0x2ce2 <Timer1_init+0x6>
    2ce2:	cd b7       	in	r28, 0x3d	; 61
    2ce4:	de b7       	in	r29, 0x3e	; 62
    2ce6:	9a 83       	std	Y+2, r25	; 0x02
    2ce8:	89 83       	std	Y+1, r24	; 0x01
	/*first two bits is common in two modes 00 for both*/
	TCCR1A = (1 << FOC1A) | (Config_Ptr->mode & 3);
    2cea:	af e4       	ldi	r26, 0x4F	; 79
    2cec:	b0 e0       	ldi	r27, 0x00	; 0
    2cee:	e9 81       	ldd	r30, Y+1	; 0x01
    2cf0:	fa 81       	ldd	r31, Y+2	; 0x02
    2cf2:	85 81       	ldd	r24, Z+5	; 0x05
    2cf4:	83 70       	andi	r24, 0x03	; 3
    2cf6:	88 60       	ori	r24, 0x08	; 8
    2cf8:	8c 93       	st	X, r24
	if (Config_Ptr->mode == TIMER1_COMPARE_MODE_4) {
    2cfa:	e9 81       	ldd	r30, Y+1	; 0x01
    2cfc:	fa 81       	ldd	r31, Y+2	; 0x02
    2cfe:	85 81       	ldd	r24, Z+5	; 0x05
    2d00:	84 30       	cpi	r24, 0x04	; 4
    2d02:	29 f5       	brne	.+74     	; 0x2d4e <Timer1_init+0x72>
		/* Set the Compare value to value in Configuration */
		OCR1A = Config_Ptr->compare_value;
    2d04:	aa e4       	ldi	r26, 0x4A	; 74
    2d06:	b0 e0       	ldi	r27, 0x00	; 0
    2d08:	e9 81       	ldd	r30, Y+1	; 0x01
    2d0a:	fa 81       	ldd	r31, Y+2	; 0x02
    2d0c:	82 81       	ldd	r24, Z+2	; 0x02
    2d0e:	93 81       	ldd	r25, Z+3	; 0x03
    2d10:	11 96       	adiw	r26, 0x01	; 1
    2d12:	9c 93       	st	X, r25
    2d14:	8e 93       	st	-X, r24

		/* Enable Timer1 Compare A Interrupt */
		TIMSK |= (1 << OCIE1A);
    2d16:	a9 e5       	ldi	r26, 0x59	; 89
    2d18:	b0 e0       	ldi	r27, 0x00	; 0
    2d1a:	e9 e5       	ldi	r30, 0x59	; 89
    2d1c:	f0 e0       	ldi	r31, 0x00	; 0
    2d1e:	80 81       	ld	r24, Z
    2d20:	80 61       	ori	r24, 0x10	; 16
    2d22:	8c 93       	st	X, r24
		TCCR1B = (Config_Ptr->prescaler) | ((Config_Ptr->mode >> 2) << 3);
    2d24:	ae e4       	ldi	r26, 0x4E	; 78
    2d26:	b0 e0       	ldi	r27, 0x00	; 0
    2d28:	e9 81       	ldd	r30, Y+1	; 0x01
    2d2a:	fa 81       	ldd	r31, Y+2	; 0x02
    2d2c:	84 81       	ldd	r24, Z+4	; 0x04
    2d2e:	28 2f       	mov	r18, r24
    2d30:	e9 81       	ldd	r30, Y+1	; 0x01
    2d32:	fa 81       	ldd	r31, Y+2	; 0x02
    2d34:	85 81       	ldd	r24, Z+5	; 0x05
    2d36:	86 95       	lsr	r24
    2d38:	86 95       	lsr	r24
    2d3a:	88 2f       	mov	r24, r24
    2d3c:	90 e0       	ldi	r25, 0x00	; 0
    2d3e:	88 0f       	add	r24, r24
    2d40:	99 1f       	adc	r25, r25
    2d42:	88 0f       	add	r24, r24
    2d44:	99 1f       	adc	r25, r25
    2d46:	88 0f       	add	r24, r24
    2d48:	99 1f       	adc	r25, r25
    2d4a:	82 2b       	or	r24, r18
    2d4c:	8c 93       	st	X, r24
	}
	if (Config_Ptr->mode == TIMER1_Normal_MODE) {
    2d4e:	e9 81       	ldd	r30, Y+1	; 0x01
    2d50:	fa 81       	ldd	r31, Y+2	; 0x02
    2d52:	85 81       	ldd	r24, Z+5	; 0x05
    2d54:	88 23       	and	r24, r24
    2d56:	69 f4       	brne	.+26     	; 0x2d72 <Timer1_init+0x96>
		/*Timer_ 1 Overflow  Interrupt Enable*/
		TIMSK |= (1<<TOIE1);
    2d58:	a9 e5       	ldi	r26, 0x59	; 89
    2d5a:	b0 e0       	ldi	r27, 0x00	; 0
    2d5c:	e9 e5       	ldi	r30, 0x59	; 89
    2d5e:	f0 e0       	ldi	r31, 0x00	; 0
    2d60:	80 81       	ld	r24, Z
    2d62:	84 60       	ori	r24, 0x04	; 4
    2d64:	8c 93       	st	X, r24
		/*set prescaler chosen in Configuration*/
		TCCR1B = (Config_Ptr->prescaler);
    2d66:	ae e4       	ldi	r26, 0x4E	; 78
    2d68:	b0 e0       	ldi	r27, 0x00	; 0
    2d6a:	e9 81       	ldd	r30, Y+1	; 0x01
    2d6c:	fa 81       	ldd	r31, Y+2	; 0x02
    2d6e:	84 81       	ldd	r24, Z+4	; 0x04
    2d70:	8c 93       	st	X, r24
	}
	TCNT1 = Config_Ptr->initial_value;
    2d72:	ec e4       	ldi	r30, 0x4C	; 76
    2d74:	f0 e0       	ldi	r31, 0x00	; 0
    2d76:	a9 81       	ldd	r26, Y+1	; 0x01
    2d78:	ba 81       	ldd	r27, Y+2	; 0x02
    2d7a:	8d 91       	ld	r24, X+
    2d7c:	9c 91       	ld	r25, X
    2d7e:	11 97       	sbiw	r26, 0x01	; 1
    2d80:	91 83       	std	Z+1, r25	; 0x01
    2d82:	80 83       	st	Z, r24
}
    2d84:	0f 90       	pop	r0
    2d86:	0f 90       	pop	r0
    2d88:	cf 91       	pop	r28
    2d8a:	df 91       	pop	r29
    2d8c:	08 95       	ret

00002d8e <Timer1_deInit>:
/*[FUNCTION NAME]	: Timer1_deInit
 *[DESCRIPTION]		: Function to disable the Timer1.
 *[ARGUMENTS]		: void
 *[RETURNS]			: void
 */
void Timer1_deInit(void){
    2d8e:	df 93       	push	r29
    2d90:	cf 93       	push	r28
    2d92:	cd b7       	in	r28, 0x3d	; 61
    2d94:	de b7       	in	r29, 0x3e	; 62
	TCCR1A = 0;
    2d96:	ef e4       	ldi	r30, 0x4F	; 79
    2d98:	f0 e0       	ldi	r31, 0x00	; 0
    2d9a:	10 82       	st	Z, r1
	TCCR1B = 0;
    2d9c:	ee e4       	ldi	r30, 0x4E	; 78
    2d9e:	f0 e0       	ldi	r31, 0x00	; 0
    2da0:	10 82       	st	Z, r1
	TCNT1 = 0;
    2da2:	ec e4       	ldi	r30, 0x4C	; 76
    2da4:	f0 e0       	ldi	r31, 0x00	; 0
    2da6:	11 82       	std	Z+1, r1	; 0x01
    2da8:	10 82       	st	Z, r1
}
    2daa:	cf 91       	pop	r28
    2dac:	df 91       	pop	r29
    2dae:	08 95       	ret

00002db0 <Timer1_setCallBack>:
/*[FUNCTION NAME]	: Timer1_setCallBack
 *[DESCRIPTION]		: Function to set the Call Back function address.
 *[ARGUMENTS]		: pointer to Call Back function.
 *[RETURNS]			: void
 */
void Timer1_setCallBack(void(*a_ptr)(void)){
    2db0:	df 93       	push	r29
    2db2:	cf 93       	push	r28
    2db4:	00 d0       	rcall	.+0      	; 0x2db6 <Timer1_setCallBack+0x6>
    2db6:	cd b7       	in	r28, 0x3d	; 61
    2db8:	de b7       	in	r29, 0x3e	; 62
    2dba:	9a 83       	std	Y+2, r25	; 0x02
    2dbc:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtr = a_ptr;
    2dbe:	89 81       	ldd	r24, Y+1	; 0x01
    2dc0:	9a 81       	ldd	r25, Y+2	; 0x02
    2dc2:	90 93 6d 01 	sts	0x016D, r25
    2dc6:	80 93 6c 01 	sts	0x016C, r24
}
    2dca:	0f 90       	pop	r0
    2dcc:	0f 90       	pop	r0
    2dce:	cf 91       	pop	r28
    2dd0:	df 91       	pop	r29
    2dd2:	08 95       	ret

00002dd4 <UART_init>:
 *                    2. Enable the UART.
 *                    3. Setup the UART baud rate.
 *[ARGUMENTS]		: pointer to Structure of type UART_ConfigType
 *[RETURNS]			: void
 */
void UART_init(const UART_ConfigType * Config_Ptr){
    2dd4:	df 93       	push	r29
    2dd6:	cf 93       	push	r28
    2dd8:	00 d0       	rcall	.+0      	; 0x2dda <UART_init+0x6>
    2dda:	00 d0       	rcall	.+0      	; 0x2ddc <UART_init+0x8>
    2ddc:	cd b7       	in	r28, 0x3d	; 61
    2dde:	de b7       	in	r29, 0x3e	; 62
    2de0:	9c 83       	std	Y+4, r25	; 0x04
    2de2:	8b 83       	std	Y+3, r24	; 0x03

	uint16 ubrr_value = 0;
    2de4:	1a 82       	std	Y+2, r1	; 0x02
    2de6:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    2de8:	eb e2       	ldi	r30, 0x2B	; 43
    2dea:	f0 e0       	ldi	r31, 0x00	; 0
    2dec:	82 e0       	ldi	r24, 0x02	; 2
    2dee:	80 83       	st	Z, r24
	 * TXCIE = 0 Disable USART Tx Complete Interrupt Enable
	 * UDRIE = 0 Disable USART Data Register Empty Interrupt Enable
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 ***********************************************************************/
	UCSRB |= (1<<RXEN) | (1<<TXEN);
    2df0:	aa e2       	ldi	r26, 0x2A	; 42
    2df2:	b0 e0       	ldi	r27, 0x00	; 0
    2df4:	ea e2       	ldi	r30, 0x2A	; 42
    2df6:	f0 e0       	ldi	r31, 0x00	; 0
    2df8:	80 81       	ld	r24, Z
    2dfa:	88 61       	ori	r24, 0x18	; 24
    2dfc:	8c 93       	st	X, r24

	/*configure baud rate
	 * for 9 bit mode */
	if(Config_Ptr->bit_data == BIT_DATA_9_BITS){
    2dfe:	eb 81       	ldd	r30, Y+3	; 0x03
    2e00:	fc 81       	ldd	r31, Y+4	; 0x04
    2e02:	80 81       	ld	r24, Z
    2e04:	87 30       	cpi	r24, 0x07	; 7
    2e06:	79 f4       	brne	.+30     	; 0x2e26 <UART_init+0x52>
		UCSRB |= (1<<UCSZ2);
    2e08:	aa e2       	ldi	r26, 0x2A	; 42
    2e0a:	b0 e0       	ldi	r27, 0x00	; 0
    2e0c:	ea e2       	ldi	r30, 0x2A	; 42
    2e0e:	f0 e0       	ldi	r31, 0x00	; 0
    2e10:	80 81       	ld	r24, Z
    2e12:	84 60       	ori	r24, 0x04	; 4
    2e14:	8c 93       	st	X, r24
		/* The URSEL must be one when writing to UCSRC */
		UCSRC |= (1<<URSEL) | (1<<UCSZ0) | (1<<UCSZ1);
    2e16:	a0 e4       	ldi	r26, 0x40	; 64
    2e18:	b0 e0       	ldi	r27, 0x00	; 0
    2e1a:	e0 e4       	ldi	r30, 0x40	; 64
    2e1c:	f0 e0       	ldi	r31, 0x00	; 0
    2e1e:	80 81       	ld	r24, Z
    2e20:	86 68       	ori	r24, 0x86	; 134
    2e22:	8c 93       	st	X, r24
    2e24:	17 c0       	rjmp	.+46     	; 0x2e54 <UART_init+0x80>
	}
	else{
		/*for 5 , 6 , 7 ,8 bit mode */
		UCSRC |= (1<<URSEL);
    2e26:	a0 e4       	ldi	r26, 0x40	; 64
    2e28:	b0 e0       	ldi	r27, 0x00	; 0
    2e2a:	e0 e4       	ldi	r30, 0x40	; 64
    2e2c:	f0 e0       	ldi	r31, 0x00	; 0
    2e2e:	80 81       	ld	r24, Z
    2e30:	80 68       	ori	r24, 0x80	; 128
    2e32:	8c 93       	st	X, r24
		UCSRC = (UCSRC & 0xF9) | ((Config_Ptr->bit_data)<<1);
    2e34:	a0 e4       	ldi	r26, 0x40	; 64
    2e36:	b0 e0       	ldi	r27, 0x00	; 0
    2e38:	e0 e4       	ldi	r30, 0x40	; 64
    2e3a:	f0 e0       	ldi	r31, 0x00	; 0
    2e3c:	80 81       	ld	r24, Z
    2e3e:	28 2f       	mov	r18, r24
    2e40:	29 7f       	andi	r18, 0xF9	; 249
    2e42:	eb 81       	ldd	r30, Y+3	; 0x03
    2e44:	fc 81       	ldd	r31, Y+4	; 0x04
    2e46:	80 81       	ld	r24, Z
    2e48:	88 2f       	mov	r24, r24
    2e4a:	90 e0       	ldi	r25, 0x00	; 0
    2e4c:	88 0f       	add	r24, r24
    2e4e:	99 1f       	adc	r25, r25
    2e50:	82 2b       	or	r24, r18
    2e52:	8c 93       	st	X, r24
	}

	/* choose parity and stop bit */
	UCSRC = (UCSRC & 0xCF ) | ((Config_Ptr->parity)<<4);
    2e54:	a0 e4       	ldi	r26, 0x40	; 64
    2e56:	b0 e0       	ldi	r27, 0x00	; 0
    2e58:	e0 e4       	ldi	r30, 0x40	; 64
    2e5a:	f0 e0       	ldi	r31, 0x00	; 0
    2e5c:	80 81       	ld	r24, Z
    2e5e:	28 2f       	mov	r18, r24
    2e60:	2f 7c       	andi	r18, 0xCF	; 207
    2e62:	eb 81       	ldd	r30, Y+3	; 0x03
    2e64:	fc 81       	ldd	r31, Y+4	; 0x04
    2e66:	81 81       	ldd	r24, Z+1	; 0x01
    2e68:	88 2f       	mov	r24, r24
    2e6a:	90 e0       	ldi	r25, 0x00	; 0
    2e6c:	82 95       	swap	r24
    2e6e:	92 95       	swap	r25
    2e70:	90 7f       	andi	r25, 0xF0	; 240
    2e72:	98 27       	eor	r25, r24
    2e74:	80 7f       	andi	r24, 0xF0	; 240
    2e76:	98 27       	eor	r25, r24
    2e78:	82 2b       	or	r24, r18
    2e7a:	8c 93       	st	X, r24
	UCSRC = (UCSRC & 0xF7 ) | ((Config_Ptr->stop_bit)<<3);
    2e7c:	a0 e4       	ldi	r26, 0x40	; 64
    2e7e:	b0 e0       	ldi	r27, 0x00	; 0
    2e80:	e0 e4       	ldi	r30, 0x40	; 64
    2e82:	f0 e0       	ldi	r31, 0x00	; 0
    2e84:	80 81       	ld	r24, Z
    2e86:	28 2f       	mov	r18, r24
    2e88:	27 7f       	andi	r18, 0xF7	; 247
    2e8a:	eb 81       	ldd	r30, Y+3	; 0x03
    2e8c:	fc 81       	ldd	r31, Y+4	; 0x04
    2e8e:	82 81       	ldd	r24, Z+2	; 0x02
    2e90:	88 2f       	mov	r24, r24
    2e92:	90 e0       	ldi	r25, 0x00	; 0
    2e94:	88 0f       	add	r24, r24
    2e96:	99 1f       	adc	r25, r25
    2e98:	88 0f       	add	r24, r24
    2e9a:	99 1f       	adc	r25, r25
    2e9c:	88 0f       	add	r24, r24
    2e9e:	99 1f       	adc	r25, r25
    2ea0:	82 2b       	or	r24, r18
    2ea2:	8c 93       	st	X, r24

	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (Config_Ptr->baud_rate * 8UL))) - 1);
    2ea4:	eb 81       	ldd	r30, Y+3	; 0x03
    2ea6:	fc 81       	ldd	r31, Y+4	; 0x04
    2ea8:	83 81       	ldd	r24, Z+3	; 0x03
    2eaa:	94 81       	ldd	r25, Z+4	; 0x04
    2eac:	a5 81       	ldd	r26, Z+5	; 0x05
    2eae:	b6 81       	ldd	r27, Z+6	; 0x06
    2eb0:	88 0f       	add	r24, r24
    2eb2:	99 1f       	adc	r25, r25
    2eb4:	aa 1f       	adc	r26, r26
    2eb6:	bb 1f       	adc	r27, r27
    2eb8:	88 0f       	add	r24, r24
    2eba:	99 1f       	adc	r25, r25
    2ebc:	aa 1f       	adc	r26, r26
    2ebe:	bb 1f       	adc	r27, r27
    2ec0:	88 0f       	add	r24, r24
    2ec2:	99 1f       	adc	r25, r25
    2ec4:	aa 1f       	adc	r26, r26
    2ec6:	bb 1f       	adc	r27, r27
    2ec8:	9c 01       	movw	r18, r24
    2eca:	ad 01       	movw	r20, r26
    2ecc:	80 e0       	ldi	r24, 0x00	; 0
    2ece:	92 e1       	ldi	r25, 0x12	; 18
    2ed0:	aa e7       	ldi	r26, 0x7A	; 122
    2ed2:	b0 e0       	ldi	r27, 0x00	; 0
    2ed4:	bc 01       	movw	r22, r24
    2ed6:	cd 01       	movw	r24, r26
    2ed8:	0e 94 17 18 	call	0x302e	; 0x302e <__udivmodsi4>
    2edc:	da 01       	movw	r26, r20
    2ede:	c9 01       	movw	r24, r18
    2ee0:	01 97       	sbiw	r24, 0x01	; 1
    2ee2:	9a 83       	std	Y+2, r25	; 0x02
    2ee4:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    2ee6:	e0 e4       	ldi	r30, 0x40	; 64
    2ee8:	f0 e0       	ldi	r31, 0x00	; 0
    2eea:	89 81       	ldd	r24, Y+1	; 0x01
    2eec:	9a 81       	ldd	r25, Y+2	; 0x02
    2eee:	89 2f       	mov	r24, r25
    2ef0:	99 27       	eor	r25, r25
    2ef2:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    2ef4:	e9 e2       	ldi	r30, 0x29	; 41
    2ef6:	f0 e0       	ldi	r31, 0x00	; 0
    2ef8:	89 81       	ldd	r24, Y+1	; 0x01
    2efa:	80 83       	st	Z, r24

}
    2efc:	0f 90       	pop	r0
    2efe:	0f 90       	pop	r0
    2f00:	0f 90       	pop	r0
    2f02:	0f 90       	pop	r0
    2f04:	cf 91       	pop	r28
    2f06:	df 91       	pop	r29
    2f08:	08 95       	ret

00002f0a <UART_sendByte>:
/*[FUNCTION NAME]	: UART_sendByte
 *[DESCRIPTION]		: Functional responsible for send byte to another UART device.
 *[ARGUMENTS]		: uint8 data
 *[RETURNS]			: void
 */
void UART_sendByte(const uint8 data){
    2f0a:	df 93       	push	r29
    2f0c:	cf 93       	push	r28
    2f0e:	0f 92       	push	r0
    2f10:	cd b7       	in	r28, 0x3d	; 61
    2f12:	de b7       	in	r29, 0x3e	; 62
    2f14:	89 83       	std	Y+1, r24	; 0x01

	while(BIT_IS_CLEAR(UCSRA,UDRE));
    2f16:	eb e2       	ldi	r30, 0x2B	; 43
    2f18:	f0 e0       	ldi	r31, 0x00	; 0
    2f1a:	80 81       	ld	r24, Z
    2f1c:	88 2f       	mov	r24, r24
    2f1e:	90 e0       	ldi	r25, 0x00	; 0
    2f20:	80 72       	andi	r24, 0x20	; 32
    2f22:	90 70       	andi	r25, 0x00	; 0
    2f24:	00 97       	sbiw	r24, 0x00	; 0
    2f26:	b9 f3       	breq	.-18     	; 0x2f16 <UART_sendByte+0xc>
	UDR = data;
    2f28:	ec e2       	ldi	r30, 0x2C	; 44
    2f2a:	f0 e0       	ldi	r31, 0x00	; 0
    2f2c:	89 81       	ldd	r24, Y+1	; 0x01
    2f2e:	80 83       	st	Z, r24
}
    2f30:	0f 90       	pop	r0
    2f32:	cf 91       	pop	r28
    2f34:	df 91       	pop	r29
    2f36:	08 95       	ret

00002f38 <UART_recieveByte>:
/*[FUNCTION NAME]	: UART_sendByte
 *[DESCRIPTION]		: Functional responsible for receive byte from another UART device.
 *[ARGUMENTS]		: void
 *[RETURNS]			: uint8
 */
uint8 UART_recieveByte(){
    2f38:	df 93       	push	r29
    2f3a:	cf 93       	push	r28
    2f3c:	cd b7       	in	r28, 0x3d	; 61
    2f3e:	de b7       	in	r29, 0x3e	; 62
	while(BIT_IS_CLEAR(UCSRA,RXCIE));
    2f40:	eb e2       	ldi	r30, 0x2B	; 43
    2f42:	f0 e0       	ldi	r31, 0x00	; 0
    2f44:	80 81       	ld	r24, Z
    2f46:	88 23       	and	r24, r24
    2f48:	dc f7       	brge	.-10     	; 0x2f40 <UART_recieveByte+0x8>
	return UDR;
    2f4a:	ec e2       	ldi	r30, 0x2C	; 44
    2f4c:	f0 e0       	ldi	r31, 0x00	; 0
    2f4e:	80 81       	ld	r24, Z
}
    2f50:	cf 91       	pop	r28
    2f52:	df 91       	pop	r29
    2f54:	08 95       	ret

00002f56 <UART_sendString>:
/*[FUNCTION NAME]	: UART_sendString
 *[DESCRIPTION]		: Send the required string through UART to the other UART device.
 *[ARGUMENTS]		: void
 *[RETURNS]			: void
 */
void UART_sendString(const uint8 *Str){
    2f56:	df 93       	push	r29
    2f58:	cf 93       	push	r28
    2f5a:	00 d0       	rcall	.+0      	; 0x2f5c <UART_sendString+0x6>
    2f5c:	0f 92       	push	r0
    2f5e:	cd b7       	in	r28, 0x3d	; 61
    2f60:	de b7       	in	r29, 0x3e	; 62
    2f62:	9b 83       	std	Y+3, r25	; 0x03
    2f64:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i =0;
    2f66:	19 82       	std	Y+1, r1	; 0x01
    2f68:	0e c0       	rjmp	.+28     	; 0x2f86 <UART_sendString+0x30>
	while(Str[i] != '\0'){
		UART_sendByte(Str[i]);
    2f6a:	89 81       	ldd	r24, Y+1	; 0x01
    2f6c:	28 2f       	mov	r18, r24
    2f6e:	30 e0       	ldi	r19, 0x00	; 0
    2f70:	8a 81       	ldd	r24, Y+2	; 0x02
    2f72:	9b 81       	ldd	r25, Y+3	; 0x03
    2f74:	fc 01       	movw	r30, r24
    2f76:	e2 0f       	add	r30, r18
    2f78:	f3 1f       	adc	r31, r19
    2f7a:	80 81       	ld	r24, Z
    2f7c:	0e 94 85 17 	call	0x2f0a	; 0x2f0a <UART_sendByte>
		i++;
    2f80:	89 81       	ldd	r24, Y+1	; 0x01
    2f82:	8f 5f       	subi	r24, 0xFF	; 255
    2f84:	89 83       	std	Y+1, r24	; 0x01
 *[ARGUMENTS]		: void
 *[RETURNS]			: void
 */
void UART_sendString(const uint8 *Str){
	uint8 i =0;
	while(Str[i] != '\0'){
    2f86:	89 81       	ldd	r24, Y+1	; 0x01
    2f88:	28 2f       	mov	r18, r24
    2f8a:	30 e0       	ldi	r19, 0x00	; 0
    2f8c:	8a 81       	ldd	r24, Y+2	; 0x02
    2f8e:	9b 81       	ldd	r25, Y+3	; 0x03
    2f90:	fc 01       	movw	r30, r24
    2f92:	e2 0f       	add	r30, r18
    2f94:	f3 1f       	adc	r31, r19
    2f96:	80 81       	ld	r24, Z
    2f98:	88 23       	and	r24, r24
    2f9a:	39 f7       	brne	.-50     	; 0x2f6a <UART_sendString+0x14>
		UART_sendByte(Str[i]);
		i++;
	}
}
    2f9c:	0f 90       	pop	r0
    2f9e:	0f 90       	pop	r0
    2fa0:	0f 90       	pop	r0
    2fa2:	cf 91       	pop	r28
    2fa4:	df 91       	pop	r29
    2fa6:	08 95       	ret

00002fa8 <UART_recieveString>:
/*[FUNCTION NAME]	: UART_sendString
 *[DESCRIPTION]		: Receive the required string until the '#' symbol through UART from the other UART device.
 *[ARGUMENTS]		: uint8 pointer to string
 *[RETURNS]			: void
 */
void UART_recieveString(uint8 *Str){
    2fa8:	0f 93       	push	r16
    2faa:	1f 93       	push	r17
    2fac:	df 93       	push	r29
    2fae:	cf 93       	push	r28
    2fb0:	00 d0       	rcall	.+0      	; 0x2fb2 <UART_recieveString+0xa>
    2fb2:	0f 92       	push	r0
    2fb4:	cd b7       	in	r28, 0x3d	; 61
    2fb6:	de b7       	in	r29, 0x3e	; 62
    2fb8:	9b 83       	std	Y+3, r25	; 0x03
    2fba:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i =0;
    2fbc:	19 82       	std	Y+1, r1	; 0x01
	Str[i]= UART_recieveByte();
    2fbe:	89 81       	ldd	r24, Y+1	; 0x01
    2fc0:	28 2f       	mov	r18, r24
    2fc2:	30 e0       	ldi	r19, 0x00	; 0
    2fc4:	8a 81       	ldd	r24, Y+2	; 0x02
    2fc6:	9b 81       	ldd	r25, Y+3	; 0x03
    2fc8:	8c 01       	movw	r16, r24
    2fca:	02 0f       	add	r16, r18
    2fcc:	13 1f       	adc	r17, r19
    2fce:	0e 94 9c 17 	call	0x2f38	; 0x2f38 <UART_recieveByte>
    2fd2:	f8 01       	movw	r30, r16
    2fd4:	80 83       	st	Z, r24
    2fd6:	0f c0       	rjmp	.+30     	; 0x2ff6 <UART_recieveString+0x4e>
	while(Str[i] != '#'){
		i++;
    2fd8:	89 81       	ldd	r24, Y+1	; 0x01
    2fda:	8f 5f       	subi	r24, 0xFF	; 255
    2fdc:	89 83       	std	Y+1, r24	; 0x01
		Str[i]= UART_recieveByte();
    2fde:	89 81       	ldd	r24, Y+1	; 0x01
    2fe0:	28 2f       	mov	r18, r24
    2fe2:	30 e0       	ldi	r19, 0x00	; 0
    2fe4:	8a 81       	ldd	r24, Y+2	; 0x02
    2fe6:	9b 81       	ldd	r25, Y+3	; 0x03
    2fe8:	8c 01       	movw	r16, r24
    2fea:	02 0f       	add	r16, r18
    2fec:	13 1f       	adc	r17, r19
    2fee:	0e 94 9c 17 	call	0x2f38	; 0x2f38 <UART_recieveByte>
    2ff2:	f8 01       	movw	r30, r16
    2ff4:	80 83       	st	Z, r24
 *[RETURNS]			: void
 */
void UART_recieveString(uint8 *Str){
	uint8 i =0;
	Str[i]= UART_recieveByte();
	while(Str[i] != '#'){
    2ff6:	89 81       	ldd	r24, Y+1	; 0x01
    2ff8:	28 2f       	mov	r18, r24
    2ffa:	30 e0       	ldi	r19, 0x00	; 0
    2ffc:	8a 81       	ldd	r24, Y+2	; 0x02
    2ffe:	9b 81       	ldd	r25, Y+3	; 0x03
    3000:	fc 01       	movw	r30, r24
    3002:	e2 0f       	add	r30, r18
    3004:	f3 1f       	adc	r31, r19
    3006:	80 81       	ld	r24, Z
    3008:	83 32       	cpi	r24, 0x23	; 35
    300a:	31 f7       	brne	.-52     	; 0x2fd8 <UART_recieveString+0x30>
		i++;
		Str[i]= UART_recieveByte();
	}
	Str[i] = '\0';
    300c:	89 81       	ldd	r24, Y+1	; 0x01
    300e:	28 2f       	mov	r18, r24
    3010:	30 e0       	ldi	r19, 0x00	; 0
    3012:	8a 81       	ldd	r24, Y+2	; 0x02
    3014:	9b 81       	ldd	r25, Y+3	; 0x03
    3016:	fc 01       	movw	r30, r24
    3018:	e2 0f       	add	r30, r18
    301a:	f3 1f       	adc	r31, r19
    301c:	10 82       	st	Z, r1
}
    301e:	0f 90       	pop	r0
    3020:	0f 90       	pop	r0
    3022:	0f 90       	pop	r0
    3024:	cf 91       	pop	r28
    3026:	df 91       	pop	r29
    3028:	1f 91       	pop	r17
    302a:	0f 91       	pop	r16
    302c:	08 95       	ret

0000302e <__udivmodsi4>:
    302e:	a1 e2       	ldi	r26, 0x21	; 33
    3030:	1a 2e       	mov	r1, r26
    3032:	aa 1b       	sub	r26, r26
    3034:	bb 1b       	sub	r27, r27
    3036:	fd 01       	movw	r30, r26
    3038:	0d c0       	rjmp	.+26     	; 0x3054 <__udivmodsi4_ep>

0000303a <__udivmodsi4_loop>:
    303a:	aa 1f       	adc	r26, r26
    303c:	bb 1f       	adc	r27, r27
    303e:	ee 1f       	adc	r30, r30
    3040:	ff 1f       	adc	r31, r31
    3042:	a2 17       	cp	r26, r18
    3044:	b3 07       	cpc	r27, r19
    3046:	e4 07       	cpc	r30, r20
    3048:	f5 07       	cpc	r31, r21
    304a:	20 f0       	brcs	.+8      	; 0x3054 <__udivmodsi4_ep>
    304c:	a2 1b       	sub	r26, r18
    304e:	b3 0b       	sbc	r27, r19
    3050:	e4 0b       	sbc	r30, r20
    3052:	f5 0b       	sbc	r31, r21

00003054 <__udivmodsi4_ep>:
    3054:	66 1f       	adc	r22, r22
    3056:	77 1f       	adc	r23, r23
    3058:	88 1f       	adc	r24, r24
    305a:	99 1f       	adc	r25, r25
    305c:	1a 94       	dec	r1
    305e:	69 f7       	brne	.-38     	; 0x303a <__udivmodsi4_loop>
    3060:	60 95       	com	r22
    3062:	70 95       	com	r23
    3064:	80 95       	com	r24
    3066:	90 95       	com	r25
    3068:	9b 01       	movw	r18, r22
    306a:	ac 01       	movw	r20, r24
    306c:	bd 01       	movw	r22, r26
    306e:	cf 01       	movw	r24, r30
    3070:	08 95       	ret

00003072 <__prologue_saves__>:
    3072:	2f 92       	push	r2
    3074:	3f 92       	push	r3
    3076:	4f 92       	push	r4
    3078:	5f 92       	push	r5
    307a:	6f 92       	push	r6
    307c:	7f 92       	push	r7
    307e:	8f 92       	push	r8
    3080:	9f 92       	push	r9
    3082:	af 92       	push	r10
    3084:	bf 92       	push	r11
    3086:	cf 92       	push	r12
    3088:	df 92       	push	r13
    308a:	ef 92       	push	r14
    308c:	ff 92       	push	r15
    308e:	0f 93       	push	r16
    3090:	1f 93       	push	r17
    3092:	cf 93       	push	r28
    3094:	df 93       	push	r29
    3096:	cd b7       	in	r28, 0x3d	; 61
    3098:	de b7       	in	r29, 0x3e	; 62
    309a:	ca 1b       	sub	r28, r26
    309c:	db 0b       	sbc	r29, r27
    309e:	0f b6       	in	r0, 0x3f	; 63
    30a0:	f8 94       	cli
    30a2:	de bf       	out	0x3e, r29	; 62
    30a4:	0f be       	out	0x3f, r0	; 63
    30a6:	cd bf       	out	0x3d, r28	; 61
    30a8:	09 94       	ijmp

000030aa <__epilogue_restores__>:
    30aa:	2a 88       	ldd	r2, Y+18	; 0x12
    30ac:	39 88       	ldd	r3, Y+17	; 0x11
    30ae:	48 88       	ldd	r4, Y+16	; 0x10
    30b0:	5f 84       	ldd	r5, Y+15	; 0x0f
    30b2:	6e 84       	ldd	r6, Y+14	; 0x0e
    30b4:	7d 84       	ldd	r7, Y+13	; 0x0d
    30b6:	8c 84       	ldd	r8, Y+12	; 0x0c
    30b8:	9b 84       	ldd	r9, Y+11	; 0x0b
    30ba:	aa 84       	ldd	r10, Y+10	; 0x0a
    30bc:	b9 84       	ldd	r11, Y+9	; 0x09
    30be:	c8 84       	ldd	r12, Y+8	; 0x08
    30c0:	df 80       	ldd	r13, Y+7	; 0x07
    30c2:	ee 80       	ldd	r14, Y+6	; 0x06
    30c4:	fd 80       	ldd	r15, Y+5	; 0x05
    30c6:	0c 81       	ldd	r16, Y+4	; 0x04
    30c8:	1b 81       	ldd	r17, Y+3	; 0x03
    30ca:	aa 81       	ldd	r26, Y+2	; 0x02
    30cc:	b9 81       	ldd	r27, Y+1	; 0x01
    30ce:	ce 0f       	add	r28, r30
    30d0:	d1 1d       	adc	r29, r1
    30d2:	0f b6       	in	r0, 0x3f	; 63
    30d4:	f8 94       	cli
    30d6:	de bf       	out	0x3e, r29	; 62
    30d8:	0f be       	out	0x3f, r0	; 63
    30da:	cd bf       	out	0x3d, r28	; 61
    30dc:	ed 01       	movw	r28, r26
    30de:	08 95       	ret

000030e0 <itoa>:
    30e0:	fb 01       	movw	r30, r22
    30e2:	9f 01       	movw	r18, r30
    30e4:	e8 94       	clt
    30e6:	42 30       	cpi	r20, 0x02	; 2
    30e8:	c4 f0       	brlt	.+48     	; 0x311a <itoa+0x3a>
    30ea:	45 32       	cpi	r20, 0x25	; 37
    30ec:	b4 f4       	brge	.+44     	; 0x311a <itoa+0x3a>
    30ee:	4a 30       	cpi	r20, 0x0A	; 10
    30f0:	29 f4       	brne	.+10     	; 0x30fc <itoa+0x1c>
    30f2:	97 fb       	bst	r25, 7
    30f4:	1e f4       	brtc	.+6      	; 0x30fc <itoa+0x1c>
    30f6:	90 95       	com	r25
    30f8:	81 95       	neg	r24
    30fa:	9f 4f       	sbci	r25, 0xFF	; 255
    30fc:	64 2f       	mov	r22, r20
    30fe:	77 27       	eor	r23, r23
    3100:	0e 94 a1 18 	call	0x3142	; 0x3142 <__udivmodhi4>
    3104:	80 5d       	subi	r24, 0xD0	; 208
    3106:	8a 33       	cpi	r24, 0x3A	; 58
    3108:	0c f0       	brlt	.+2      	; 0x310c <itoa+0x2c>
    310a:	89 5d       	subi	r24, 0xD9	; 217
    310c:	81 93       	st	Z+, r24
    310e:	cb 01       	movw	r24, r22
    3110:	00 97       	sbiw	r24, 0x00	; 0
    3112:	a1 f7       	brne	.-24     	; 0x30fc <itoa+0x1c>
    3114:	16 f4       	brtc	.+4      	; 0x311a <itoa+0x3a>
    3116:	5d e2       	ldi	r21, 0x2D	; 45
    3118:	51 93       	st	Z+, r21
    311a:	10 82       	st	Z, r1
    311c:	c9 01       	movw	r24, r18
    311e:	0c 94 91 18 	jmp	0x3122	; 0x3122 <strrev>

00003122 <strrev>:
    3122:	dc 01       	movw	r26, r24
    3124:	fc 01       	movw	r30, r24
    3126:	67 2f       	mov	r22, r23
    3128:	71 91       	ld	r23, Z+
    312a:	77 23       	and	r23, r23
    312c:	e1 f7       	brne	.-8      	; 0x3126 <strrev+0x4>
    312e:	32 97       	sbiw	r30, 0x02	; 2
    3130:	04 c0       	rjmp	.+8      	; 0x313a <strrev+0x18>
    3132:	7c 91       	ld	r23, X
    3134:	6d 93       	st	X+, r22
    3136:	70 83       	st	Z, r23
    3138:	62 91       	ld	r22, -Z
    313a:	ae 17       	cp	r26, r30
    313c:	bf 07       	cpc	r27, r31
    313e:	c8 f3       	brcs	.-14     	; 0x3132 <strrev+0x10>
    3140:	08 95       	ret

00003142 <__udivmodhi4>:
    3142:	aa 1b       	sub	r26, r26
    3144:	bb 1b       	sub	r27, r27
    3146:	51 e1       	ldi	r21, 0x11	; 17
    3148:	07 c0       	rjmp	.+14     	; 0x3158 <__udivmodhi4_ep>

0000314a <__udivmodhi4_loop>:
    314a:	aa 1f       	adc	r26, r26
    314c:	bb 1f       	adc	r27, r27
    314e:	a6 17       	cp	r26, r22
    3150:	b7 07       	cpc	r27, r23
    3152:	10 f0       	brcs	.+4      	; 0x3158 <__udivmodhi4_ep>
    3154:	a6 1b       	sub	r26, r22
    3156:	b7 0b       	sbc	r27, r23

00003158 <__udivmodhi4_ep>:
    3158:	88 1f       	adc	r24, r24
    315a:	99 1f       	adc	r25, r25
    315c:	5a 95       	dec	r21
    315e:	a9 f7       	brne	.-22     	; 0x314a <__udivmodhi4_loop>
    3160:	80 95       	com	r24
    3162:	90 95       	com	r25
    3164:	bc 01       	movw	r22, r24
    3166:	cd 01       	movw	r24, r26
    3168:	08 95       	ret

0000316a <_exit>:
    316a:	f8 94       	cli

0000316c <__stop_program>:
    316c:	ff cf       	rjmp	.-2      	; 0x316c <__stop_program>
